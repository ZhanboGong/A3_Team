{"ast":null,"code":"import _defineProperty from \"E:/PMS_A3/A3_Team/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nvar _UrlSerializer, _ChildrenOutletContexts, _RouterOutlet, _RoutedComponentInputBinder, _TitleStrategy, _DefaultTitleStrategy, _ɵEmptyOutletComponent, _RouterConfigLoader, _UrlHandlingStrategy, _DefaultUrlHandlingStrategy, _NavigationTransitions, _RouteReuseStrategy, _DefaultRouteReuseStrategy, _StateManager, _HistoryStateManager, _Router;\n/**\n * @license Angular v19.2.6\n * (c) 2010-2025 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport { DOCUMENT, Location } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { ɵisPromise as _isPromise, ɵRuntimeError as _RuntimeError, Injectable, ɵisNgModule as _isNgModule, isStandalone, createEnvironmentInjector, InjectionToken, EventEmitter, input, inject, ViewContainerRef, ChangeDetectorRef, Output, Input, Directive, reflectComponentType, ɵisInjectable as _isInjectable, runInInjectionContext, Component, NgModuleFactory, Compiler, NgZone, afterNextRender, EnvironmentInjector, DestroyRef, ɵConsole as _Console, ɵPendingTasksInternal as _PendingTasksInternal } from '@angular/core';\nimport { isObservable, from, of, BehaviorSubject, combineLatest, EmptyError, concat, defer, pipe, throwError, EMPTY, ConnectableObservable, Subject, Subscription } from 'rxjs';\nimport { map, switchMap, take, startWith, filter, mergeMap, first, concatMap, tap, catchError, scan, defaultIfEmpty, last as last$1, takeLast, finalize, refCount, takeUntil } from 'rxjs/operators';\nimport * as i1 from '@angular/platform-browser';\n\n/**\n * The primary routing outlet.\n *\n * @publicApi\n */\nconst PRIMARY_OUTLET = 'primary';\n/**\n * A private symbol used to store the value of `Route.title` inside the `Route.data` if it is a\n * static string or `Route.resolve` if anything else. This allows us to reuse the existing route\n * data/resolvers to support the title feature without new instrumentation in the `Router` pipeline.\n */\nconst RouteTitleKey = /* @__PURE__ */Symbol('RouteTitle');\nclass ParamsAsMap {\n  constructor(params) {\n    _defineProperty(this, \"params\", void 0);\n    this.params = params || {};\n  }\n  has(name) {\n    return Object.prototype.hasOwnProperty.call(this.params, name);\n  }\n  get(name) {\n    if (this.has(name)) {\n      const v = this.params[name];\n      return Array.isArray(v) ? v[0] : v;\n    }\n    return null;\n  }\n  getAll(name) {\n    if (this.has(name)) {\n      const v = this.params[name];\n      return Array.isArray(v) ? v : [v];\n    }\n    return [];\n  }\n  get keys() {\n    return Object.keys(this.params);\n  }\n}\n/**\n * Converts a `Params` instance to a `ParamMap`.\n * @param params The instance to convert.\n * @returns The new map instance.\n *\n * @publicApi\n */\nfunction convertToParamMap(params) {\n  return new ParamsAsMap(params);\n}\n/**\n * Matches the route configuration (`route`) against the actual URL (`segments`).\n *\n * When no matcher is defined on a `Route`, this is the matcher used by the Router by default.\n *\n * @param segments The remaining unmatched segments in the current navigation\n * @param segmentGroup The current segment group being matched\n * @param route The `Route` to match against.\n *\n * @see {@link UrlMatchResult}\n * @see {@link Route}\n *\n * @returns The resulting match information or `null` if the `route` should not match.\n * @publicApi\n */\nfunction defaultUrlMatcher(segments, segmentGroup, route) {\n  const parts = route.path.split('/');\n  if (parts.length > segments.length) {\n    // The actual URL is shorter than the config, no match\n    return null;\n  }\n  if (route.pathMatch === 'full' && (segmentGroup.hasChildren() || parts.length < segments.length)) {\n    // The config is longer than the actual URL but we are looking for a full match, return null\n    return null;\n  }\n  const posParams = {};\n  // Check each config part against the actual URL\n  for (let index = 0; index < parts.length; index++) {\n    const part = parts[index];\n    const segment = segments[index];\n    const isParameter = part[0] === ':';\n    if (isParameter) {\n      posParams[part.substring(1)] = segment;\n    } else if (part !== segment.path) {\n      // The actual URL part does not match the config, no match\n      return null;\n    }\n  }\n  return {\n    consumed: segments.slice(0, parts.length),\n    posParams\n  };\n}\nfunction shallowEqualArrays(a, b) {\n  if (a.length !== b.length) return false;\n  for (let i = 0; i < a.length; ++i) {\n    if (!shallowEqual(a[i], b[i])) return false;\n  }\n  return true;\n}\nfunction shallowEqual(a, b) {\n  // While `undefined` should never be possible, it would sometimes be the case in IE 11\n  // and pre-chromium Edge. The check below accounts for this edge case.\n  const k1 = a ? getDataKeys(a) : undefined;\n  const k2 = b ? getDataKeys(b) : undefined;\n  if (!k1 || !k2 || k1.length != k2.length) {\n    return false;\n  }\n  let key;\n  for (let i = 0; i < k1.length; i++) {\n    key = k1[i];\n    if (!equalArraysOrString(a[key], b[key])) {\n      return false;\n    }\n  }\n  return true;\n}\n/**\n * Gets the keys of an object, including `symbol` keys.\n */\nfunction getDataKeys(obj) {\n  return [...Object.keys(obj), ...Object.getOwnPropertySymbols(obj)];\n}\n/**\n * Test equality for arrays of strings or a string.\n */\nfunction equalArraysOrString(a, b) {\n  if (Array.isArray(a) && Array.isArray(b)) {\n    if (a.length !== b.length) return false;\n    const aSorted = [...a].sort();\n    const bSorted = [...b].sort();\n    return aSorted.every((val, index) => bSorted[index] === val);\n  } else {\n    return a === b;\n  }\n}\n/**\n * Return the last element of an array.\n */\nfunction last(a) {\n  return a.length > 0 ? a[a.length - 1] : null;\n}\nfunction wrapIntoObservable(value) {\n  if (isObservable(value)) {\n    return value;\n  }\n  if (_isPromise(value)) {\n    // Use `Promise.resolve()` to wrap promise-like instances.\n    // Required ie when a Resolver returns a AngularJS `$q` promise to correctly trigger the\n    // change detection.\n    return from(Promise.resolve(value));\n  }\n  return of(value);\n}\nconst pathCompareMap = {\n  'exact': equalSegmentGroups,\n  'subset': containsSegmentGroup\n};\nconst paramCompareMap = {\n  'exact': equalParams,\n  'subset': containsParams,\n  'ignored': () => true\n};\nfunction containsTree(container, containee, options) {\n  return pathCompareMap[options.paths](container.root, containee.root, options.matrixParams) && paramCompareMap[options.queryParams](container.queryParams, containee.queryParams) && !(options.fragment === 'exact' && container.fragment !== containee.fragment);\n}\nfunction equalParams(container, containee) {\n  // TODO: This does not handle array params correctly.\n  return shallowEqual(container, containee);\n}\nfunction equalSegmentGroups(container, containee, matrixParams) {\n  if (!equalPath(container.segments, containee.segments)) return false;\n  if (!matrixParamsMatch(container.segments, containee.segments, matrixParams)) {\n    return false;\n  }\n  if (container.numberOfChildren !== containee.numberOfChildren) return false;\n  for (const c in containee.children) {\n    if (!container.children[c]) return false;\n    if (!equalSegmentGroups(container.children[c], containee.children[c], matrixParams)) return false;\n  }\n  return true;\n}\nfunction containsParams(container, containee) {\n  return Object.keys(containee).length <= Object.keys(container).length && Object.keys(containee).every(key => equalArraysOrString(container[key], containee[key]));\n}\nfunction containsSegmentGroup(container, containee, matrixParams) {\n  return containsSegmentGroupHelper(container, containee, containee.segments, matrixParams);\n}\nfunction containsSegmentGroupHelper(container, containee, containeePaths, matrixParams) {\n  if (container.segments.length > containeePaths.length) {\n    const current = container.segments.slice(0, containeePaths.length);\n    if (!equalPath(current, containeePaths)) return false;\n    if (containee.hasChildren()) return false;\n    if (!matrixParamsMatch(current, containeePaths, matrixParams)) return false;\n    return true;\n  } else if (container.segments.length === containeePaths.length) {\n    if (!equalPath(container.segments, containeePaths)) return false;\n    if (!matrixParamsMatch(container.segments, containeePaths, matrixParams)) return false;\n    for (const c in containee.children) {\n      if (!container.children[c]) return false;\n      if (!containsSegmentGroup(container.children[c], containee.children[c], matrixParams)) {\n        return false;\n      }\n    }\n    return true;\n  } else {\n    const current = containeePaths.slice(0, container.segments.length);\n    const next = containeePaths.slice(container.segments.length);\n    if (!equalPath(container.segments, current)) return false;\n    if (!matrixParamsMatch(container.segments, current, matrixParams)) return false;\n    if (!container.children[PRIMARY_OUTLET]) return false;\n    return containsSegmentGroupHelper(container.children[PRIMARY_OUTLET], containee, next, matrixParams);\n  }\n}\nfunction matrixParamsMatch(containerPaths, containeePaths, options) {\n  return containeePaths.every((containeeSegment, i) => {\n    return paramCompareMap[options](containerPaths[i].parameters, containeeSegment.parameters);\n  });\n}\n/**\n * @description\n *\n * Represents the parsed URL.\n *\n * Since a router state is a tree, and the URL is nothing but a serialized state, the URL is a\n * serialized tree.\n * UrlTree is a data structure that provides a lot of affordances in dealing with URLs\n *\n * @usageNotes\n * ### Example\n *\n * ```ts\n * @Component({templateUrl:'template.html'})\n * class MyComponent {\n *   constructor(router: Router) {\n *     const tree: UrlTree =\n *       router.parseUrl('/team/33/(user/victor//support:help)?debug=true#fragment');\n *     const f = tree.fragment; // return 'fragment'\n *     const q = tree.queryParams; // returns {debug: 'true'}\n *     const g: UrlSegmentGroup = tree.root.children[PRIMARY_OUTLET];\n *     const s: UrlSegment[] = g.segments; // returns 2 segments 'team' and '33'\n *     g.children[PRIMARY_OUTLET].segments; // returns 2 segments 'user' and 'victor'\n *     g.children['support'].segments; // return 1 segment 'help'\n *   }\n * }\n * ```\n *\n * @publicApi\n */\nclass UrlTree {\n  constructor(/** The root segment group of the URL tree */\n  root = new UrlSegmentGroup([], {}), /** The query params of the URL */\n  queryParams = {}, /** The fragment of the URL */\n  fragment = null) {\n    _defineProperty(this, \"root\", void 0);\n    _defineProperty(this, \"queryParams\", void 0);\n    _defineProperty(this, \"fragment\", void 0);\n    /** @internal */\n    _defineProperty(this, \"_queryParamMap\", void 0);\n    this.root = root;\n    this.queryParams = queryParams;\n    this.fragment = fragment;\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      if (root.segments.length > 0) {\n        throw new _RuntimeError(4015 /* RuntimeErrorCode.INVALID_ROOT_URL_SEGMENT */, 'The root `UrlSegmentGroup` should not contain `segments`. ' + 'Instead, these segments belong in the `children` so they can be associated with a named outlet.');\n      }\n    }\n  }\n  get queryParamMap() {\n    var _this$_queryParamMap;\n    (_this$_queryParamMap = this._queryParamMap) !== null && _this$_queryParamMap !== void 0 ? _this$_queryParamMap : this._queryParamMap = convertToParamMap(this.queryParams);\n    return this._queryParamMap;\n  }\n  /** @docsNotRequired */\n  toString() {\n    return DEFAULT_SERIALIZER.serialize(this);\n  }\n}\n/**\n * @description\n *\n * Represents the parsed URL segment group.\n *\n * See `UrlTree` for more information.\n *\n * @publicApi\n */\nclass UrlSegmentGroup {\n  constructor(/** The URL segments of this group. See `UrlSegment` for more information */\n  segments, /** The list of children of this group */\n  children) {\n    _defineProperty(this, \"segments\", void 0);\n    _defineProperty(this, \"children\", void 0);\n    /** The parent node in the url tree */\n    _defineProperty(this, \"parent\", null);\n    this.segments = segments;\n    this.children = children;\n    Object.values(children).forEach(v => v.parent = this);\n  }\n  /** Whether the segment has child segments */\n  hasChildren() {\n    return this.numberOfChildren > 0;\n  }\n  /** Number of child segments */\n  get numberOfChildren() {\n    return Object.keys(this.children).length;\n  }\n  /** @docsNotRequired */\n  toString() {\n    return serializePaths(this);\n  }\n}\n/**\n * @description\n *\n * Represents a single URL segment.\n *\n * A UrlSegment is a part of a URL between the two slashes. It contains a path and the matrix\n * parameters associated with the segment.\n *\n * @usageNotes\n * ### Example\n *\n * ```ts\n * @Component({templateUrl:'template.html'})\n * class MyComponent {\n *   constructor(router: Router) {\n *     const tree: UrlTree = router.parseUrl('/team;id=33');\n *     const g: UrlSegmentGroup = tree.root.children[PRIMARY_OUTLET];\n *     const s: UrlSegment[] = g.segments;\n *     s[0].path; // returns 'team'\n *     s[0].parameters; // returns {id: 33}\n *   }\n * }\n * ```\n *\n * @publicApi\n */\nclass UrlSegment {\n  constructor(/** The path part of a URL segment */\n  path, /** The matrix parameters associated with a segment */\n  parameters) {\n    _defineProperty(this, \"path\", void 0);\n    _defineProperty(this, \"parameters\", void 0);\n    /** @internal */\n    _defineProperty(this, \"_parameterMap\", void 0);\n    this.path = path;\n    this.parameters = parameters;\n  }\n  get parameterMap() {\n    var _this$_parameterMap;\n    (_this$_parameterMap = this._parameterMap) !== null && _this$_parameterMap !== void 0 ? _this$_parameterMap : this._parameterMap = convertToParamMap(this.parameters);\n    return this._parameterMap;\n  }\n  /** @docsNotRequired */\n  toString() {\n    return serializePath(this);\n  }\n}\nfunction equalSegments(as, bs) {\n  return equalPath(as, bs) && as.every((a, i) => shallowEqual(a.parameters, bs[i].parameters));\n}\nfunction equalPath(as, bs) {\n  if (as.length !== bs.length) return false;\n  return as.every((a, i) => a.path === bs[i].path);\n}\nfunction mapChildrenIntoArray(segment, fn) {\n  let res = [];\n  Object.entries(segment.children).forEach(([childOutlet, child]) => {\n    if (childOutlet === PRIMARY_OUTLET) {\n      res = res.concat(fn(child, childOutlet));\n    }\n  });\n  Object.entries(segment.children).forEach(([childOutlet, child]) => {\n    if (childOutlet !== PRIMARY_OUTLET) {\n      res = res.concat(fn(child, childOutlet));\n    }\n  });\n  return res;\n}\n/**\n * @description\n *\n * Serializes and deserializes a URL string into a URL tree.\n *\n * The url serialization strategy is customizable. You can\n * make all URLs case insensitive by providing a custom UrlSerializer.\n *\n * See `DefaultUrlSerializer` for an example of a URL serializer.\n *\n * @publicApi\n */\nclass UrlSerializer {}\n_UrlSerializer = UrlSerializer;\n_defineProperty(UrlSerializer, \"\\u0275fac\", function _UrlSerializer_Factory(__ngFactoryType__) {\n  return new (__ngFactoryType__ || _UrlSerializer)();\n});\n_defineProperty(UrlSerializer, \"\\u0275prov\", /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: _UrlSerializer,\n  factory: () => (() => new DefaultUrlSerializer())(),\n  providedIn: 'root'\n}));\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(UrlSerializer, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root',\n      useFactory: () => new DefaultUrlSerializer()\n    }]\n  }], null, null);\n})();\n/**\n * @description\n *\n * A default implementation of the `UrlSerializer`.\n *\n * Example URLs:\n *\n * ```\n * /inbox/33(popup:compose)\n * /inbox/33;open=true/messages/44\n * ```\n *\n * DefaultUrlSerializer uses parentheses to serialize secondary segments (e.g., popup:compose), the\n * colon syntax to specify the outlet, and the ';parameter=value' syntax (e.g., open=true) to\n * specify route specific parameters.\n *\n * @publicApi\n */\nclass DefaultUrlSerializer {\n  /** Parses a url into a `UrlTree` */\n  parse(url) {\n    const p = new UrlParser(url);\n    return new UrlTree(p.parseRootSegment(), p.parseQueryParams(), p.parseFragment());\n  }\n  /** Converts a `UrlTree` into a url */\n  serialize(tree) {\n    const segment = `/${serializeSegment(tree.root, true)}`;\n    const query = serializeQueryParams(tree.queryParams);\n    const fragment = typeof tree.fragment === `string` ? `#${encodeUriFragment(tree.fragment)}` : '';\n    return `${segment}${query}${fragment}`;\n  }\n}\nconst DEFAULT_SERIALIZER = new DefaultUrlSerializer();\nfunction serializePaths(segment) {\n  return segment.segments.map(p => serializePath(p)).join('/');\n}\nfunction serializeSegment(segment, root) {\n  if (!segment.hasChildren()) {\n    return serializePaths(segment);\n  }\n  if (root) {\n    const primary = segment.children[PRIMARY_OUTLET] ? serializeSegment(segment.children[PRIMARY_OUTLET], false) : '';\n    const children = [];\n    Object.entries(segment.children).forEach(([k, v]) => {\n      if (k !== PRIMARY_OUTLET) {\n        children.push(`${k}:${serializeSegment(v, false)}`);\n      }\n    });\n    return children.length > 0 ? `${primary}(${children.join('//')})` : primary;\n  } else {\n    const children = mapChildrenIntoArray(segment, (v, k) => {\n      if (k === PRIMARY_OUTLET) {\n        return [serializeSegment(segment.children[PRIMARY_OUTLET], false)];\n      }\n      return [`${k}:${serializeSegment(v, false)}`];\n    });\n    // use no parenthesis if the only child is a primary outlet route\n    if (Object.keys(segment.children).length === 1 && segment.children[PRIMARY_OUTLET] != null) {\n      return `${serializePaths(segment)}/${children[0]}`;\n    }\n    return `${serializePaths(segment)}/(${children.join('//')})`;\n  }\n}\n/**\n * Encodes a URI string with the default encoding. This function will only ever be called from\n * `encodeUriQuery` or `encodeUriSegment` as it's the base set of encodings to be used. We need\n * a custom encoding because encodeURIComponent is too aggressive and encodes stuff that doesn't\n * have to be encoded per https://url.spec.whatwg.org.\n */\nfunction encodeUriString(s) {\n  return encodeURIComponent(s).replace(/%40/g, '@').replace(/%3A/gi, ':').replace(/%24/g, '$').replace(/%2C/gi, ',');\n}\n/**\n * This function should be used to encode both keys and values in a query string key/value. In\n * the following URL, you need to call encodeUriQuery on \"k\" and \"v\":\n *\n * http://www.site.org/html;mk=mv?k=v#f\n */\nfunction encodeUriQuery(s) {\n  return encodeUriString(s).replace(/%3B/gi, ';');\n}\n/**\n * This function should be used to encode a URL fragment. In the following URL, you need to call\n * encodeUriFragment on \"f\":\n *\n * http://www.site.org/html;mk=mv?k=v#f\n */\nfunction encodeUriFragment(s) {\n  return encodeURI(s);\n}\n/**\n * This function should be run on any URI segment as well as the key and value in a key/value\n * pair for matrix params. In the following URL, you need to call encodeUriSegment on \"html\",\n * \"mk\", and \"mv\":\n *\n * http://www.site.org/html;mk=mv?k=v#f\n */\nfunction encodeUriSegment(s) {\n  return encodeUriString(s).replace(/\\(/g, '%28').replace(/\\)/g, '%29').replace(/%26/gi, '&');\n}\nfunction decode(s) {\n  return decodeURIComponent(s);\n}\n// Query keys/values should have the \"+\" replaced first, as \"+\" in a query string is \" \".\n// decodeURIComponent function will not decode \"+\" as a space.\nfunction decodeQuery(s) {\n  return decode(s.replace(/\\+/g, '%20'));\n}\nfunction serializePath(path) {\n  return `${encodeUriSegment(path.path)}${serializeMatrixParams(path.parameters)}`;\n}\nfunction serializeMatrixParams(params) {\n  return Object.entries(params).map(([key, value]) => `;${encodeUriSegment(key)}=${encodeUriSegment(value)}`).join('');\n}\nfunction serializeQueryParams(params) {\n  const strParams = Object.entries(params).map(([name, value]) => {\n    return Array.isArray(value) ? value.map(v => `${encodeUriQuery(name)}=${encodeUriQuery(v)}`).join('&') : `${encodeUriQuery(name)}=${encodeUriQuery(value)}`;\n  }).filter(s => s);\n  return strParams.length ? `?${strParams.join('&')}` : '';\n}\nconst SEGMENT_RE = /^[^\\/()?;#]+/;\nfunction matchSegments(str) {\n  const match = str.match(SEGMENT_RE);\n  return match ? match[0] : '';\n}\nconst MATRIX_PARAM_SEGMENT_RE = /^[^\\/()?;=#]+/;\nfunction matchMatrixKeySegments(str) {\n  const match = str.match(MATRIX_PARAM_SEGMENT_RE);\n  return match ? match[0] : '';\n}\nconst QUERY_PARAM_RE = /^[^=?&#]+/;\n// Return the name of the query param at the start of the string or an empty string\nfunction matchQueryParams(str) {\n  const match = str.match(QUERY_PARAM_RE);\n  return match ? match[0] : '';\n}\nconst QUERY_PARAM_VALUE_RE = /^[^&#]+/;\n// Return the value of the query param at the start of the string or an empty string\nfunction matchUrlQueryParamValue(str) {\n  const match = str.match(QUERY_PARAM_VALUE_RE);\n  return match ? match[0] : '';\n}\nclass UrlParser {\n  constructor(url) {\n    _defineProperty(this, \"url\", void 0);\n    _defineProperty(this, \"remaining\", void 0);\n    this.url = url;\n    this.remaining = url;\n  }\n  parseRootSegment() {\n    this.consumeOptional('/');\n    if (this.remaining === '' || this.peekStartsWith('?') || this.peekStartsWith('#')) {\n      return new UrlSegmentGroup([], {});\n    }\n    // The root segment group never has segments\n    return new UrlSegmentGroup([], this.parseChildren());\n  }\n  parseQueryParams() {\n    const params = {};\n    if (this.consumeOptional('?')) {\n      do {\n        this.parseQueryParam(params);\n      } while (this.consumeOptional('&'));\n    }\n    return params;\n  }\n  parseFragment() {\n    return this.consumeOptional('#') ? decodeURIComponent(this.remaining) : null;\n  }\n  parseChildren() {\n    if (this.remaining === '') {\n      return {};\n    }\n    this.consumeOptional('/');\n    const segments = [];\n    if (!this.peekStartsWith('(')) {\n      segments.push(this.parseSegment());\n    }\n    while (this.peekStartsWith('/') && !this.peekStartsWith('//') && !this.peekStartsWith('/(')) {\n      this.capture('/');\n      segments.push(this.parseSegment());\n    }\n    let children = {};\n    if (this.peekStartsWith('/(')) {\n      this.capture('/');\n      children = this.parseParens(true);\n    }\n    let res = {};\n    if (this.peekStartsWith('(')) {\n      res = this.parseParens(false);\n    }\n    if (segments.length > 0 || Object.keys(children).length > 0) {\n      res[PRIMARY_OUTLET] = new UrlSegmentGroup(segments, children);\n    }\n    return res;\n  }\n  // parse a segment with its matrix parameters\n  // ie `name;k1=v1;k2`\n  parseSegment() {\n    const path = matchSegments(this.remaining);\n    if (path === '' && this.peekStartsWith(';')) {\n      throw new _RuntimeError(4009 /* RuntimeErrorCode.EMPTY_PATH_WITH_PARAMS */, (typeof ngDevMode === 'undefined' || ngDevMode) && `Empty path url segment cannot have parameters: '${this.remaining}'.`);\n    }\n    this.capture(path);\n    return new UrlSegment(decode(path), this.parseMatrixParams());\n  }\n  parseMatrixParams() {\n    const params = {};\n    while (this.consumeOptional(';')) {\n      this.parseParam(params);\n    }\n    return params;\n  }\n  parseParam(params) {\n    const key = matchMatrixKeySegments(this.remaining);\n    if (!key) {\n      return;\n    }\n    this.capture(key);\n    let value = '';\n    if (this.consumeOptional('=')) {\n      const valueMatch = matchSegments(this.remaining);\n      if (valueMatch) {\n        value = valueMatch;\n        this.capture(value);\n      }\n    }\n    params[decode(key)] = decode(value);\n  }\n  // Parse a single query parameter `name[=value]`\n  parseQueryParam(params) {\n    const key = matchQueryParams(this.remaining);\n    if (!key) {\n      return;\n    }\n    this.capture(key);\n    let value = '';\n    if (this.consumeOptional('=')) {\n      const valueMatch = matchUrlQueryParamValue(this.remaining);\n      if (valueMatch) {\n        value = valueMatch;\n        this.capture(value);\n      }\n    }\n    const decodedKey = decodeQuery(key);\n    const decodedVal = decodeQuery(value);\n    if (params.hasOwnProperty(decodedKey)) {\n      // Append to existing values\n      let currentVal = params[decodedKey];\n      if (!Array.isArray(currentVal)) {\n        currentVal = [currentVal];\n        params[decodedKey] = currentVal;\n      }\n      currentVal.push(decodedVal);\n    } else {\n      // Create a new value\n      params[decodedKey] = decodedVal;\n    }\n  }\n  // parse `(a/b//outlet_name:c/d)`\n  parseParens(allowPrimary) {\n    const segments = {};\n    this.capture('(');\n    while (!this.consumeOptional(')') && this.remaining.length > 0) {\n      const path = matchSegments(this.remaining);\n      const next = this.remaining[path.length];\n      // if is is not one of these characters, then the segment was unescaped\n      // or the group was not closed\n      if (next !== '/' && next !== ')' && next !== ';') {\n        throw new _RuntimeError(4010 /* RuntimeErrorCode.UNPARSABLE_URL */, (typeof ngDevMode === 'undefined' || ngDevMode) && `Cannot parse url '${this.url}'`);\n      }\n      let outletName = undefined;\n      if (path.indexOf(':') > -1) {\n        outletName = path.slice(0, path.indexOf(':'));\n        this.capture(outletName);\n        this.capture(':');\n      } else if (allowPrimary) {\n        outletName = PRIMARY_OUTLET;\n      }\n      const children = this.parseChildren();\n      segments[outletName] = Object.keys(children).length === 1 ? children[PRIMARY_OUTLET] : new UrlSegmentGroup([], children);\n      this.consumeOptional('//');\n    }\n    return segments;\n  }\n  peekStartsWith(str) {\n    return this.remaining.startsWith(str);\n  }\n  // Consumes the prefix when it is present and returns whether it has been consumed\n  consumeOptional(str) {\n    if (this.peekStartsWith(str)) {\n      this.remaining = this.remaining.substring(str.length);\n      return true;\n    }\n    return false;\n  }\n  capture(str) {\n    if (!this.consumeOptional(str)) {\n      throw new _RuntimeError(4011 /* RuntimeErrorCode.UNEXPECTED_VALUE_IN_URL */, (typeof ngDevMode === 'undefined' || ngDevMode) && `Expected \"${str}\".`);\n    }\n  }\n}\nfunction createRoot(rootCandidate) {\n  return rootCandidate.segments.length > 0 ? new UrlSegmentGroup([], {\n    [PRIMARY_OUTLET]: rootCandidate\n  }) : rootCandidate;\n}\n/**\n * Recursively\n * - merges primary segment children into their parents\n * - drops empty children (those which have no segments and no children themselves). This latter\n * prevents serializing a group into something like `/a(aux:)`, where `aux` is an empty child\n * segment.\n * - merges named outlets without a primary segment sibling into the children. This prevents\n * serializing a URL like `//(a:a)(b:b) instead of `/(a:a//b:b)` when the aux b route lives on the\n * root but the `a` route lives under an empty path primary route.\n */\nfunction squashSegmentGroup(segmentGroup) {\n  const newChildren = {};\n  for (const [childOutlet, child] of Object.entries(segmentGroup.children)) {\n    const childCandidate = squashSegmentGroup(child);\n    // moves named children in an empty path primary child into this group\n    if (childOutlet === PRIMARY_OUTLET && childCandidate.segments.length === 0 && childCandidate.hasChildren()) {\n      for (const [grandChildOutlet, grandChild] of Object.entries(childCandidate.children)) {\n        newChildren[grandChildOutlet] = grandChild;\n      }\n    } // don't add empty children\n    else if (childCandidate.segments.length > 0 || childCandidate.hasChildren()) {\n      newChildren[childOutlet] = childCandidate;\n    }\n  }\n  const s = new UrlSegmentGroup(segmentGroup.segments, newChildren);\n  return mergeTrivialChildren(s);\n}\n/**\n * When possible, merges the primary outlet child into the parent `UrlSegmentGroup`.\n *\n * When a segment group has only one child which is a primary outlet, merges that child into the\n * parent. That is, the child segment group's segments are merged into the `s` and the child's\n * children become the children of `s`. Think of this like a 'squash', merging the child segment\n * group into the parent.\n */\nfunction mergeTrivialChildren(s) {\n  if (s.numberOfChildren === 1 && s.children[PRIMARY_OUTLET]) {\n    const c = s.children[PRIMARY_OUTLET];\n    return new UrlSegmentGroup(s.segments.concat(c.segments), c.children);\n  }\n  return s;\n}\nfunction isUrlTree(v) {\n  return v instanceof UrlTree;\n}\n\n/**\n * Creates a `UrlTree` relative to an `ActivatedRouteSnapshot`.\n *\n * @publicApi\n *\n *\n * @param relativeTo The `ActivatedRouteSnapshot` to apply the commands to\n * @param commands An array of URL fragments with which to construct the new URL tree.\n * If the path is static, can be the literal URL string. For a dynamic path, pass an array of path\n * segments, followed by the parameters for each segment.\n * The fragments are applied to the one provided in the `relativeTo` parameter.\n * @param queryParams The query parameters for the `UrlTree`. `null` if the `UrlTree` does not have\n *     any query parameters.\n * @param fragment The fragment for the `UrlTree`. `null` if the `UrlTree` does not have a fragment.\n *\n * @usageNotes\n *\n * ```ts\n * // create /team/33/user/11\n * createUrlTreeFromSnapshot(snapshot, ['/team', 33, 'user', 11]);\n *\n * // create /team/33;expand=true/user/11\n * createUrlTreeFromSnapshot(snapshot, ['/team', 33, {expand: true}, 'user', 11]);\n *\n * // you can collapse static segments like this (this works only with the first passed-in value):\n * createUrlTreeFromSnapshot(snapshot, ['/team/33/user', userId]);\n *\n * // If the first segment can contain slashes, and you do not want the router to split it,\n * // you can do the following:\n * createUrlTreeFromSnapshot(snapshot, [{segmentPath: '/one/two'}]);\n *\n * // create /team/33/(user/11//right:chat)\n * createUrlTreeFromSnapshot(snapshot, ['/team', 33, {outlets: {primary: 'user/11', right:\n * 'chat'}}], null, null);\n *\n * // remove the right secondary node\n * createUrlTreeFromSnapshot(snapshot, ['/team', 33, {outlets: {primary: 'user/11', right: null}}]);\n *\n * // For the examples below, assume the current URL is for the `/team/33/user/11` and the\n * `ActivatedRouteSnapshot` points to `user/11`:\n *\n * // navigate to /team/33/user/11/details\n * createUrlTreeFromSnapshot(snapshot, ['details']);\n *\n * // navigate to /team/33/user/22\n * createUrlTreeFromSnapshot(snapshot, ['../22']);\n *\n * // navigate to /team/44/user/22\n * createUrlTreeFromSnapshot(snapshot, ['../../team/44/user/22']);\n * ```\n */\nfunction createUrlTreeFromSnapshot(relativeTo, commands, queryParams = null, fragment = null) {\n  const relativeToUrlSegmentGroup = createSegmentGroupFromRoute(relativeTo);\n  return createUrlTreeFromSegmentGroup(relativeToUrlSegmentGroup, commands, queryParams, fragment);\n}\nfunction createSegmentGroupFromRoute(route) {\n  let targetGroup;\n  function createSegmentGroupFromRouteRecursive(currentRoute) {\n    const childOutlets = {};\n    for (const childSnapshot of currentRoute.children) {\n      const root = createSegmentGroupFromRouteRecursive(childSnapshot);\n      childOutlets[childSnapshot.outlet] = root;\n    }\n    const segmentGroup = new UrlSegmentGroup(currentRoute.url, childOutlets);\n    if (currentRoute === route) {\n      targetGroup = segmentGroup;\n    }\n    return segmentGroup;\n  }\n  const rootCandidate = createSegmentGroupFromRouteRecursive(route.root);\n  const rootSegmentGroup = createRoot(rootCandidate);\n  return targetGroup !== null && targetGroup !== void 0 ? targetGroup : rootSegmentGroup;\n}\nfunction createUrlTreeFromSegmentGroup(relativeTo, commands, queryParams, fragment) {\n  let root = relativeTo;\n  while (root.parent) {\n    root = root.parent;\n  }\n  // There are no commands so the `UrlTree` goes to the same path as the one created from the\n  // `UrlSegmentGroup`. All we need to do is update the `queryParams` and `fragment` without\n  // applying any other logic.\n  if (commands.length === 0) {\n    return tree(root, root, root, queryParams, fragment);\n  }\n  const nav = computeNavigation(commands);\n  if (nav.toRoot()) {\n    return tree(root, root, new UrlSegmentGroup([], {}), queryParams, fragment);\n  }\n  const position = findStartingPositionForTargetGroup(nav, root, relativeTo);\n  const newSegmentGroup = position.processChildren ? updateSegmentGroupChildren(position.segmentGroup, position.index, nav.commands) : updateSegmentGroup(position.segmentGroup, position.index, nav.commands);\n  return tree(root, position.segmentGroup, newSegmentGroup, queryParams, fragment);\n}\nfunction isMatrixParams(command) {\n  return typeof command === 'object' && command != null && !command.outlets && !command.segmentPath;\n}\n/**\n * Determines if a given command has an `outlets` map. When we encounter a command\n * with an outlets k/v map, we need to apply each outlet individually to the existing segment.\n */\nfunction isCommandWithOutlets(command) {\n  return typeof command === 'object' && command != null && command.outlets;\n}\nfunction tree(oldRoot, oldSegmentGroup, newSegmentGroup, queryParams, fragment) {\n  let qp = {};\n  if (queryParams) {\n    Object.entries(queryParams).forEach(([name, value]) => {\n      qp[name] = Array.isArray(value) ? value.map(v => `${v}`) : `${value}`;\n    });\n  }\n  let rootCandidate;\n  if (oldRoot === oldSegmentGroup) {\n    rootCandidate = newSegmentGroup;\n  } else {\n    rootCandidate = replaceSegment(oldRoot, oldSegmentGroup, newSegmentGroup);\n  }\n  const newRoot = createRoot(squashSegmentGroup(rootCandidate));\n  return new UrlTree(newRoot, qp, fragment);\n}\n/**\n * Replaces the `oldSegment` which is located in some child of the `current` with the `newSegment`.\n * This also has the effect of creating new `UrlSegmentGroup` copies to update references. This\n * shouldn't be necessary but the fallback logic for an invalid ActivatedRoute in the creation uses\n * the Router's current url tree. If we don't create new segment groups, we end up modifying that\n * value.\n */\nfunction replaceSegment(current, oldSegment, newSegment) {\n  const children = {};\n  Object.entries(current.children).forEach(([outletName, c]) => {\n    if (c === oldSegment) {\n      children[outletName] = newSegment;\n    } else {\n      children[outletName] = replaceSegment(c, oldSegment, newSegment);\n    }\n  });\n  return new UrlSegmentGroup(current.segments, children);\n}\nclass Navigation {\n  constructor(isAbsolute, numberOfDoubleDots, commands) {\n    _defineProperty(this, \"isAbsolute\", void 0);\n    _defineProperty(this, \"numberOfDoubleDots\", void 0);\n    _defineProperty(this, \"commands\", void 0);\n    this.isAbsolute = isAbsolute;\n    this.numberOfDoubleDots = numberOfDoubleDots;\n    this.commands = commands;\n    if (isAbsolute && commands.length > 0 && isMatrixParams(commands[0])) {\n      throw new _RuntimeError(4003 /* RuntimeErrorCode.ROOT_SEGMENT_MATRIX_PARAMS */, (typeof ngDevMode === 'undefined' || ngDevMode) && 'Root segment cannot have matrix parameters');\n    }\n    const cmdWithOutlet = commands.find(isCommandWithOutlets);\n    if (cmdWithOutlet && cmdWithOutlet !== last(commands)) {\n      throw new _RuntimeError(4004 /* RuntimeErrorCode.MISPLACED_OUTLETS_COMMAND */, (typeof ngDevMode === 'undefined' || ngDevMode) && '{outlets:{}} has to be the last command');\n    }\n  }\n  toRoot() {\n    return this.isAbsolute && this.commands.length === 1 && this.commands[0] == '/';\n  }\n}\n/** Transforms commands to a normalized `Navigation` */\nfunction computeNavigation(commands) {\n  if (typeof commands[0] === 'string' && commands.length === 1 && commands[0] === '/') {\n    return new Navigation(true, 0, commands);\n  }\n  let numberOfDoubleDots = 0;\n  let isAbsolute = false;\n  const res = commands.reduce((res, cmd, cmdIdx) => {\n    if (typeof cmd === 'object' && cmd != null) {\n      if (cmd.outlets) {\n        const outlets = {};\n        Object.entries(cmd.outlets).forEach(([name, commands]) => {\n          outlets[name] = typeof commands === 'string' ? commands.split('/') : commands;\n        });\n        return [...res, {\n          outlets\n        }];\n      }\n      if (cmd.segmentPath) {\n        return [...res, cmd.segmentPath];\n      }\n    }\n    if (!(typeof cmd === 'string')) {\n      return [...res, cmd];\n    }\n    if (cmdIdx === 0) {\n      cmd.split('/').forEach((urlPart, partIndex) => {\n        if (partIndex == 0 && urlPart === '.') ;else if (partIndex == 0 && urlPart === '') {\n          //  '/a'\n          isAbsolute = true;\n        } else if (urlPart === '..') {\n          //  '../a'\n          numberOfDoubleDots++;\n        } else if (urlPart != '') {\n          res.push(urlPart);\n        }\n      });\n      return res;\n    }\n    return [...res, cmd];\n  }, []);\n  return new Navigation(isAbsolute, numberOfDoubleDots, res);\n}\nclass Position {\n  constructor(segmentGroup, processChildren, index) {\n    _defineProperty(this, \"segmentGroup\", void 0);\n    _defineProperty(this, \"processChildren\", void 0);\n    _defineProperty(this, \"index\", void 0);\n    this.segmentGroup = segmentGroup;\n    this.processChildren = processChildren;\n    this.index = index;\n  }\n}\nfunction findStartingPositionForTargetGroup(nav, root, target) {\n  if (nav.isAbsolute) {\n    return new Position(root, true, 0);\n  }\n  if (!target) {\n    // `NaN` is used only to maintain backwards compatibility with incorrectly mocked\n    // `ActivatedRouteSnapshot` in tests. In prior versions of this code, the position here was\n    // determined based on an internal property that was rarely mocked, resulting in `NaN`. In\n    // reality, this code path should _never_ be touched since `target` is not allowed to be falsey.\n    return new Position(root, false, NaN);\n  }\n  if (target.parent === null) {\n    return new Position(target, true, 0);\n  }\n  const modifier = isMatrixParams(nav.commands[0]) ? 0 : 1;\n  const index = target.segments.length - 1 + modifier;\n  return createPositionApplyingDoubleDots(target, index, nav.numberOfDoubleDots);\n}\nfunction createPositionApplyingDoubleDots(group, index, numberOfDoubleDots) {\n  let g = group;\n  let ci = index;\n  let dd = numberOfDoubleDots;\n  while (dd > ci) {\n    dd -= ci;\n    g = g.parent;\n    if (!g) {\n      throw new _RuntimeError(4005 /* RuntimeErrorCode.INVALID_DOUBLE_DOTS */, (typeof ngDevMode === 'undefined' || ngDevMode) && \"Invalid number of '../'\");\n    }\n    ci = g.segments.length;\n  }\n  return new Position(g, false, ci - dd);\n}\nfunction getOutlets(commands) {\n  if (isCommandWithOutlets(commands[0])) {\n    return commands[0].outlets;\n  }\n  return {\n    [PRIMARY_OUTLET]: commands\n  };\n}\nfunction updateSegmentGroup(segmentGroup, startIndex, commands) {\n  segmentGroup !== null && segmentGroup !== void 0 ? segmentGroup : segmentGroup = new UrlSegmentGroup([], {});\n  if (segmentGroup.segments.length === 0 && segmentGroup.hasChildren()) {\n    return updateSegmentGroupChildren(segmentGroup, startIndex, commands);\n  }\n  const m = prefixedWith(segmentGroup, startIndex, commands);\n  const slicedCommands = commands.slice(m.commandIndex);\n  if (m.match && m.pathIndex < segmentGroup.segments.length) {\n    const g = new UrlSegmentGroup(segmentGroup.segments.slice(0, m.pathIndex), {});\n    g.children[PRIMARY_OUTLET] = new UrlSegmentGroup(segmentGroup.segments.slice(m.pathIndex), segmentGroup.children);\n    return updateSegmentGroupChildren(g, 0, slicedCommands);\n  } else if (m.match && slicedCommands.length === 0) {\n    return new UrlSegmentGroup(segmentGroup.segments, {});\n  } else if (m.match && !segmentGroup.hasChildren()) {\n    return createNewSegmentGroup(segmentGroup, startIndex, commands);\n  } else if (m.match) {\n    return updateSegmentGroupChildren(segmentGroup, 0, slicedCommands);\n  } else {\n    return createNewSegmentGroup(segmentGroup, startIndex, commands);\n  }\n}\nfunction updateSegmentGroupChildren(segmentGroup, startIndex, commands) {\n  if (commands.length === 0) {\n    return new UrlSegmentGroup(segmentGroup.segments, {});\n  } else {\n    const outlets = getOutlets(commands);\n    const children = {};\n    // If the set of commands applies to anything other than the primary outlet and the child\n    // segment is an empty path primary segment on its own, we want to apply the commands to the\n    // empty child path rather than here. The outcome is that the empty primary child is effectively\n    // removed from the final output UrlTree. Imagine the following config:\n    //\n    // {path: '', children: [{path: '**', outlet: 'popup'}]}.\n    //\n    // Navigation to /(popup:a) will activate the child outlet correctly Given a follow-up\n    // navigation with commands\n    // ['/', {outlets: {'popup': 'b'}}], we _would not_ want to apply the outlet commands to the\n    // root segment because that would result in\n    // //(popup:a)(popup:b) since the outlet command got applied one level above where it appears in\n    // the `ActivatedRoute` rather than updating the existing one.\n    //\n    // Because empty paths do not appear in the URL segments and the fact that the segments used in\n    // the output `UrlTree` are squashed to eliminate these empty paths where possible\n    // https://github.com/angular/angular/blob/13f10de40e25c6900ca55bd83b36bd533dacfa9e/packages/router/src/url_tree.ts#L755\n    // it can be hard to determine what is the right thing to do when applying commands to a\n    // `UrlSegmentGroup` that is created from an \"unsquashed\"/expanded `ActivatedRoute` tree.\n    // This code effectively \"squashes\" empty path primary routes when they have no siblings on\n    // the same level of the tree.\n    if (Object.keys(outlets).some(o => o !== PRIMARY_OUTLET) && segmentGroup.children[PRIMARY_OUTLET] && segmentGroup.numberOfChildren === 1 && segmentGroup.children[PRIMARY_OUTLET].segments.length === 0) {\n      const childrenOfEmptyChild = updateSegmentGroupChildren(segmentGroup.children[PRIMARY_OUTLET], startIndex, commands);\n      return new UrlSegmentGroup(segmentGroup.segments, childrenOfEmptyChild.children);\n    }\n    Object.entries(outlets).forEach(([outlet, commands]) => {\n      if (typeof commands === 'string') {\n        commands = [commands];\n      }\n      if (commands !== null) {\n        children[outlet] = updateSegmentGroup(segmentGroup.children[outlet], startIndex, commands);\n      }\n    });\n    Object.entries(segmentGroup.children).forEach(([childOutlet, child]) => {\n      if (outlets[childOutlet] === undefined) {\n        children[childOutlet] = child;\n      }\n    });\n    return new UrlSegmentGroup(segmentGroup.segments, children);\n  }\n}\nfunction prefixedWith(segmentGroup, startIndex, commands) {\n  let currentCommandIndex = 0;\n  let currentPathIndex = startIndex;\n  const noMatch = {\n    match: false,\n    pathIndex: 0,\n    commandIndex: 0\n  };\n  while (currentPathIndex < segmentGroup.segments.length) {\n    if (currentCommandIndex >= commands.length) return noMatch;\n    const path = segmentGroup.segments[currentPathIndex];\n    const command = commands[currentCommandIndex];\n    // Do not try to consume command as part of the prefixing if it has outlets because it can\n    // contain outlets other than the one being processed. Consuming the outlets command would\n    // result in other outlets being ignored.\n    if (isCommandWithOutlets(command)) {\n      break;\n    }\n    const curr = `${command}`;\n    const next = currentCommandIndex < commands.length - 1 ? commands[currentCommandIndex + 1] : null;\n    if (currentPathIndex > 0 && curr === undefined) break;\n    if (curr && next && typeof next === 'object' && next.outlets === undefined) {\n      if (!compare(curr, next, path)) return noMatch;\n      currentCommandIndex += 2;\n    } else {\n      if (!compare(curr, {}, path)) return noMatch;\n      currentCommandIndex++;\n    }\n    currentPathIndex++;\n  }\n  return {\n    match: true,\n    pathIndex: currentPathIndex,\n    commandIndex: currentCommandIndex\n  };\n}\nfunction createNewSegmentGroup(segmentGroup, startIndex, commands) {\n  const paths = segmentGroup.segments.slice(0, startIndex);\n  let i = 0;\n  while (i < commands.length) {\n    const command = commands[i];\n    if (isCommandWithOutlets(command)) {\n      const children = createNewSegmentChildren(command.outlets);\n      return new UrlSegmentGroup(paths, children);\n    }\n    // if we start with an object literal, we need to reuse the path part from the segment\n    if (i === 0 && isMatrixParams(commands[0])) {\n      const p = segmentGroup.segments[startIndex];\n      paths.push(new UrlSegment(p.path, stringify(commands[0])));\n      i++;\n      continue;\n    }\n    const curr = isCommandWithOutlets(command) ? command.outlets[PRIMARY_OUTLET] : `${command}`;\n    const next = i < commands.length - 1 ? commands[i + 1] : null;\n    if (curr && next && isMatrixParams(next)) {\n      paths.push(new UrlSegment(curr, stringify(next)));\n      i += 2;\n    } else {\n      paths.push(new UrlSegment(curr, {}));\n      i++;\n    }\n  }\n  return new UrlSegmentGroup(paths, {});\n}\nfunction createNewSegmentChildren(outlets) {\n  const children = {};\n  Object.entries(outlets).forEach(([outlet, commands]) => {\n    if (typeof commands === 'string') {\n      commands = [commands];\n    }\n    if (commands !== null) {\n      children[outlet] = createNewSegmentGroup(new UrlSegmentGroup([], {}), 0, commands);\n    }\n  });\n  return children;\n}\nfunction stringify(params) {\n  const res = {};\n  Object.entries(params).forEach(([k, v]) => res[k] = `${v}`);\n  return res;\n}\nfunction compare(path, params, segment) {\n  return path == segment.path && shallowEqual(params, segment.parameters);\n}\nconst IMPERATIVE_NAVIGATION = 'imperative';\n/**\n * Identifies the type of a router event.\n *\n * @publicApi\n */\nvar EventType;\n(function (EventType) {\n  EventType[EventType[\"NavigationStart\"] = 0] = \"NavigationStart\";\n  EventType[EventType[\"NavigationEnd\"] = 1] = \"NavigationEnd\";\n  EventType[EventType[\"NavigationCancel\"] = 2] = \"NavigationCancel\";\n  EventType[EventType[\"NavigationError\"] = 3] = \"NavigationError\";\n  EventType[EventType[\"RoutesRecognized\"] = 4] = \"RoutesRecognized\";\n  EventType[EventType[\"ResolveStart\"] = 5] = \"ResolveStart\";\n  EventType[EventType[\"ResolveEnd\"] = 6] = \"ResolveEnd\";\n  EventType[EventType[\"GuardsCheckStart\"] = 7] = \"GuardsCheckStart\";\n  EventType[EventType[\"GuardsCheckEnd\"] = 8] = \"GuardsCheckEnd\";\n  EventType[EventType[\"RouteConfigLoadStart\"] = 9] = \"RouteConfigLoadStart\";\n  EventType[EventType[\"RouteConfigLoadEnd\"] = 10] = \"RouteConfigLoadEnd\";\n  EventType[EventType[\"ChildActivationStart\"] = 11] = \"ChildActivationStart\";\n  EventType[EventType[\"ChildActivationEnd\"] = 12] = \"ChildActivationEnd\";\n  EventType[EventType[\"ActivationStart\"] = 13] = \"ActivationStart\";\n  EventType[EventType[\"ActivationEnd\"] = 14] = \"ActivationEnd\";\n  EventType[EventType[\"Scroll\"] = 15] = \"Scroll\";\n  EventType[EventType[\"NavigationSkipped\"] = 16] = \"NavigationSkipped\";\n})(EventType || (EventType = {}));\n/**\n * Base for events the router goes through, as opposed to events tied to a specific\n * route. Fired one time for any given navigation.\n *\n * The following code shows how a class subscribes to router events.\n *\n * ```ts\n * import {Event, RouterEvent, Router} from '@angular/router';\n *\n * class MyService {\n *   constructor(public router: Router) {\n *     router.events.pipe(\n *        filter((e: Event | RouterEvent): e is RouterEvent => e instanceof RouterEvent)\n *     ).subscribe((e: RouterEvent) => {\n *       // Do something\n *     });\n *   }\n * }\n * ```\n *\n * @see {@link Event}\n * @see [Router events summary](guide/routing/router-reference#router-events)\n * @publicApi\n */\nclass RouterEvent {\n  constructor(/** A unique ID that the router assigns to every router navigation. */\n  id, /** The URL that is the destination for this navigation. */\n  url) {\n    _defineProperty(this, \"id\", void 0);\n    _defineProperty(this, \"url\", void 0);\n    this.id = id;\n    this.url = url;\n  }\n}\n/**\n * An event triggered when a navigation starts.\n *\n * @publicApi\n */\nclass NavigationStart extends RouterEvent {\n  constructor(/** @docsNotRequired */\n  id, /** @docsNotRequired */\n  url, /** @docsNotRequired */\n  navigationTrigger = 'imperative', /** @docsNotRequired */\n  restoredState = null) {\n    super(id, url);\n    _defineProperty(this, \"type\", EventType.NavigationStart);\n    /**\n     * Identifies the call or event that triggered the navigation.\n     * An `imperative` trigger is a call to `router.navigateByUrl()` or `router.navigate()`.\n     *\n     * @see {@link NavigationEnd}\n     * @see {@link NavigationCancel}\n     * @see {@link NavigationError}\n     */\n    _defineProperty(this, \"navigationTrigger\", void 0);\n    /**\n     * The navigation state that was previously supplied to the `pushState` call,\n     * when the navigation is triggered by a `popstate` event. Otherwise null.\n     *\n     * The state object is defined by `NavigationExtras`, and contains any\n     * developer-defined state value, as well as a unique ID that\n     * the router assigns to every router transition/navigation.\n     *\n     * From the perspective of the router, the router never \"goes back\".\n     * When the user clicks on the back button in the browser,\n     * a new navigation ID is created.\n     *\n     * Use the ID in this previous-state object to differentiate between a newly created\n     * state and one returned to by a `popstate` event, so that you can restore some\n     * remembered state, such as scroll position.\n     *\n     */\n    _defineProperty(this, \"restoredState\", void 0);\n    this.navigationTrigger = navigationTrigger;\n    this.restoredState = restoredState;\n  }\n  /** @docsNotRequired */\n  toString() {\n    return `NavigationStart(id: ${this.id}, url: '${this.url}')`;\n  }\n}\n/**\n * An event triggered when a navigation ends successfully.\n *\n * @see {@link NavigationStart}\n * @see {@link NavigationCancel}\n * @see {@link NavigationError}\n *\n * @publicApi\n */\nclass NavigationEnd extends RouterEvent {\n  constructor(/** @docsNotRequired */\n  id, /** @docsNotRequired */\n  url, /** @docsNotRequired */\n  urlAfterRedirects) {\n    super(id, url);\n    _defineProperty(this, \"urlAfterRedirects\", void 0);\n    _defineProperty(this, \"type\", EventType.NavigationEnd);\n    this.urlAfterRedirects = urlAfterRedirects;\n  }\n  /** @docsNotRequired */\n  toString() {\n    return `NavigationEnd(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${this.urlAfterRedirects}')`;\n  }\n}\n/**\n * A code for the `NavigationCancel` event of the `Router` to indicate the\n * reason a navigation failed.\n *\n * @publicApi\n */\nvar NavigationCancellationCode;\n(function (NavigationCancellationCode) {\n  /**\n   * A navigation failed because a guard returned a `UrlTree` to redirect.\n   */\n  NavigationCancellationCode[NavigationCancellationCode[\"Redirect\"] = 0] = \"Redirect\";\n  /**\n   * A navigation failed because a more recent navigation started.\n   */\n  NavigationCancellationCode[NavigationCancellationCode[\"SupersededByNewNavigation\"] = 1] = \"SupersededByNewNavigation\";\n  /**\n   * A navigation failed because one of the resolvers completed without emitting a value.\n   */\n  NavigationCancellationCode[NavigationCancellationCode[\"NoDataFromResolver\"] = 2] = \"NoDataFromResolver\";\n  /**\n   * A navigation failed because a guard returned `false`.\n   */\n  NavigationCancellationCode[NavigationCancellationCode[\"GuardRejected\"] = 3] = \"GuardRejected\";\n})(NavigationCancellationCode || (NavigationCancellationCode = {}));\n/**\n * A code for the `NavigationSkipped` event of the `Router` to indicate the\n * reason a navigation was skipped.\n *\n * @publicApi\n */\nvar NavigationSkippedCode;\n(function (NavigationSkippedCode) {\n  /**\n   * A navigation was skipped because the navigation URL was the same as the current Router URL.\n   */\n  NavigationSkippedCode[NavigationSkippedCode[\"IgnoredSameUrlNavigation\"] = 0] = \"IgnoredSameUrlNavigation\";\n  /**\n   * A navigation was skipped because the configured `UrlHandlingStrategy` return `false` for both\n   * the current Router URL and the target of the navigation.\n   *\n   * @see {@link UrlHandlingStrategy}\n   */\n  NavigationSkippedCode[NavigationSkippedCode[\"IgnoredByUrlHandlingStrategy\"] = 1] = \"IgnoredByUrlHandlingStrategy\";\n})(NavigationSkippedCode || (NavigationSkippedCode = {}));\n/**\n * An event triggered when a navigation is canceled, directly or indirectly.\n * This can happen for several reasons including when a route guard\n * returns `false` or initiates a redirect by returning a `UrlTree`.\n *\n * @see {@link NavigationStart}\n * @see {@link NavigationEnd}\n * @see {@link NavigationError}\n *\n * @publicApi\n */\nclass NavigationCancel extends RouterEvent {\n  constructor(/** @docsNotRequired */\n  id, /** @docsNotRequired */\n  url,\n  /**\n   * A description of why the navigation was cancelled. For debug purposes only. Use `code`\n   * instead for a stable cancellation reason that can be used in production.\n   */\n  reason,\n  /**\n   * A code to indicate why the navigation was canceled. This cancellation code is stable for\n   * the reason and can be relied on whereas the `reason` string could change and should not be\n   * used in production.\n   */\n  code) {\n    super(id, url);\n    _defineProperty(this, \"reason\", void 0);\n    _defineProperty(this, \"code\", void 0);\n    _defineProperty(this, \"type\", EventType.NavigationCancel);\n    this.reason = reason;\n    this.code = code;\n  }\n  /** @docsNotRequired */\n  toString() {\n    return `NavigationCancel(id: ${this.id}, url: '${this.url}')`;\n  }\n}\n/**\n * An event triggered when a navigation is skipped.\n * This can happen for a couple reasons including onSameUrlHandling\n * is set to `ignore` and the navigation URL is not different than the\n * current state.\n *\n * @publicApi\n */\nclass NavigationSkipped extends RouterEvent {\n  constructor(/** @docsNotRequired */\n  id, /** @docsNotRequired */\n  url,\n  /**\n   * A description of why the navigation was skipped. For debug purposes only. Use `code`\n   * instead for a stable skipped reason that can be used in production.\n   */\n  reason,\n  /**\n   * A code to indicate why the navigation was skipped. This code is stable for\n   * the reason and can be relied on whereas the `reason` string could change and should not be\n   * used in production.\n   */\n  code) {\n    super(id, url);\n    _defineProperty(this, \"reason\", void 0);\n    _defineProperty(this, \"code\", void 0);\n    _defineProperty(this, \"type\", EventType.NavigationSkipped);\n    this.reason = reason;\n    this.code = code;\n  }\n}\n/**\n * An event triggered when a navigation fails due to an unexpected error.\n *\n * @see {@link NavigationStart}\n * @see {@link NavigationEnd}\n * @see {@link NavigationCancel}\n *\n * @publicApi\n */\nclass NavigationError extends RouterEvent {\n  constructor(/** @docsNotRequired */\n  id, /** @docsNotRequired */\n  url, /** @docsNotRequired */\n  error,\n  /**\n   * The target of the navigation when the error occurred.\n   *\n   * Note that this can be `undefined` because an error could have occurred before the\n   * `RouterStateSnapshot` was created for the navigation.\n   */\n  target) {\n    super(id, url);\n    _defineProperty(this, \"error\", void 0);\n    _defineProperty(this, \"target\", void 0);\n    _defineProperty(this, \"type\", EventType.NavigationError);\n    this.error = error;\n    this.target = target;\n  }\n  /** @docsNotRequired */\n  toString() {\n    return `NavigationError(id: ${this.id}, url: '${this.url}', error: ${this.error})`;\n  }\n}\n/**\n * An event triggered when routes are recognized.\n *\n * @publicApi\n */\nclass RoutesRecognized extends RouterEvent {\n  constructor(/** @docsNotRequired */\n  id, /** @docsNotRequired */\n  url, /** @docsNotRequired */\n  urlAfterRedirects, /** @docsNotRequired */\n  state) {\n    super(id, url);\n    _defineProperty(this, \"urlAfterRedirects\", void 0);\n    _defineProperty(this, \"state\", void 0);\n    _defineProperty(this, \"type\", EventType.RoutesRecognized);\n    this.urlAfterRedirects = urlAfterRedirects;\n    this.state = state;\n  }\n  /** @docsNotRequired */\n  toString() {\n    return `RoutesRecognized(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${this.urlAfterRedirects}', state: ${this.state})`;\n  }\n}\n/**\n * An event triggered at the start of the Guard phase of routing.\n *\n * @see {@link GuardsCheckEnd}\n *\n * @publicApi\n */\nclass GuardsCheckStart extends RouterEvent {\n  constructor(/** @docsNotRequired */\n  id, /** @docsNotRequired */\n  url, /** @docsNotRequired */\n  urlAfterRedirects, /** @docsNotRequired */\n  state) {\n    super(id, url);\n    _defineProperty(this, \"urlAfterRedirects\", void 0);\n    _defineProperty(this, \"state\", void 0);\n    _defineProperty(this, \"type\", EventType.GuardsCheckStart);\n    this.urlAfterRedirects = urlAfterRedirects;\n    this.state = state;\n  }\n  toString() {\n    return `GuardsCheckStart(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${this.urlAfterRedirects}', state: ${this.state})`;\n  }\n}\n/**\n * An event triggered at the end of the Guard phase of routing.\n *\n * @see {@link GuardsCheckStart}\n *\n * @publicApi\n */\nclass GuardsCheckEnd extends RouterEvent {\n  constructor(/** @docsNotRequired */\n  id, /** @docsNotRequired */\n  url, /** @docsNotRequired */\n  urlAfterRedirects, /** @docsNotRequired */\n  state, /** @docsNotRequired */\n  shouldActivate) {\n    super(id, url);\n    _defineProperty(this, \"urlAfterRedirects\", void 0);\n    _defineProperty(this, \"state\", void 0);\n    _defineProperty(this, \"shouldActivate\", void 0);\n    _defineProperty(this, \"type\", EventType.GuardsCheckEnd);\n    this.urlAfterRedirects = urlAfterRedirects;\n    this.state = state;\n    this.shouldActivate = shouldActivate;\n  }\n  toString() {\n    return `GuardsCheckEnd(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${this.urlAfterRedirects}', state: ${this.state}, shouldActivate: ${this.shouldActivate})`;\n  }\n}\n/**\n * An event triggered at the start of the Resolve phase of routing.\n *\n * Runs in the \"resolve\" phase whether or not there is anything to resolve.\n * In future, may change to only run when there are things to be resolved.\n *\n * @see {@link ResolveEnd}\n *\n * @publicApi\n */\nclass ResolveStart extends RouterEvent {\n  constructor(/** @docsNotRequired */\n  id, /** @docsNotRequired */\n  url, /** @docsNotRequired */\n  urlAfterRedirects, /** @docsNotRequired */\n  state) {\n    super(id, url);\n    _defineProperty(this, \"urlAfterRedirects\", void 0);\n    _defineProperty(this, \"state\", void 0);\n    _defineProperty(this, \"type\", EventType.ResolveStart);\n    this.urlAfterRedirects = urlAfterRedirects;\n    this.state = state;\n  }\n  toString() {\n    return `ResolveStart(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${this.urlAfterRedirects}', state: ${this.state})`;\n  }\n}\n/**\n * An event triggered at the end of the Resolve phase of routing.\n * @see {@link ResolveStart}\n *\n * @publicApi\n */\nclass ResolveEnd extends RouterEvent {\n  constructor(/** @docsNotRequired */\n  id, /** @docsNotRequired */\n  url, /** @docsNotRequired */\n  urlAfterRedirects, /** @docsNotRequired */\n  state) {\n    super(id, url);\n    _defineProperty(this, \"urlAfterRedirects\", void 0);\n    _defineProperty(this, \"state\", void 0);\n    _defineProperty(this, \"type\", EventType.ResolveEnd);\n    this.urlAfterRedirects = urlAfterRedirects;\n    this.state = state;\n  }\n  toString() {\n    return `ResolveEnd(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${this.urlAfterRedirects}', state: ${this.state})`;\n  }\n}\n/**\n * An event triggered before lazy loading a route configuration.\n *\n * @see {@link RouteConfigLoadEnd}\n *\n * @publicApi\n */\nclass RouteConfigLoadStart {\n  constructor(/** @docsNotRequired */\n  route) {\n    _defineProperty(this, \"route\", void 0);\n    _defineProperty(this, \"type\", EventType.RouteConfigLoadStart);\n    this.route = route;\n  }\n  toString() {\n    return `RouteConfigLoadStart(path: ${this.route.path})`;\n  }\n}\n/**\n * An event triggered when a route has been lazy loaded.\n *\n * @see {@link RouteConfigLoadStart}\n *\n * @publicApi\n */\nclass RouteConfigLoadEnd {\n  constructor(/** @docsNotRequired */\n  route) {\n    _defineProperty(this, \"route\", void 0);\n    _defineProperty(this, \"type\", EventType.RouteConfigLoadEnd);\n    this.route = route;\n  }\n  toString() {\n    return `RouteConfigLoadEnd(path: ${this.route.path})`;\n  }\n}\n/**\n * An event triggered at the start of the child-activation\n * part of the Resolve phase of routing.\n * @see {@link ChildActivationEnd}\n * @see {@link ResolveStart}\n *\n * @publicApi\n */\nclass ChildActivationStart {\n  constructor(/** @docsNotRequired */\n  snapshot) {\n    _defineProperty(this, \"snapshot\", void 0);\n    _defineProperty(this, \"type\", EventType.ChildActivationStart);\n    this.snapshot = snapshot;\n  }\n  toString() {\n    const path = this.snapshot.routeConfig && this.snapshot.routeConfig.path || '';\n    return `ChildActivationStart(path: '${path}')`;\n  }\n}\n/**\n * An event triggered at the end of the child-activation part\n * of the Resolve phase of routing.\n * @see {@link ChildActivationStart}\n * @see {@link ResolveStart}\n * @publicApi\n */\nclass ChildActivationEnd {\n  constructor(/** @docsNotRequired */\n  snapshot) {\n    _defineProperty(this, \"snapshot\", void 0);\n    _defineProperty(this, \"type\", EventType.ChildActivationEnd);\n    this.snapshot = snapshot;\n  }\n  toString() {\n    const path = this.snapshot.routeConfig && this.snapshot.routeConfig.path || '';\n    return `ChildActivationEnd(path: '${path}')`;\n  }\n}\n/**\n * An event triggered at the start of the activation part\n * of the Resolve phase of routing.\n * @see {@link ActivationEnd}\n * @see {@link ResolveStart}\n *\n * @publicApi\n */\nclass ActivationStart {\n  constructor(/** @docsNotRequired */\n  snapshot) {\n    _defineProperty(this, \"snapshot\", void 0);\n    _defineProperty(this, \"type\", EventType.ActivationStart);\n    this.snapshot = snapshot;\n  }\n  toString() {\n    const path = this.snapshot.routeConfig && this.snapshot.routeConfig.path || '';\n    return `ActivationStart(path: '${path}')`;\n  }\n}\n/**\n * An event triggered at the end of the activation part\n * of the Resolve phase of routing.\n * @see {@link ActivationStart}\n * @see {@link ResolveStart}\n *\n * @publicApi\n */\nclass ActivationEnd {\n  constructor(/** @docsNotRequired */\n  snapshot) {\n    _defineProperty(this, \"snapshot\", void 0);\n    _defineProperty(this, \"type\", EventType.ActivationEnd);\n    this.snapshot = snapshot;\n  }\n  toString() {\n    const path = this.snapshot.routeConfig && this.snapshot.routeConfig.path || '';\n    return `ActivationEnd(path: '${path}')`;\n  }\n}\n/**\n * An event triggered by scrolling.\n *\n * @publicApi\n */\nclass Scroll {\n  constructor(/** @docsNotRequired */\n  routerEvent, /** @docsNotRequired */\n  position, /** @docsNotRequired */\n  anchor) {\n    _defineProperty(this, \"routerEvent\", void 0);\n    _defineProperty(this, \"position\", void 0);\n    _defineProperty(this, \"anchor\", void 0);\n    _defineProperty(this, \"type\", EventType.Scroll);\n    this.routerEvent = routerEvent;\n    this.position = position;\n    this.anchor = anchor;\n  }\n  toString() {\n    const pos = this.position ? `${this.position[0]}, ${this.position[1]}` : null;\n    return `Scroll(anchor: '${this.anchor}', position: '${pos}')`;\n  }\n}\nclass BeforeActivateRoutes {}\nclass RedirectRequest {\n  constructor(url, navigationBehaviorOptions) {\n    _defineProperty(this, \"url\", void 0);\n    _defineProperty(this, \"navigationBehaviorOptions\", void 0);\n    this.url = url;\n    this.navigationBehaviorOptions = navigationBehaviorOptions;\n  }\n}\nfunction stringifyEvent(routerEvent) {\n  var _routerEvent$snapshot, _routerEvent$snapshot2, _routerEvent$snapshot3, _routerEvent$snapshot4;\n  switch (routerEvent.type) {\n    case EventType.ActivationEnd:\n      return `ActivationEnd(path: '${((_routerEvent$snapshot = routerEvent.snapshot.routeConfig) === null || _routerEvent$snapshot === void 0 ? void 0 : _routerEvent$snapshot.path) || ''}')`;\n    case EventType.ActivationStart:\n      return `ActivationStart(path: '${((_routerEvent$snapshot2 = routerEvent.snapshot.routeConfig) === null || _routerEvent$snapshot2 === void 0 ? void 0 : _routerEvent$snapshot2.path) || ''}')`;\n    case EventType.ChildActivationEnd:\n      return `ChildActivationEnd(path: '${((_routerEvent$snapshot3 = routerEvent.snapshot.routeConfig) === null || _routerEvent$snapshot3 === void 0 ? void 0 : _routerEvent$snapshot3.path) || ''}')`;\n    case EventType.ChildActivationStart:\n      return `ChildActivationStart(path: '${((_routerEvent$snapshot4 = routerEvent.snapshot.routeConfig) === null || _routerEvent$snapshot4 === void 0 ? void 0 : _routerEvent$snapshot4.path) || ''}')`;\n    case EventType.GuardsCheckEnd:\n      return `GuardsCheckEnd(id: ${routerEvent.id}, url: '${routerEvent.url}', urlAfterRedirects: '${routerEvent.urlAfterRedirects}', state: ${routerEvent.state}, shouldActivate: ${routerEvent.shouldActivate})`;\n    case EventType.GuardsCheckStart:\n      return `GuardsCheckStart(id: ${routerEvent.id}, url: '${routerEvent.url}', urlAfterRedirects: '${routerEvent.urlAfterRedirects}', state: ${routerEvent.state})`;\n    case EventType.NavigationCancel:\n      return `NavigationCancel(id: ${routerEvent.id}, url: '${routerEvent.url}')`;\n    case EventType.NavigationSkipped:\n      return `NavigationSkipped(id: ${routerEvent.id}, url: '${routerEvent.url}')`;\n    case EventType.NavigationEnd:\n      return `NavigationEnd(id: ${routerEvent.id}, url: '${routerEvent.url}', urlAfterRedirects: '${routerEvent.urlAfterRedirects}')`;\n    case EventType.NavigationError:\n      return `NavigationError(id: ${routerEvent.id}, url: '${routerEvent.url}', error: ${routerEvent.error})`;\n    case EventType.NavigationStart:\n      return `NavigationStart(id: ${routerEvent.id}, url: '${routerEvent.url}')`;\n    case EventType.ResolveEnd:\n      return `ResolveEnd(id: ${routerEvent.id}, url: '${routerEvent.url}', urlAfterRedirects: '${routerEvent.urlAfterRedirects}', state: ${routerEvent.state})`;\n    case EventType.ResolveStart:\n      return `ResolveStart(id: ${routerEvent.id}, url: '${routerEvent.url}', urlAfterRedirects: '${routerEvent.urlAfterRedirects}', state: ${routerEvent.state})`;\n    case EventType.RouteConfigLoadEnd:\n      return `RouteConfigLoadEnd(path: ${routerEvent.route.path})`;\n    case EventType.RouteConfigLoadStart:\n      return `RouteConfigLoadStart(path: ${routerEvent.route.path})`;\n    case EventType.RoutesRecognized:\n      return `RoutesRecognized(id: ${routerEvent.id}, url: '${routerEvent.url}', urlAfterRedirects: '${routerEvent.urlAfterRedirects}', state: ${routerEvent.state})`;\n    case EventType.Scroll:\n      const pos = routerEvent.position ? `${routerEvent.position[0]}, ${routerEvent.position[1]}` : null;\n      return `Scroll(anchor: '${routerEvent.anchor}', position: '${pos}')`;\n  }\n}\n\n/**\n * Creates an `EnvironmentInjector` if the `Route` has providers and one does not already exist\n * and returns the injector. Otherwise, if the `Route` does not have `providers`, returns the\n * `currentInjector`.\n *\n * @param route The route that might have providers\n * @param currentInjector The parent injector of the `Route`\n */\nfunction getOrCreateRouteInjectorIfNeeded(route, currentInjector) {\n  var _route$_injector;\n  if (route.providers && !route._injector) {\n    route._injector = createEnvironmentInjector(route.providers, currentInjector, `Route: ${route.path}`);\n  }\n  return (_route$_injector = route._injector) !== null && _route$_injector !== void 0 ? _route$_injector : currentInjector;\n}\nfunction validateConfig(config, parentPath = '', requireStandaloneComponents = false) {\n  // forEach doesn't iterate undefined values\n  for (let i = 0; i < config.length; i++) {\n    const route = config[i];\n    const fullPath = getFullPath(parentPath, route);\n    validateNode(route, fullPath, requireStandaloneComponents);\n  }\n}\nfunction assertStandalone(fullPath, component) {\n  if (component && _isNgModule(component)) {\n    throw new _RuntimeError(4014 /* RuntimeErrorCode.INVALID_ROUTE_CONFIG */, `Invalid configuration of route '${fullPath}'. You are using 'loadComponent' with a module, ` + `but it must be used with standalone components. Use 'loadChildren' instead.`);\n  } else if (component && !isStandalone(component)) {\n    throw new _RuntimeError(4014 /* RuntimeErrorCode.INVALID_ROUTE_CONFIG */, `Invalid configuration of route '${fullPath}'. The component must be standalone.`);\n  }\n}\nfunction validateNode(route, fullPath, requireStandaloneComponents) {\n  if (typeof ngDevMode === 'undefined' || ngDevMode) {\n    if (!route) {\n      throw new _RuntimeError(4014 /* RuntimeErrorCode.INVALID_ROUTE_CONFIG */, `\n      Invalid configuration of route '${fullPath}': Encountered undefined route.\n      The reason might be an extra comma.\n\n      Example:\n      const routes: Routes = [\n        { path: '', redirectTo: '/dashboard', pathMatch: 'full' },\n        { path: 'dashboard',  component: DashboardComponent },, << two commas\n        { path: 'detail/:id', component: HeroDetailComponent }\n      ];\n    `);\n    }\n    if (Array.isArray(route)) {\n      throw new _RuntimeError(4014 /* RuntimeErrorCode.INVALID_ROUTE_CONFIG */, `Invalid configuration of route '${fullPath}': Array cannot be specified`);\n    }\n    if (!route.redirectTo && !route.component && !route.loadComponent && !route.children && !route.loadChildren && route.outlet && route.outlet !== PRIMARY_OUTLET) {\n      throw new _RuntimeError(4014 /* RuntimeErrorCode.INVALID_ROUTE_CONFIG */, `Invalid configuration of route '${fullPath}': a componentless route without children or loadChildren cannot have a named outlet set`);\n    }\n    if (route.redirectTo && route.children) {\n      throw new _RuntimeError(4014 /* RuntimeErrorCode.INVALID_ROUTE_CONFIG */, `Invalid configuration of route '${fullPath}': redirectTo and children cannot be used together`);\n    }\n    if (route.redirectTo && route.loadChildren) {\n      throw new _RuntimeError(4014 /* RuntimeErrorCode.INVALID_ROUTE_CONFIG */, `Invalid configuration of route '${fullPath}': redirectTo and loadChildren cannot be used together`);\n    }\n    if (route.children && route.loadChildren) {\n      throw new _RuntimeError(4014 /* RuntimeErrorCode.INVALID_ROUTE_CONFIG */, `Invalid configuration of route '${fullPath}': children and loadChildren cannot be used together`);\n    }\n    if (route.redirectTo && (route.component || route.loadComponent)) {\n      throw new _RuntimeError(4014 /* RuntimeErrorCode.INVALID_ROUTE_CONFIG */, `Invalid configuration of route '${fullPath}': redirectTo and component/loadComponent cannot be used together`);\n    }\n    if (route.component && route.loadComponent) {\n      throw new _RuntimeError(4014 /* RuntimeErrorCode.INVALID_ROUTE_CONFIG */, `Invalid configuration of route '${fullPath}': component and loadComponent cannot be used together`);\n    }\n    if (route.redirectTo && route.canActivate) {\n      throw new _RuntimeError(4014 /* RuntimeErrorCode.INVALID_ROUTE_CONFIG */, `Invalid configuration of route '${fullPath}': redirectTo and canActivate cannot be used together. Redirects happen before activation ` + `so canActivate will never be executed.`);\n    }\n    if (route.path && route.matcher) {\n      throw new _RuntimeError(4014 /* RuntimeErrorCode.INVALID_ROUTE_CONFIG */, `Invalid configuration of route '${fullPath}': path and matcher cannot be used together`);\n    }\n    if (route.redirectTo === void 0 && !route.component && !route.loadComponent && !route.children && !route.loadChildren) {\n      throw new _RuntimeError(4014 /* RuntimeErrorCode.INVALID_ROUTE_CONFIG */, `Invalid configuration of route '${fullPath}'. One of the following must be provided: component, loadComponent, redirectTo, children or loadChildren`);\n    }\n    if (route.path === void 0 && route.matcher === void 0) {\n      throw new _RuntimeError(4014 /* RuntimeErrorCode.INVALID_ROUTE_CONFIG */, `Invalid configuration of route '${fullPath}': routes must have either a path or a matcher specified`);\n    }\n    if (typeof route.path === 'string' && route.path.charAt(0) === '/') {\n      throw new _RuntimeError(4014 /* RuntimeErrorCode.INVALID_ROUTE_CONFIG */, `Invalid configuration of route '${fullPath}': path cannot start with a slash`);\n    }\n    if (route.path === '' && route.redirectTo !== void 0 && route.pathMatch === void 0) {\n      const exp = `The default value of 'pathMatch' is 'prefix', but often the intent is to use 'full'.`;\n      throw new _RuntimeError(4014 /* RuntimeErrorCode.INVALID_ROUTE_CONFIG */, `Invalid configuration of route '{path: \"${fullPath}\", redirectTo: \"${route.redirectTo}\"}': please provide 'pathMatch'. ${exp}`);\n    }\n    if (requireStandaloneComponents) {\n      assertStandalone(fullPath, route.component);\n    }\n  }\n  if (route.children) {\n    validateConfig(route.children, fullPath, requireStandaloneComponents);\n  }\n}\nfunction getFullPath(parentPath, currentRoute) {\n  if (!currentRoute) {\n    return parentPath;\n  }\n  if (!parentPath && !currentRoute.path) {\n    return '';\n  } else if (parentPath && !currentRoute.path) {\n    return `${parentPath}/`;\n  } else if (!parentPath && currentRoute.path) {\n    return currentRoute.path;\n  } else {\n    return `${parentPath}/${currentRoute.path}`;\n  }\n}\n/** Returns the `route.outlet` or PRIMARY_OUTLET if none exists. */\nfunction getOutlet(route) {\n  return route.outlet || PRIMARY_OUTLET;\n}\n/**\n * Sorts the `routes` such that the ones with an outlet matching `outletName` come first.\n * The order of the configs is otherwise preserved.\n */\nfunction sortByMatchingOutlets(routes, outletName) {\n  const sortedConfig = routes.filter(r => getOutlet(r) === outletName);\n  sortedConfig.push(...routes.filter(r => getOutlet(r) !== outletName));\n  return sortedConfig;\n}\n/**\n * Gets the first injector in the snapshot's parent tree.\n *\n * If the `Route` has a static list of providers, the returned injector will be the one created from\n * those. If it does not exist, the returned injector may come from the parents, which may be from a\n * loaded config or their static providers.\n *\n * Returns `null` if there is neither this nor any parents have a stored injector.\n *\n * Generally used for retrieving the injector to use for getting tokens for guards/resolvers and\n * also used for getting the correct injector to use for creating components.\n */\nfunction getClosestRouteInjector(snapshot) {\n  var _snapshot$routeConfig;\n  if (!snapshot) return null;\n  // If the current route has its own injector, which is created from the static providers on the\n  // route itself, we should use that. Otherwise, we start at the parent since we do not want to\n  // include the lazy loaded injector from this route.\n  if ((_snapshot$routeConfig = snapshot.routeConfig) !== null && _snapshot$routeConfig !== void 0 && _snapshot$routeConfig._injector) {\n    return snapshot.routeConfig._injector;\n  }\n  for (let s = snapshot.parent; s; s = s.parent) {\n    const route = s.routeConfig;\n    // Note that the order here is important. `_loadedInjector` stored on the route with\n    // `loadChildren: () => NgModule` so it applies to child routes with priority. The `_injector`\n    // is created from the static providers on that parent route, so it applies to the children as\n    // well, but only if there is no lazy loaded NgModuleRef injector.\n    if (route !== null && route !== void 0 && route._loadedInjector) return route._loadedInjector;\n    if (route !== null && route !== void 0 && route._injector) return route._injector;\n  }\n  return null;\n}\n\n/**\n * Store contextual information about a `RouterOutlet`\n *\n * @publicApi\n */\nclass OutletContext {\n  get injector() {\n    var _getClosestRouteInjec, _this$route;\n    return (_getClosestRouteInjec = getClosestRouteInjector((_this$route = this.route) === null || _this$route === void 0 ? void 0 : _this$route.snapshot)) !== null && _getClosestRouteInjec !== void 0 ? _getClosestRouteInjec : this.rootInjector;\n  }\n  constructor(rootInjector) {\n    _defineProperty(this, \"rootInjector\", void 0);\n    _defineProperty(this, \"outlet\", null);\n    _defineProperty(this, \"route\", null);\n    _defineProperty(this, \"children\", void 0);\n    _defineProperty(this, \"attachRef\", null);\n    this.rootInjector = rootInjector;\n    this.children = new ChildrenOutletContexts(this.rootInjector);\n  }\n}\n/**\n * Store contextual information about the children (= nested) `RouterOutlet`\n *\n * @publicApi\n */\nclass ChildrenOutletContexts {\n  /** @nodoc */\n  constructor(rootInjector) {\n    _defineProperty(this, \"rootInjector\", void 0);\n    // contexts for child outlets, by name.\n    _defineProperty(this, \"contexts\", new Map());\n    this.rootInjector = rootInjector;\n  }\n  /** Called when a `RouterOutlet` directive is instantiated */\n  onChildOutletCreated(childName, outlet) {\n    const context = this.getOrCreateContext(childName);\n    context.outlet = outlet;\n    this.contexts.set(childName, context);\n  }\n  /**\n   * Called when a `RouterOutlet` directive is destroyed.\n   * We need to keep the context as the outlet could be destroyed inside a NgIf and might be\n   * re-created later.\n   */\n  onChildOutletDestroyed(childName) {\n    const context = this.getContext(childName);\n    if (context) {\n      context.outlet = null;\n      context.attachRef = null;\n    }\n  }\n  /**\n   * Called when the corresponding route is deactivated during navigation.\n   * Because the component get destroyed, all children outlet are destroyed.\n   */\n  onOutletDeactivated() {\n    const contexts = this.contexts;\n    this.contexts = new Map();\n    return contexts;\n  }\n  onOutletReAttached(contexts) {\n    this.contexts = contexts;\n  }\n  getOrCreateContext(childName) {\n    let context = this.getContext(childName);\n    if (!context) {\n      context = new OutletContext(this.rootInjector);\n      this.contexts.set(childName, context);\n    }\n    return context;\n  }\n  getContext(childName) {\n    return this.contexts.get(childName) || null;\n  }\n}\n_ChildrenOutletContexts = ChildrenOutletContexts;\n_defineProperty(ChildrenOutletContexts, \"\\u0275fac\", function _ChildrenOutletContexts_Factory(__ngFactoryType__) {\n  return new (__ngFactoryType__ || _ChildrenOutletContexts)(i0.ɵɵinject(i0.EnvironmentInjector));\n});\n_defineProperty(ChildrenOutletContexts, \"\\u0275prov\", /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: _ChildrenOutletContexts,\n  factory: _ChildrenOutletContexts.ɵfac,\n  providedIn: 'root'\n}));\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ChildrenOutletContexts, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], () => [{\n    type: i0.EnvironmentInjector\n  }], null);\n})();\nclass Tree {\n  constructor(root) {\n    /** @internal */\n    _defineProperty(this, \"_root\", void 0);\n    this._root = root;\n  }\n  get root() {\n    return this._root.value;\n  }\n  /**\n   * @internal\n   */\n  parent(t) {\n    const p = this.pathFromRoot(t);\n    return p.length > 1 ? p[p.length - 2] : null;\n  }\n  /**\n   * @internal\n   */\n  children(t) {\n    const n = findNode(t, this._root);\n    return n ? n.children.map(t => t.value) : [];\n  }\n  /**\n   * @internal\n   */\n  firstChild(t) {\n    const n = findNode(t, this._root);\n    return n && n.children.length > 0 ? n.children[0].value : null;\n  }\n  /**\n   * @internal\n   */\n  siblings(t) {\n    const p = findPath(t, this._root);\n    if (p.length < 2) return [];\n    const c = p[p.length - 2].children.map(c => c.value);\n    return c.filter(cc => cc !== t);\n  }\n  /**\n   * @internal\n   */\n  pathFromRoot(t) {\n    return findPath(t, this._root).map(s => s.value);\n  }\n}\n// DFS for the node matching the value\nfunction findNode(value, node) {\n  if (value === node.value) return node;\n  for (const child of node.children) {\n    const node = findNode(value, child);\n    if (node) return node;\n  }\n  return null;\n}\n// Return the path to the node with the given value using DFS\nfunction findPath(value, node) {\n  if (value === node.value) return [node];\n  for (const child of node.children) {\n    const path = findPath(value, child);\n    if (path.length) {\n      path.unshift(node);\n      return path;\n    }\n  }\n  return [];\n}\nclass TreeNode {\n  constructor(value, children) {\n    _defineProperty(this, \"value\", void 0);\n    _defineProperty(this, \"children\", void 0);\n    this.value = value;\n    this.children = children;\n  }\n  toString() {\n    return `TreeNode(${this.value})`;\n  }\n}\n// Return the list of T indexed by outlet name\nfunction nodeChildrenAsMap(node) {\n  const map = {};\n  if (node) {\n    node.children.forEach(child => map[child.value.outlet] = child);\n  }\n  return map;\n}\n\n/**\n * Represents the state of the router as a tree of activated routes.\n *\n * @usageNotes\n *\n * Every node in the route tree is an `ActivatedRoute` instance\n * that knows about the \"consumed\" URL segments, the extracted parameters,\n * and the resolved data.\n * Use the `ActivatedRoute` properties to traverse the tree from any node.\n *\n * The following fragment shows how a component gets the root node\n * of the current state to establish its own route tree:\n *\n * ```ts\n * @Component({templateUrl:'template.html'})\n * class MyComponent {\n *   constructor(router: Router) {\n *     const state: RouterState = router.routerState;\n *     const root: ActivatedRoute = state.root;\n *     const child = root.firstChild;\n *     const id: Observable<string> = child.params.map(p => p.id);\n *     //...\n *   }\n * }\n * ```\n *\n * @see {@link ActivatedRoute}\n * @see [Getting route information](guide/routing/common-router-tasks#getting-route-information)\n *\n * @publicApi\n */\nclass RouterState extends Tree {\n  /** @internal */\n  constructor(root, /** The current snapshot of the router state */\n  snapshot) {\n    super(root);\n    _defineProperty(this, \"snapshot\", void 0);\n    this.snapshot = snapshot;\n    setRouterState(this, root);\n  }\n  toString() {\n    return this.snapshot.toString();\n  }\n}\nfunction createEmptyState(rootComponent) {\n  const snapshot = createEmptyStateSnapshot(rootComponent);\n  const emptyUrl = new BehaviorSubject([new UrlSegment('', {})]);\n  const emptyParams = new BehaviorSubject({});\n  const emptyData = new BehaviorSubject({});\n  const emptyQueryParams = new BehaviorSubject({});\n  const fragment = new BehaviorSubject('');\n  const activated = new ActivatedRoute(emptyUrl, emptyParams, emptyQueryParams, fragment, emptyData, PRIMARY_OUTLET, rootComponent, snapshot.root);\n  activated.snapshot = snapshot.root;\n  return new RouterState(new TreeNode(activated, []), snapshot);\n}\nfunction createEmptyStateSnapshot(rootComponent) {\n  const emptyParams = {};\n  const emptyData = {};\n  const emptyQueryParams = {};\n  const fragment = '';\n  const activated = new ActivatedRouteSnapshot([], emptyParams, emptyQueryParams, fragment, emptyData, PRIMARY_OUTLET, rootComponent, null, {});\n  return new RouterStateSnapshot('', new TreeNode(activated, []));\n}\n/**\n * Provides access to information about a route associated with a component\n * that is loaded in an outlet.\n * Use to traverse the `RouterState` tree and extract information from nodes.\n *\n * The following example shows how to construct a component using information from a\n * currently activated route.\n *\n * Note: the observables in this class only emit when the current and previous values differ based\n * on shallow equality. For example, changing deeply nested properties in resolved `data` will not\n * cause the `ActivatedRoute.data` `Observable` to emit a new value.\n *\n * {@example router/activated-route/module.ts region=\"activated-route\"\n *     header=\"activated-route.component.ts\"}\n *\n * @see [Getting route information](guide/routing/common-router-tasks#getting-route-information)\n *\n * @publicApi\n */\nclass ActivatedRoute {\n  /** @internal */\n  constructor(/** @internal */\n  urlSubject, /** @internal */\n  paramsSubject, /** @internal */\n  queryParamsSubject, /** @internal */\n  fragmentSubject, /** @internal */\n  dataSubject, /** The outlet name of the route, a constant. */\n  outlet, /** The component of the route, a constant. */\n  component, futureSnapshot) {\n    var _this$dataSubject$pip, _this$dataSubject;\n    _defineProperty(this, \"urlSubject\", void 0);\n    _defineProperty(this, \"paramsSubject\", void 0);\n    _defineProperty(this, \"queryParamsSubject\", void 0);\n    _defineProperty(this, \"fragmentSubject\", void 0);\n    _defineProperty(this, \"dataSubject\", void 0);\n    _defineProperty(this, \"outlet\", void 0);\n    _defineProperty(this, \"component\", void 0);\n    /** The current snapshot of this route */\n    _defineProperty(this, \"snapshot\", void 0);\n    /** @internal */\n    _defineProperty(this, \"_futureSnapshot\", void 0);\n    /** @internal */\n    _defineProperty(this, \"_routerState\", void 0);\n    /** @internal */\n    _defineProperty(this, \"_paramMap\", void 0);\n    /** @internal */\n    _defineProperty(this, \"_queryParamMap\", void 0);\n    /** An Observable of the resolved route title */\n    _defineProperty(this, \"title\", void 0);\n    /** An observable of the URL segments matched by this route. */\n    _defineProperty(this, \"url\", void 0);\n    /** An observable of the matrix parameters scoped to this route. */\n    _defineProperty(this, \"params\", void 0);\n    /** An observable of the query parameters shared by all the routes. */\n    _defineProperty(this, \"queryParams\", void 0);\n    /** An observable of the URL fragment shared by all the routes. */\n    _defineProperty(this, \"fragment\", void 0);\n    /** An observable of the static and resolved data of this route. */\n    _defineProperty(this, \"data\", void 0);\n    this.urlSubject = urlSubject;\n    this.paramsSubject = paramsSubject;\n    this.queryParamsSubject = queryParamsSubject;\n    this.fragmentSubject = fragmentSubject;\n    this.dataSubject = dataSubject;\n    this.outlet = outlet;\n    this.component = component;\n    this._futureSnapshot = futureSnapshot;\n    this.title = (_this$dataSubject$pip = (_this$dataSubject = this.dataSubject) === null || _this$dataSubject === void 0 ? void 0 : _this$dataSubject.pipe(map(d => d[RouteTitleKey]))) !== null && _this$dataSubject$pip !== void 0 ? _this$dataSubject$pip : of(undefined);\n    // TODO(atscott): Verify that these can be changed to `.asObservable()` with TGP.\n    this.url = urlSubject;\n    this.params = paramsSubject;\n    this.queryParams = queryParamsSubject;\n    this.fragment = fragmentSubject;\n    this.data = dataSubject;\n  }\n  /** The configuration used to match this route. */\n  get routeConfig() {\n    return this._futureSnapshot.routeConfig;\n  }\n  /** The root of the router state. */\n  get root() {\n    return this._routerState.root;\n  }\n  /** The parent of this route in the router state tree. */\n  get parent() {\n    return this._routerState.parent(this);\n  }\n  /** The first child of this route in the router state tree. */\n  get firstChild() {\n    return this._routerState.firstChild(this);\n  }\n  /** The children of this route in the router state tree. */\n  get children() {\n    return this._routerState.children(this);\n  }\n  /** The path from the root of the router state tree to this route. */\n  get pathFromRoot() {\n    return this._routerState.pathFromRoot(this);\n  }\n  /**\n   * An Observable that contains a map of the required and optional parameters\n   * specific to the route.\n   * The map supports retrieving single and multiple values from the same parameter.\n   */\n  get paramMap() {\n    var _this$_paramMap;\n    (_this$_paramMap = this._paramMap) !== null && _this$_paramMap !== void 0 ? _this$_paramMap : this._paramMap = this.params.pipe(map(p => convertToParamMap(p)));\n    return this._paramMap;\n  }\n  /**\n   * An Observable that contains a map of the query parameters available to all routes.\n   * The map supports retrieving single and multiple values from the query parameter.\n   */\n  get queryParamMap() {\n    var _this$_queryParamMap2;\n    (_this$_queryParamMap2 = this._queryParamMap) !== null && _this$_queryParamMap2 !== void 0 ? _this$_queryParamMap2 : this._queryParamMap = this.queryParams.pipe(map(p => convertToParamMap(p)));\n    return this._queryParamMap;\n  }\n  toString() {\n    return this.snapshot ? this.snapshot.toString() : `Future(${this._futureSnapshot})`;\n  }\n}\n/**\n * Returns the inherited params, data, and resolve for a given route.\n *\n * By default, we do not inherit parent data unless the current route is path-less or the parent\n * route is component-less.\n */\nfunction getInherited(route, parent, paramsInheritanceStrategy = 'emptyOnly') {\n  var _parent$routeConfig;\n  let inherited;\n  const {\n    routeConfig\n  } = route;\n  if (parent !== null && (paramsInheritanceStrategy === 'always' ||\n  // inherit parent data if route is empty path\n  (routeConfig === null || routeConfig === void 0 ? void 0 : routeConfig.path) === '' ||\n  // inherit parent data if parent was componentless\n  !parent.component && !((_parent$routeConfig = parent.routeConfig) !== null && _parent$routeConfig !== void 0 && _parent$routeConfig.loadComponent))) {\n    inherited = {\n      params: {\n        ...parent.params,\n        ...route.params\n      },\n      data: {\n        ...parent.data,\n        ...route.data\n      },\n      resolve: {\n        // Snapshots are created with data inherited from parent and guards (i.e. canActivate) can\n        // change data because it's not frozen...\n        // This first line could be deleted chose to break/disallow mutating the `data` object in\n        // guards.\n        // Note that data from parents still override this mutated data so anyone relying on this\n        // might be surprised that it doesn't work if parent data is inherited but otherwise does.\n        ...route.data,\n        // Ensure inherited resolved data overrides inherited static data\n        ...parent.data,\n        // static data from the current route overrides any inherited data\n        ...(routeConfig === null || routeConfig === void 0 ? void 0 : routeConfig.data),\n        // resolved data from current route overrides everything\n        ...route._resolvedData\n      }\n    };\n  } else {\n    var _route$_resolvedData;\n    inherited = {\n      params: {\n        ...route.params\n      },\n      data: {\n        ...route.data\n      },\n      resolve: {\n        ...route.data,\n        ...((_route$_resolvedData = route._resolvedData) !== null && _route$_resolvedData !== void 0 ? _route$_resolvedData : {})\n      }\n    };\n  }\n  if (routeConfig && hasStaticTitle(routeConfig)) {\n    inherited.resolve[RouteTitleKey] = routeConfig.title;\n  }\n  return inherited;\n}\n/**\n * @description\n *\n * Contains the information about a route associated with a component loaded in an\n * outlet at a particular moment in time. ActivatedRouteSnapshot can also be used to\n * traverse the router state tree.\n *\n * The following example initializes a component with route information extracted\n * from the snapshot of the root node at the time of creation.\n *\n * ```ts\n * @Component({templateUrl:'./my-component.html'})\n * class MyComponent {\n *   constructor(route: ActivatedRoute) {\n *     const id: string = route.snapshot.params.id;\n *     const url: string = route.snapshot.url.join('');\n *     const user = route.snapshot.data.user;\n *   }\n * }\n * ```\n *\n * @publicApi\n */\nclass ActivatedRouteSnapshot {\n  /** The resolved route title */\n  get title() {\n    var _this$data;\n    // Note: This _must_ be a getter because the data is mutated in the resolvers. Title will not be\n    // available at the time of class instantiation.\n    return (_this$data = this.data) === null || _this$data === void 0 ? void 0 : _this$data[RouteTitleKey];\n  }\n  /** @internal */\n  constructor(/** The URL segments matched by this route */\n  url,\n  /**\n   *  The matrix parameters scoped to this route.\n   *\n   *  You can compute all params (or data) in the router state or to get params outside\n   *  of an activated component by traversing the `RouterState` tree as in the following\n   *  example:\n   *  ```ts\n   *  collectRouteParams(router: Router) {\n   *    let params = {};\n   *    let stack: ActivatedRouteSnapshot[] = [router.routerState.snapshot.root];\n   *    while (stack.length > 0) {\n   *      const route = stack.pop()!;\n   *      params = {...params, ...route.params};\n   *      stack.push(...route.children);\n   *    }\n   *    return params;\n   *  }\n   *  ```\n   */\n  params, /** The query parameters shared by all the routes */\n  queryParams, /** The URL fragment shared by all the routes */\n  fragment, /** The static and resolved data of this route */\n  data, /** The outlet name of the route */\n  outlet, /** The component of the route */\n  component, routeConfig, resolve) {\n    _defineProperty(this, \"url\", void 0);\n    _defineProperty(this, \"params\", void 0);\n    _defineProperty(this, \"queryParams\", void 0);\n    _defineProperty(this, \"fragment\", void 0);\n    _defineProperty(this, \"data\", void 0);\n    _defineProperty(this, \"outlet\", void 0);\n    _defineProperty(this, \"component\", void 0);\n    /** The configuration used to match this route **/\n    _defineProperty(this, \"routeConfig\", void 0);\n    /** @internal */\n    _defineProperty(this, \"_resolve\", void 0);\n    /** @internal */\n    _defineProperty(this, \"_resolvedData\", void 0);\n    /** @internal */\n    _defineProperty(this, \"_routerState\", void 0);\n    /** @internal */\n    _defineProperty(this, \"_paramMap\", void 0);\n    /** @internal */\n    _defineProperty(this, \"_queryParamMap\", void 0);\n    this.url = url;\n    this.params = params;\n    this.queryParams = queryParams;\n    this.fragment = fragment;\n    this.data = data;\n    this.outlet = outlet;\n    this.component = component;\n    this.routeConfig = routeConfig;\n    this._resolve = resolve;\n  }\n  /** The root of the router state */\n  get root() {\n    return this._routerState.root;\n  }\n  /** The parent of this route in the router state tree */\n  get parent() {\n    return this._routerState.parent(this);\n  }\n  /** The first child of this route in the router state tree */\n  get firstChild() {\n    return this._routerState.firstChild(this);\n  }\n  /** The children of this route in the router state tree */\n  get children() {\n    return this._routerState.children(this);\n  }\n  /** The path from the root of the router state tree to this route */\n  get pathFromRoot() {\n    return this._routerState.pathFromRoot(this);\n  }\n  get paramMap() {\n    var _this$_paramMap2;\n    (_this$_paramMap2 = this._paramMap) !== null && _this$_paramMap2 !== void 0 ? _this$_paramMap2 : this._paramMap = convertToParamMap(this.params);\n    return this._paramMap;\n  }\n  get queryParamMap() {\n    var _this$_queryParamMap3;\n    (_this$_queryParamMap3 = this._queryParamMap) !== null && _this$_queryParamMap3 !== void 0 ? _this$_queryParamMap3 : this._queryParamMap = convertToParamMap(this.queryParams);\n    return this._queryParamMap;\n  }\n  toString() {\n    const url = this.url.map(segment => segment.toString()).join('/');\n    const matched = this.routeConfig ? this.routeConfig.path : '';\n    return `Route(url:'${url}', path:'${matched}')`;\n  }\n}\n/**\n * @description\n *\n * Represents the state of the router at a moment in time.\n *\n * This is a tree of activated route snapshots. Every node in this tree knows about\n * the \"consumed\" URL segments, the extracted parameters, and the resolved data.\n *\n * The following example shows how a component is initialized with information\n * from the snapshot of the root node's state at the time of creation.\n *\n * ```ts\n * @Component({templateUrl:'template.html'})\n * class MyComponent {\n *   constructor(router: Router) {\n *     const state: RouterState = router.routerState;\n *     const snapshot: RouterStateSnapshot = state.snapshot;\n *     const root: ActivatedRouteSnapshot = snapshot.root;\n *     const child = root.firstChild;\n *     const id: Observable<string> = child.params.map(p => p.id);\n *     //...\n *   }\n * }\n * ```\n *\n * @publicApi\n */\nclass RouterStateSnapshot extends Tree {\n  /** @internal */\n  constructor(/** The url from which this snapshot was created */\n  url, root) {\n    super(root);\n    _defineProperty(this, \"url\", void 0);\n    this.url = url;\n    setRouterState(this, root);\n  }\n  toString() {\n    return serializeNode(this._root);\n  }\n}\nfunction setRouterState(state, node) {\n  node.value._routerState = state;\n  node.children.forEach(c => setRouterState(state, c));\n}\nfunction serializeNode(node) {\n  const c = node.children.length > 0 ? ` { ${node.children.map(serializeNode).join(', ')} } ` : '';\n  return `${node.value}${c}`;\n}\n/**\n * The expectation is that the activate route is created with the right set of parameters.\n * So we push new values into the observables only when they are not the initial values.\n * And we detect that by checking if the snapshot field is set.\n */\nfunction advanceActivatedRoute(route) {\n  if (route.snapshot) {\n    const currentSnapshot = route.snapshot;\n    const nextSnapshot = route._futureSnapshot;\n    route.snapshot = nextSnapshot;\n    if (!shallowEqual(currentSnapshot.queryParams, nextSnapshot.queryParams)) {\n      route.queryParamsSubject.next(nextSnapshot.queryParams);\n    }\n    if (currentSnapshot.fragment !== nextSnapshot.fragment) {\n      route.fragmentSubject.next(nextSnapshot.fragment);\n    }\n    if (!shallowEqual(currentSnapshot.params, nextSnapshot.params)) {\n      route.paramsSubject.next(nextSnapshot.params);\n    }\n    if (!shallowEqualArrays(currentSnapshot.url, nextSnapshot.url)) {\n      route.urlSubject.next(nextSnapshot.url);\n    }\n    if (!shallowEqual(currentSnapshot.data, nextSnapshot.data)) {\n      route.dataSubject.next(nextSnapshot.data);\n    }\n  } else {\n    route.snapshot = route._futureSnapshot;\n    // this is for resolved data\n    route.dataSubject.next(route._futureSnapshot.data);\n  }\n}\nfunction equalParamsAndUrlSegments(a, b) {\n  const equalUrlParams = shallowEqual(a.params, b.params) && equalSegments(a.url, b.url);\n  const parentsMismatch = !a.parent !== !b.parent;\n  return equalUrlParams && !parentsMismatch && (!a.parent || equalParamsAndUrlSegments(a.parent, b.parent));\n}\nfunction hasStaticTitle(config) {\n  return typeof config.title === 'string' || config.title === null;\n}\n\n/**\n * An `InjectionToken` provided by the `RouterOutlet` and can be set using the `routerOutletData`\n * input.\n *\n * When unset, this value is `null` by default.\n *\n * @usageNotes\n *\n * To set the data from the template of the component with `router-outlet`:\n * ```html\n * <router-outlet [routerOutletData]=\"{name: 'Angular'}\" />\n * ```\n *\n * To read the data in the routed component:\n * ```ts\n * data = inject(ROUTER_OUTLET_DATA) as Signal<{name: string}>;\n * ```\n *\n * @publicApi\n */\nconst ROUTER_OUTLET_DATA = new InjectionToken(ngDevMode ? 'RouterOutlet data' : '');\n/**\n * @description\n *\n * Acts as a placeholder that Angular dynamically fills based on the current router state.\n *\n * Each outlet can have a unique name, determined by the optional `name` attribute.\n * The name cannot be set or changed dynamically. If not set, default value is \"primary\".\n *\n * ```html\n * <router-outlet></router-outlet>\n * <router-outlet name='left'></router-outlet>\n * <router-outlet name='right'></router-outlet>\n * ```\n *\n * Named outlets can be the targets of secondary routes.\n * The `Route` object for a secondary route has an `outlet` property to identify the target outlet:\n *\n * `{path: <base-path>, component: <component>, outlet: <target_outlet_name>}`\n *\n * Using named outlets and secondary routes, you can target multiple outlets in\n * the same `RouterLink` directive.\n *\n * The router keeps track of separate branches in a navigation tree for each named outlet and\n * generates a representation of that tree in the URL.\n * The URL for a secondary route uses the following syntax to specify both the primary and secondary\n * routes at the same time:\n *\n * `http://base-path/primary-route-path(outlet-name:route-path)`\n *\n * A router outlet emits an activate event when a new component is instantiated,\n * deactivate event when a component is destroyed.\n * An attached event emits when the `RouteReuseStrategy` instructs the outlet to reattach the\n * subtree, and the detached event emits when the `RouteReuseStrategy` instructs the outlet to\n * detach the subtree.\n *\n * ```html\n * <router-outlet\n *   (activate)='onActivate($event)'\n *   (deactivate)='onDeactivate($event)'\n *   (attach)='onAttach($event)'\n *   (detach)='onDetach($event)'></router-outlet>\n * ```\n *\n * @see {@link RouterLink}\n * @see {@link Route}\n * @ngModule RouterModule\n *\n * @publicApi\n */\nclass RouterOutlet {\n  constructor() {\n    _defineProperty(this, \"activated\", null);\n    _defineProperty(this, \"_activatedRoute\", null);\n    /**\n     * The name of the outlet\n     *\n     */\n    _defineProperty(this, \"name\", PRIMARY_OUTLET);\n    _defineProperty(this, \"activateEvents\", new EventEmitter());\n    _defineProperty(this, \"deactivateEvents\", new EventEmitter());\n    /**\n     * Emits an attached component instance when the `RouteReuseStrategy` instructs to re-attach a\n     * previously detached subtree.\n     **/\n    _defineProperty(this, \"attachEvents\", new EventEmitter());\n    /**\n     * Emits a detached component instance when the `RouteReuseStrategy` instructs to detach the\n     * subtree.\n     */\n    _defineProperty(this, \"detachEvents\", new EventEmitter());\n    /**\n     * Data that will be provided to the child injector through the `ROUTER_OUTLET_DATA` token.\n     *\n     * When unset, the value of the token is `undefined` by default.\n     */\n    _defineProperty(this, \"routerOutletData\", input(undefined));\n    _defineProperty(this, \"parentContexts\", inject(ChildrenOutletContexts));\n    _defineProperty(this, \"location\", inject(ViewContainerRef));\n    _defineProperty(this, \"changeDetector\", inject(ChangeDetectorRef));\n    _defineProperty(this, \"inputBinder\", inject(INPUT_BINDER, {\n      optional: true\n    }));\n    /** @nodoc */\n    _defineProperty(this, \"supportsBindingToComponentInputs\", true);\n  }\n  /** @internal */\n  get activatedComponentRef() {\n    return this.activated;\n  }\n  /** @nodoc */\n  ngOnChanges(changes) {\n    if (changes['name']) {\n      const {\n        firstChange,\n        previousValue\n      } = changes['name'];\n      if (firstChange) {\n        // The first change is handled by ngOnInit. Because ngOnChanges doesn't get called when no\n        // input is set at all, we need to centrally handle the first change there.\n        return;\n      }\n      // unregister with the old name\n      if (this.isTrackedInParentContexts(previousValue)) {\n        this.deactivate();\n        this.parentContexts.onChildOutletDestroyed(previousValue);\n      }\n      // register the new name\n      this.initializeOutletWithName();\n    }\n  }\n  /** @nodoc */\n  ngOnDestroy() {\n    var _this$inputBinder;\n    // Ensure that the registered outlet is this one before removing it on the context.\n    if (this.isTrackedInParentContexts(this.name)) {\n      this.parentContexts.onChildOutletDestroyed(this.name);\n    }\n    (_this$inputBinder = this.inputBinder) === null || _this$inputBinder === void 0 || _this$inputBinder.unsubscribeFromRouteData(this);\n  }\n  isTrackedInParentContexts(outletName) {\n    var _this$parentContexts$;\n    return ((_this$parentContexts$ = this.parentContexts.getContext(outletName)) === null || _this$parentContexts$ === void 0 ? void 0 : _this$parentContexts$.outlet) === this;\n  }\n  /** @nodoc */\n  ngOnInit() {\n    this.initializeOutletWithName();\n  }\n  initializeOutletWithName() {\n    this.parentContexts.onChildOutletCreated(this.name, this);\n    if (this.activated) {\n      return;\n    }\n    // If the outlet was not instantiated at the time the route got activated we need to populate\n    // the outlet when it is initialized (ie inside a NgIf)\n    const context = this.parentContexts.getContext(this.name);\n    if (context !== null && context !== void 0 && context.route) {\n      if (context.attachRef) {\n        // `attachRef` is populated when there is an existing component to mount\n        this.attach(context.attachRef, context.route);\n      } else {\n        // otherwise the component defined in the configuration is created\n        this.activateWith(context.route, context.injector);\n      }\n    }\n  }\n  get isActivated() {\n    return !!this.activated;\n  }\n  /**\n   * @returns The currently activated component instance.\n   * @throws An error if the outlet is not activated.\n   */\n  get component() {\n    if (!this.activated) throw new _RuntimeError(4012 /* RuntimeErrorCode.OUTLET_NOT_ACTIVATED */, (typeof ngDevMode === 'undefined' || ngDevMode) && 'Outlet is not activated');\n    return this.activated.instance;\n  }\n  get activatedRoute() {\n    if (!this.activated) throw new _RuntimeError(4012 /* RuntimeErrorCode.OUTLET_NOT_ACTIVATED */, (typeof ngDevMode === 'undefined' || ngDevMode) && 'Outlet is not activated');\n    return this._activatedRoute;\n  }\n  get activatedRouteData() {\n    if (this._activatedRoute) {\n      return this._activatedRoute.snapshot.data;\n    }\n    return {};\n  }\n  /**\n   * Called when the `RouteReuseStrategy` instructs to detach the subtree\n   */\n  detach() {\n    if (!this.activated) throw new _RuntimeError(4012 /* RuntimeErrorCode.OUTLET_NOT_ACTIVATED */, (typeof ngDevMode === 'undefined' || ngDevMode) && 'Outlet is not activated');\n    this.location.detach();\n    const cmp = this.activated;\n    this.activated = null;\n    this._activatedRoute = null;\n    this.detachEvents.emit(cmp.instance);\n    return cmp;\n  }\n  /**\n   * Called when the `RouteReuseStrategy` instructs to re-attach a previously detached subtree\n   */\n  attach(ref, activatedRoute) {\n    var _this$inputBinder2;\n    this.activated = ref;\n    this._activatedRoute = activatedRoute;\n    this.location.insert(ref.hostView);\n    (_this$inputBinder2 = this.inputBinder) === null || _this$inputBinder2 === void 0 || _this$inputBinder2.bindActivatedRouteToOutletComponent(this);\n    this.attachEvents.emit(ref.instance);\n  }\n  deactivate() {\n    if (this.activated) {\n      const c = this.component;\n      this.activated.destroy();\n      this.activated = null;\n      this._activatedRoute = null;\n      this.deactivateEvents.emit(c);\n    }\n  }\n  activateWith(activatedRoute, environmentInjector) {\n    var _this$inputBinder3;\n    if (this.isActivated) {\n      throw new _RuntimeError(4013 /* RuntimeErrorCode.OUTLET_ALREADY_ACTIVATED */, (typeof ngDevMode === 'undefined' || ngDevMode) && 'Cannot activate an already activated outlet');\n    }\n    this._activatedRoute = activatedRoute;\n    const location = this.location;\n    const snapshot = activatedRoute.snapshot;\n    const component = snapshot.component;\n    const childContexts = this.parentContexts.getOrCreateContext(this.name).children;\n    const injector = new OutletInjector(activatedRoute, childContexts, location.injector, this.routerOutletData);\n    this.activated = location.createComponent(component, {\n      index: location.length,\n      injector,\n      environmentInjector: environmentInjector\n    });\n    // Calling `markForCheck` to make sure we will run the change detection when the\n    // `RouterOutlet` is inside a `ChangeDetectionStrategy.OnPush` component.\n    this.changeDetector.markForCheck();\n    (_this$inputBinder3 = this.inputBinder) === null || _this$inputBinder3 === void 0 || _this$inputBinder3.bindActivatedRouteToOutletComponent(this);\n    this.activateEvents.emit(this.activated.instance);\n  }\n}\n_RouterOutlet = RouterOutlet;\n_defineProperty(RouterOutlet, \"\\u0275fac\", function _RouterOutlet_Factory(__ngFactoryType__) {\n  return new (__ngFactoryType__ || _RouterOutlet)();\n});\n_defineProperty(RouterOutlet, \"\\u0275dir\", /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: _RouterOutlet,\n  selectors: [[\"router-outlet\"]],\n  inputs: {\n    name: \"name\",\n    routerOutletData: [1, \"routerOutletData\"]\n  },\n  outputs: {\n    activateEvents: \"activate\",\n    deactivateEvents: \"deactivate\",\n    attachEvents: \"attach\",\n    detachEvents: \"detach\"\n  },\n  exportAs: [\"outlet\"],\n  features: [i0.ɵɵNgOnChangesFeature]\n}));\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RouterOutlet, [{\n    type: Directive,\n    args: [{\n      selector: 'router-outlet',\n      exportAs: 'outlet'\n    }]\n  }], null, {\n    name: [{\n      type: Input\n    }],\n    activateEvents: [{\n      type: Output,\n      args: ['activate']\n    }],\n    deactivateEvents: [{\n      type: Output,\n      args: ['deactivate']\n    }],\n    attachEvents: [{\n      type: Output,\n      args: ['attach']\n    }],\n    detachEvents: [{\n      type: Output,\n      args: ['detach']\n    }]\n  });\n})();\nclass OutletInjector {\n  constructor(route, childContexts, parent, outletData) {\n    _defineProperty(this, \"route\", void 0);\n    _defineProperty(this, \"childContexts\", void 0);\n    _defineProperty(this, \"parent\", void 0);\n    _defineProperty(this, \"outletData\", void 0);\n    this.route = route;\n    this.childContexts = childContexts;\n    this.parent = parent;\n    this.outletData = outletData;\n  }\n  get(token, notFoundValue) {\n    if (token === ActivatedRoute) {\n      return this.route;\n    }\n    if (token === ChildrenOutletContexts) {\n      return this.childContexts;\n    }\n    if (token === ROUTER_OUTLET_DATA) {\n      return this.outletData;\n    }\n    return this.parent.get(token, notFoundValue);\n  }\n}\nconst INPUT_BINDER = new InjectionToken('');\n/**\n * Injectable used as a tree-shakable provider for opting in to binding router data to component\n * inputs.\n *\n * The RouterOutlet registers itself with this service when an `ActivatedRoute` is attached or\n * activated. When this happens, the service subscribes to the `ActivatedRoute` observables (params,\n * queryParams, data) and sets the inputs of the component using `ComponentRef.setInput`.\n * Importantly, when an input does not have an item in the route data with a matching key, this\n * input is set to `undefined`. If it were not done this way, the previous information would be\n * retained if the data got removed from the route (i.e. if a query parameter is removed).\n *\n * The `RouterOutlet` should unregister itself when destroyed via `unsubscribeFromRouteData` so that\n * the subscriptions are cleaned up.\n */\nclass RoutedComponentInputBinder {\n  constructor() {\n    _defineProperty(this, \"outletDataSubscriptions\", new Map());\n  }\n  bindActivatedRouteToOutletComponent(outlet) {\n    this.unsubscribeFromRouteData(outlet);\n    this.subscribeToRouteData(outlet);\n  }\n  unsubscribeFromRouteData(outlet) {\n    var _this$outletDataSubsc;\n    (_this$outletDataSubsc = this.outletDataSubscriptions.get(outlet)) === null || _this$outletDataSubsc === void 0 || _this$outletDataSubsc.unsubscribe();\n    this.outletDataSubscriptions.delete(outlet);\n  }\n  subscribeToRouteData(outlet) {\n    const {\n      activatedRoute\n    } = outlet;\n    const dataSubscription = combineLatest([activatedRoute.queryParams, activatedRoute.params, activatedRoute.data]).pipe(switchMap(([queryParams, params, data], index) => {\n      data = {\n        ...queryParams,\n        ...params,\n        ...data\n      };\n      // Get the first result from the data subscription synchronously so it's available to\n      // the component as soon as possible (and doesn't require a second change detection).\n      if (index === 0) {\n        return of(data);\n      }\n      // Promise.resolve is used to avoid synchronously writing the wrong data when\n      // two of the Observables in the `combineLatest` stream emit one after\n      // another.\n      return Promise.resolve(data);\n    })).subscribe(data => {\n      // Outlet may have been deactivated or changed names to be associated with a different\n      // route\n      if (!outlet.isActivated || !outlet.activatedComponentRef || outlet.activatedRoute !== activatedRoute || activatedRoute.component === null) {\n        this.unsubscribeFromRouteData(outlet);\n        return;\n      }\n      const mirror = reflectComponentType(activatedRoute.component);\n      if (!mirror) {\n        this.unsubscribeFromRouteData(outlet);\n        return;\n      }\n      for (const {\n        templateName\n      } of mirror.inputs) {\n        outlet.activatedComponentRef.setInput(templateName, data[templateName]);\n      }\n    });\n    this.outletDataSubscriptions.set(outlet, dataSubscription);\n  }\n}\n_RoutedComponentInputBinder = RoutedComponentInputBinder;\n_defineProperty(RoutedComponentInputBinder, \"\\u0275fac\", function _RoutedComponentInputBinder_Factory(__ngFactoryType__) {\n  return new (__ngFactoryType__ || _RoutedComponentInputBinder)();\n});\n_defineProperty(RoutedComponentInputBinder, \"\\u0275prov\", /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: _RoutedComponentInputBinder,\n  factory: _RoutedComponentInputBinder.ɵfac\n}));\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RoutedComponentInputBinder, [{\n    type: Injectable\n  }], null, null);\n})();\nfunction createRouterState(routeReuseStrategy, curr, prevState) {\n  const root = createNode(routeReuseStrategy, curr._root, prevState ? prevState._root : undefined);\n  return new RouterState(root, curr);\n}\nfunction createNode(routeReuseStrategy, curr, prevState) {\n  // reuse an activated route that is currently displayed on the screen\n  if (prevState && routeReuseStrategy.shouldReuseRoute(curr.value, prevState.value.snapshot)) {\n    const value = prevState.value;\n    value._futureSnapshot = curr.value;\n    const children = createOrReuseChildren(routeReuseStrategy, curr, prevState);\n    return new TreeNode(value, children);\n  } else {\n    if (routeReuseStrategy.shouldAttach(curr.value)) {\n      // retrieve an activated route that is used to be displayed, but is not currently displayed\n      const detachedRouteHandle = routeReuseStrategy.retrieve(curr.value);\n      if (detachedRouteHandle !== null) {\n        const tree = detachedRouteHandle.route;\n        tree.value._futureSnapshot = curr.value;\n        tree.children = curr.children.map(c => createNode(routeReuseStrategy, c));\n        return tree;\n      }\n    }\n    const value = createActivatedRoute(curr.value);\n    const children = curr.children.map(c => createNode(routeReuseStrategy, c));\n    return new TreeNode(value, children);\n  }\n}\nfunction createOrReuseChildren(routeReuseStrategy, curr, prevState) {\n  return curr.children.map(child => {\n    for (const p of prevState.children) {\n      if (routeReuseStrategy.shouldReuseRoute(child.value, p.value.snapshot)) {\n        return createNode(routeReuseStrategy, child, p);\n      }\n    }\n    return createNode(routeReuseStrategy, child);\n  });\n}\nfunction createActivatedRoute(c) {\n  return new ActivatedRoute(new BehaviorSubject(c.url), new BehaviorSubject(c.params), new BehaviorSubject(c.queryParams), new BehaviorSubject(c.fragment), new BehaviorSubject(c.data), c.outlet, c.component, c);\n}\n\n/**\n * Can be returned by a `Router` guard to instruct the `Router` to redirect rather than continue\n * processing the path of the in-flight navigation. The `redirectTo` indicates _where_ the new\n * navigation should go to and the optional `navigationBehaviorOptions` can provide more information\n * about _how_ to perform the navigation.\n *\n * ```ts\n * const route: Route = {\n *   path: \"user/:userId\",\n *   component: User,\n *   canActivate: [\n *     () => {\n *       const router = inject(Router);\n *       const authService = inject(AuthenticationService);\n *\n *       if (!authService.isLoggedIn()) {\n *         const loginPath = router.parseUrl(\"/login\");\n *         return new RedirectCommand(loginPath, {\n *           skipLocationChange: \"true\",\n *         });\n *       }\n *\n *       return true;\n *     },\n *   ],\n * };\n * ```\n * @see [Routing guide](guide/routing/common-router-tasks#preventing-unauthorized-access)\n *\n * @publicApi\n */\nclass RedirectCommand {\n  constructor(redirectTo, navigationBehaviorOptions) {\n    _defineProperty(this, \"redirectTo\", void 0);\n    _defineProperty(this, \"navigationBehaviorOptions\", void 0);\n    this.redirectTo = redirectTo;\n    this.navigationBehaviorOptions = navigationBehaviorOptions;\n  }\n}\nconst NAVIGATION_CANCELING_ERROR = 'ngNavigationCancelingError';\nfunction redirectingNavigationError(urlSerializer, redirect) {\n  const {\n    redirectTo,\n    navigationBehaviorOptions\n  } = isUrlTree(redirect) ? {\n    redirectTo: redirect,\n    navigationBehaviorOptions: undefined\n  } : redirect;\n  const error = navigationCancelingError(ngDevMode && `Redirecting to \"${urlSerializer.serialize(redirectTo)}\"`, NavigationCancellationCode.Redirect);\n  error.url = redirectTo;\n  error.navigationBehaviorOptions = navigationBehaviorOptions;\n  return error;\n}\nfunction navigationCancelingError(message, code) {\n  const error = new Error(`NavigationCancelingError: ${message || ''}`);\n  error[NAVIGATION_CANCELING_ERROR] = true;\n  error.cancellationCode = code;\n  return error;\n}\nfunction isRedirectingNavigationCancelingError(error) {\n  return isNavigationCancelingError(error) && isUrlTree(error.url);\n}\nfunction isNavigationCancelingError(error) {\n  return !!error && error[NAVIGATION_CANCELING_ERROR];\n}\nlet warnedAboutUnsupportedInputBinding = false;\nconst activateRoutes = (rootContexts, routeReuseStrategy, forwardEvent, inputBindingEnabled) => map(t => {\n  new ActivateRoutes(routeReuseStrategy, t.targetRouterState, t.currentRouterState, forwardEvent, inputBindingEnabled).activate(rootContexts);\n  return t;\n});\nclass ActivateRoutes {\n  constructor(routeReuseStrategy, futureState, currState, forwardEvent, inputBindingEnabled) {\n    _defineProperty(this, \"routeReuseStrategy\", void 0);\n    _defineProperty(this, \"futureState\", void 0);\n    _defineProperty(this, \"currState\", void 0);\n    _defineProperty(this, \"forwardEvent\", void 0);\n    _defineProperty(this, \"inputBindingEnabled\", void 0);\n    this.routeReuseStrategy = routeReuseStrategy;\n    this.futureState = futureState;\n    this.currState = currState;\n    this.forwardEvent = forwardEvent;\n    this.inputBindingEnabled = inputBindingEnabled;\n  }\n  activate(parentContexts) {\n    const futureRoot = this.futureState._root;\n    const currRoot = this.currState ? this.currState._root : null;\n    this.deactivateChildRoutes(futureRoot, currRoot, parentContexts);\n    advanceActivatedRoute(this.futureState.root);\n    this.activateChildRoutes(futureRoot, currRoot, parentContexts);\n  }\n  // De-activate the child route that are not re-used for the future state\n  deactivateChildRoutes(futureNode, currNode, contexts) {\n    const children = nodeChildrenAsMap(currNode);\n    // Recurse on the routes active in the future state to de-activate deeper children\n    futureNode.children.forEach(futureChild => {\n      const childOutletName = futureChild.value.outlet;\n      this.deactivateRoutes(futureChild, children[childOutletName], contexts);\n      delete children[childOutletName];\n    });\n    // De-activate the routes that will not be re-used\n    Object.values(children).forEach(v => {\n      this.deactivateRouteAndItsChildren(v, contexts);\n    });\n  }\n  deactivateRoutes(futureNode, currNode, parentContext) {\n    const future = futureNode.value;\n    const curr = currNode ? currNode.value : null;\n    if (future === curr) {\n      // Reusing the node, check to see if the children need to be de-activated\n      if (future.component) {\n        // If we have a normal route, we need to go through an outlet.\n        const context = parentContext.getContext(future.outlet);\n        if (context) {\n          this.deactivateChildRoutes(futureNode, currNode, context.children);\n        }\n      } else {\n        // if we have a componentless route, we recurse but keep the same outlet map.\n        this.deactivateChildRoutes(futureNode, currNode, parentContext);\n      }\n    } else {\n      if (curr) {\n        // Deactivate the current route which will not be re-used\n        this.deactivateRouteAndItsChildren(currNode, parentContext);\n      }\n    }\n  }\n  deactivateRouteAndItsChildren(route, parentContexts) {\n    // If there is no component, the Route is never attached to an outlet (because there is no\n    // component to attach).\n    if (route.value.component && this.routeReuseStrategy.shouldDetach(route.value.snapshot)) {\n      this.detachAndStoreRouteSubtree(route, parentContexts);\n    } else {\n      this.deactivateRouteAndOutlet(route, parentContexts);\n    }\n  }\n  detachAndStoreRouteSubtree(route, parentContexts) {\n    const context = parentContexts.getContext(route.value.outlet);\n    const contexts = context && route.value.component ? context.children : parentContexts;\n    const children = nodeChildrenAsMap(route);\n    for (const treeNode of Object.values(children)) {\n      this.deactivateRouteAndItsChildren(treeNode, contexts);\n    }\n    if (context && context.outlet) {\n      const componentRef = context.outlet.detach();\n      const contexts = context.children.onOutletDeactivated();\n      this.routeReuseStrategy.store(route.value.snapshot, {\n        componentRef,\n        route,\n        contexts\n      });\n    }\n  }\n  deactivateRouteAndOutlet(route, parentContexts) {\n    const context = parentContexts.getContext(route.value.outlet);\n    // The context could be `null` if we are on a componentless route but there may still be\n    // children that need deactivating.\n    const contexts = context && route.value.component ? context.children : parentContexts;\n    const children = nodeChildrenAsMap(route);\n    for (const treeNode of Object.values(children)) {\n      this.deactivateRouteAndItsChildren(treeNode, contexts);\n    }\n    if (context) {\n      if (context.outlet) {\n        // Destroy the component\n        context.outlet.deactivate();\n        // Destroy the contexts for all the outlets that were in the component\n        context.children.onOutletDeactivated();\n      }\n      // Clear the information about the attached component on the context but keep the reference to\n      // the outlet. Clear even if outlet was not yet activated to avoid activating later with old\n      // info\n      context.attachRef = null;\n      context.route = null;\n    }\n  }\n  activateChildRoutes(futureNode, currNode, contexts) {\n    const children = nodeChildrenAsMap(currNode);\n    futureNode.children.forEach(c => {\n      this.activateRoutes(c, children[c.value.outlet], contexts);\n      this.forwardEvent(new ActivationEnd(c.value.snapshot));\n    });\n    if (futureNode.children.length) {\n      this.forwardEvent(new ChildActivationEnd(futureNode.value.snapshot));\n    }\n  }\n  activateRoutes(futureNode, currNode, parentContexts) {\n    const future = futureNode.value;\n    const curr = currNode ? currNode.value : null;\n    advanceActivatedRoute(future);\n    // reusing the node\n    if (future === curr) {\n      if (future.component) {\n        // If we have a normal route, we need to go through an outlet.\n        const context = parentContexts.getOrCreateContext(future.outlet);\n        this.activateChildRoutes(futureNode, currNode, context.children);\n      } else {\n        // if we have a componentless route, we recurse but keep the same outlet map.\n        this.activateChildRoutes(futureNode, currNode, parentContexts);\n      }\n    } else {\n      if (future.component) {\n        // if we have a normal route, we need to place the component into the outlet and recurse.\n        const context = parentContexts.getOrCreateContext(future.outlet);\n        if (this.routeReuseStrategy.shouldAttach(future.snapshot)) {\n          const stored = this.routeReuseStrategy.retrieve(future.snapshot);\n          this.routeReuseStrategy.store(future.snapshot, null);\n          context.children.onOutletReAttached(stored.contexts);\n          context.attachRef = stored.componentRef;\n          context.route = stored.route.value;\n          if (context.outlet) {\n            // Attach right away when the outlet has already been instantiated\n            // Otherwise attach from `RouterOutlet.ngOnInit` when it is instantiated\n            context.outlet.attach(stored.componentRef, stored.route.value);\n          }\n          advanceActivatedRoute(stored.route.value);\n          this.activateChildRoutes(futureNode, null, context.children);\n        } else {\n          context.attachRef = null;\n          context.route = future;\n          if (context.outlet) {\n            // Activate the outlet when it has already been instantiated\n            // Otherwise it will get activated from its `ngOnInit` when instantiated\n            context.outlet.activateWith(future, context.injector);\n          }\n          this.activateChildRoutes(futureNode, null, context.children);\n        }\n      } else {\n        // if we have a componentless route, we recurse but keep the same outlet map.\n        this.activateChildRoutes(futureNode, null, parentContexts);\n      }\n    }\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      const context = parentContexts.getOrCreateContext(future.outlet);\n      const outlet = context.outlet;\n      if (outlet && this.inputBindingEnabled && !outlet.supportsBindingToComponentInputs && !warnedAboutUnsupportedInputBinding) {\n        console.warn(`'withComponentInputBinding' feature is enabled but ` + `this application is using an outlet that may not support binding to component inputs.`);\n        warnedAboutUnsupportedInputBinding = true;\n      }\n    }\n  }\n}\nclass CanActivate {\n  constructor(path) {\n    _defineProperty(this, \"path\", void 0);\n    _defineProperty(this, \"route\", void 0);\n    this.path = path;\n    this.route = this.path[this.path.length - 1];\n  }\n}\nclass CanDeactivate {\n  constructor(component, route) {\n    _defineProperty(this, \"component\", void 0);\n    _defineProperty(this, \"route\", void 0);\n    this.component = component;\n    this.route = route;\n  }\n}\nfunction getAllRouteGuards(future, curr, parentContexts) {\n  const futureRoot = future._root;\n  const currRoot = curr ? curr._root : null;\n  return getChildRouteGuards(futureRoot, currRoot, parentContexts, [futureRoot.value]);\n}\nfunction getCanActivateChild(p) {\n  const canActivateChild = p.routeConfig ? p.routeConfig.canActivateChild : null;\n  if (!canActivateChild || canActivateChild.length === 0) return null;\n  return {\n    node: p,\n    guards: canActivateChild\n  };\n}\nfunction getTokenOrFunctionIdentity(tokenOrFunction, injector) {\n  const NOT_FOUND = Symbol();\n  const result = injector.get(tokenOrFunction, NOT_FOUND);\n  if (result === NOT_FOUND) {\n    if (typeof tokenOrFunction === 'function' && !_isInjectable(tokenOrFunction)) {\n      // We think the token is just a function so return it as-is\n      return tokenOrFunction;\n    } else {\n      // This will throw the not found error\n      return injector.get(tokenOrFunction);\n    }\n  }\n  return result;\n}\nfunction getChildRouteGuards(futureNode, currNode, contexts, futurePath, checks = {\n  canDeactivateChecks: [],\n  canActivateChecks: []\n}) {\n  const prevChildren = nodeChildrenAsMap(currNode);\n  // Process the children of the future route\n  futureNode.children.forEach(c => {\n    getRouteGuards(c, prevChildren[c.value.outlet], contexts, futurePath.concat([c.value]), checks);\n    delete prevChildren[c.value.outlet];\n  });\n  // Process any children left from the current route (not active for the future route)\n  Object.entries(prevChildren).forEach(([k, v]) => deactivateRouteAndItsChildren(v, contexts.getContext(k), checks));\n  return checks;\n}\nfunction getRouteGuards(futureNode, currNode, parentContexts, futurePath, checks = {\n  canDeactivateChecks: [],\n  canActivateChecks: []\n}) {\n  const future = futureNode.value;\n  const curr = currNode ? currNode.value : null;\n  const context = parentContexts ? parentContexts.getContext(futureNode.value.outlet) : null;\n  // reusing the node\n  if (curr && future.routeConfig === curr.routeConfig) {\n    const shouldRun = shouldRunGuardsAndResolvers(curr, future, future.routeConfig.runGuardsAndResolvers);\n    if (shouldRun) {\n      checks.canActivateChecks.push(new CanActivate(futurePath));\n    } else {\n      // we need to set the data\n      future.data = curr.data;\n      future._resolvedData = curr._resolvedData;\n    }\n    // If we have a component, we need to go through an outlet.\n    if (future.component) {\n      getChildRouteGuards(futureNode, currNode, context ? context.children : null, futurePath, checks);\n      // if we have a componentless route, we recurse but keep the same outlet map.\n    } else {\n      getChildRouteGuards(futureNode, currNode, parentContexts, futurePath, checks);\n    }\n    if (shouldRun && context && context.outlet && context.outlet.isActivated) {\n      checks.canDeactivateChecks.push(new CanDeactivate(context.outlet.component, curr));\n    }\n  } else {\n    if (curr) {\n      deactivateRouteAndItsChildren(currNode, context, checks);\n    }\n    checks.canActivateChecks.push(new CanActivate(futurePath));\n    // If we have a component, we need to go through an outlet.\n    if (future.component) {\n      getChildRouteGuards(futureNode, null, context ? context.children : null, futurePath, checks);\n      // if we have a componentless route, we recurse but keep the same outlet map.\n    } else {\n      getChildRouteGuards(futureNode, null, parentContexts, futurePath, checks);\n    }\n  }\n  return checks;\n}\nfunction shouldRunGuardsAndResolvers(curr, future, mode) {\n  if (typeof mode === 'function') {\n    return mode(curr, future);\n  }\n  switch (mode) {\n    case 'pathParamsChange':\n      return !equalPath(curr.url, future.url);\n    case 'pathParamsOrQueryParamsChange':\n      return !equalPath(curr.url, future.url) || !shallowEqual(curr.queryParams, future.queryParams);\n    case 'always':\n      return true;\n    case 'paramsOrQueryParamsChange':\n      return !equalParamsAndUrlSegments(curr, future) || !shallowEqual(curr.queryParams, future.queryParams);\n    case 'paramsChange':\n    default:\n      return !equalParamsAndUrlSegments(curr, future);\n  }\n}\nfunction deactivateRouteAndItsChildren(route, context, checks) {\n  const children = nodeChildrenAsMap(route);\n  const r = route.value;\n  Object.entries(children).forEach(([childName, node]) => {\n    if (!r.component) {\n      deactivateRouteAndItsChildren(node, context, checks);\n    } else if (context) {\n      deactivateRouteAndItsChildren(node, context.children.getContext(childName), checks);\n    } else {\n      deactivateRouteAndItsChildren(node, null, checks);\n    }\n  });\n  if (!r.component) {\n    checks.canDeactivateChecks.push(new CanDeactivate(null, r));\n  } else if (context && context.outlet && context.outlet.isActivated) {\n    checks.canDeactivateChecks.push(new CanDeactivate(context.outlet.component, r));\n  } else {\n    checks.canDeactivateChecks.push(new CanDeactivate(null, r));\n  }\n}\n\n/**\n * Simple function check, but generic so type inference will flow. Example:\n *\n * function product(a: number, b: number) {\n *   return a * b;\n * }\n *\n * if (isFunction<product>(fn)) {\n *   return fn(1, 2);\n * } else {\n *   throw \"Must provide the `product` function\";\n * }\n */\nfunction isFunction(v) {\n  return typeof v === 'function';\n}\nfunction isBoolean(v) {\n  return typeof v === 'boolean';\n}\nfunction isCanLoad(guard) {\n  return guard && isFunction(guard.canLoad);\n}\nfunction isCanActivate(guard) {\n  return guard && isFunction(guard.canActivate);\n}\nfunction isCanActivateChild(guard) {\n  return guard && isFunction(guard.canActivateChild);\n}\nfunction isCanDeactivate(guard) {\n  return guard && isFunction(guard.canDeactivate);\n}\nfunction isCanMatch(guard) {\n  return guard && isFunction(guard.canMatch);\n}\nfunction isEmptyError(e) {\n  return e instanceof EmptyError || (e === null || e === void 0 ? void 0 : e.name) === 'EmptyError';\n}\nconst INITIAL_VALUE = /* @__PURE__ */Symbol('INITIAL_VALUE');\nfunction prioritizedGuardValue() {\n  return switchMap(obs => {\n    return combineLatest(obs.map(o => o.pipe(take(1), startWith(INITIAL_VALUE)))).pipe(map(results => {\n      for (const result of results) {\n        if (result === true) {\n          // If result is true, check the next one\n          continue;\n        } else if (result === INITIAL_VALUE) {\n          // If guard has not finished, we need to stop processing.\n          return INITIAL_VALUE;\n        } else if (result === false || isRedirect(result)) {\n          // Result finished and was not true. Return the result.\n          // Note that we only allow false/UrlTree/RedirectCommand. Other values are considered invalid and\n          // ignored.\n          return result;\n        }\n      }\n      // Everything resolved to true. Return true.\n      return true;\n    }), filter(item => item !== INITIAL_VALUE), take(1));\n  });\n}\nfunction isRedirect(val) {\n  return isUrlTree(val) || val instanceof RedirectCommand;\n}\nfunction checkGuards(injector, forwardEvent) {\n  return mergeMap(t => {\n    const {\n      targetSnapshot,\n      currentSnapshot,\n      guards: {\n        canActivateChecks,\n        canDeactivateChecks\n      }\n    } = t;\n    if (canDeactivateChecks.length === 0 && canActivateChecks.length === 0) {\n      return of({\n        ...t,\n        guardsResult: true\n      });\n    }\n    return runCanDeactivateChecks(canDeactivateChecks, targetSnapshot, currentSnapshot, injector).pipe(mergeMap(canDeactivate => {\n      return canDeactivate && isBoolean(canDeactivate) ? runCanActivateChecks(targetSnapshot, canActivateChecks, injector, forwardEvent) : of(canDeactivate);\n    }), map(guardsResult => ({\n      ...t,\n      guardsResult\n    })));\n  });\n}\nfunction runCanDeactivateChecks(checks, futureRSS, currRSS, injector) {\n  return from(checks).pipe(mergeMap(check => runCanDeactivate(check.component, check.route, currRSS, futureRSS, injector)), first(result => {\n    return result !== true;\n  }, true));\n}\nfunction runCanActivateChecks(futureSnapshot, checks, injector, forwardEvent) {\n  return from(checks).pipe(concatMap(check => {\n    return concat(fireChildActivationStart(check.route.parent, forwardEvent), fireActivationStart(check.route, forwardEvent), runCanActivateChild(futureSnapshot, check.path, injector), runCanActivate(futureSnapshot, check.route, injector));\n  }), first(result => {\n    return result !== true;\n  }, true));\n}\n/**\n * This should fire off `ActivationStart` events for each route being activated at this\n * level.\n * In other words, if you're activating `a` and `b` below, `path` will contain the\n * `ActivatedRouteSnapshot`s for both and we will fire `ActivationStart` for both. Always\n * return\n * `true` so checks continue to run.\n */\nfunction fireActivationStart(snapshot, forwardEvent) {\n  if (snapshot !== null && forwardEvent) {\n    forwardEvent(new ActivationStart(snapshot));\n  }\n  return of(true);\n}\n/**\n * This should fire off `ChildActivationStart` events for each route being activated at this\n * level.\n * In other words, if you're activating `a` and `b` below, `path` will contain the\n * `ActivatedRouteSnapshot`s for both and we will fire `ChildActivationStart` for both. Always\n * return\n * `true` so checks continue to run.\n */\nfunction fireChildActivationStart(snapshot, forwardEvent) {\n  if (snapshot !== null && forwardEvent) {\n    forwardEvent(new ChildActivationStart(snapshot));\n  }\n  return of(true);\n}\nfunction runCanActivate(futureRSS, futureARS, injector) {\n  const canActivate = futureARS.routeConfig ? futureARS.routeConfig.canActivate : null;\n  if (!canActivate || canActivate.length === 0) return of(true);\n  const canActivateObservables = canActivate.map(canActivate => {\n    return defer(() => {\n      var _getClosestRouteInjec2;\n      const closestInjector = (_getClosestRouteInjec2 = getClosestRouteInjector(futureARS)) !== null && _getClosestRouteInjec2 !== void 0 ? _getClosestRouteInjec2 : injector;\n      const guard = getTokenOrFunctionIdentity(canActivate, closestInjector);\n      const guardVal = isCanActivate(guard) ? guard.canActivate(futureARS, futureRSS) : runInInjectionContext(closestInjector, () => guard(futureARS, futureRSS));\n      return wrapIntoObservable(guardVal).pipe(first());\n    });\n  });\n  return of(canActivateObservables).pipe(prioritizedGuardValue());\n}\nfunction runCanActivateChild(futureRSS, path, injector) {\n  const futureARS = path[path.length - 1];\n  const canActivateChildGuards = path.slice(0, path.length - 1).reverse().map(p => getCanActivateChild(p)).filter(_ => _ !== null);\n  const canActivateChildGuardsMapped = canActivateChildGuards.map(d => {\n    return defer(() => {\n      const guardsMapped = d.guards.map(canActivateChild => {\n        var _getClosestRouteInjec3;\n        const closestInjector = (_getClosestRouteInjec3 = getClosestRouteInjector(d.node)) !== null && _getClosestRouteInjec3 !== void 0 ? _getClosestRouteInjec3 : injector;\n        const guard = getTokenOrFunctionIdentity(canActivateChild, closestInjector);\n        const guardVal = isCanActivateChild(guard) ? guard.canActivateChild(futureARS, futureRSS) : runInInjectionContext(closestInjector, () => guard(futureARS, futureRSS));\n        return wrapIntoObservable(guardVal).pipe(first());\n      });\n      return of(guardsMapped).pipe(prioritizedGuardValue());\n    });\n  });\n  return of(canActivateChildGuardsMapped).pipe(prioritizedGuardValue());\n}\nfunction runCanDeactivate(component, currARS, currRSS, futureRSS, injector) {\n  const canDeactivate = currARS && currARS.routeConfig ? currARS.routeConfig.canDeactivate : null;\n  if (!canDeactivate || canDeactivate.length === 0) return of(true);\n  const canDeactivateObservables = canDeactivate.map(c => {\n    var _getClosestRouteInjec4;\n    const closestInjector = (_getClosestRouteInjec4 = getClosestRouteInjector(currARS)) !== null && _getClosestRouteInjec4 !== void 0 ? _getClosestRouteInjec4 : injector;\n    const guard = getTokenOrFunctionIdentity(c, closestInjector);\n    const guardVal = isCanDeactivate(guard) ? guard.canDeactivate(component, currARS, currRSS, futureRSS) : runInInjectionContext(closestInjector, () => guard(component, currARS, currRSS, futureRSS));\n    return wrapIntoObservable(guardVal).pipe(first());\n  });\n  return of(canDeactivateObservables).pipe(prioritizedGuardValue());\n}\nfunction runCanLoadGuards(injector, route, segments, urlSerializer) {\n  const canLoad = route.canLoad;\n  if (canLoad === undefined || canLoad.length === 0) {\n    return of(true);\n  }\n  const canLoadObservables = canLoad.map(injectionToken => {\n    const guard = getTokenOrFunctionIdentity(injectionToken, injector);\n    const guardVal = isCanLoad(guard) ? guard.canLoad(route, segments) : runInInjectionContext(injector, () => guard(route, segments));\n    return wrapIntoObservable(guardVal);\n  });\n  return of(canLoadObservables).pipe(prioritizedGuardValue(), redirectIfUrlTree(urlSerializer));\n}\nfunction redirectIfUrlTree(urlSerializer) {\n  return pipe(tap(result => {\n    if (typeof result === 'boolean') return;\n    throw redirectingNavigationError(urlSerializer, result);\n  }), map(result => result === true));\n}\nfunction runCanMatchGuards(injector, route, segments, urlSerializer) {\n  const canMatch = route.canMatch;\n  if (!canMatch || canMatch.length === 0) return of(true);\n  const canMatchObservables = canMatch.map(injectionToken => {\n    const guard = getTokenOrFunctionIdentity(injectionToken, injector);\n    const guardVal = isCanMatch(guard) ? guard.canMatch(route, segments) : runInInjectionContext(injector, () => guard(route, segments));\n    return wrapIntoObservable(guardVal);\n  });\n  return of(canMatchObservables).pipe(prioritizedGuardValue(), redirectIfUrlTree(urlSerializer));\n}\nclass NoMatch {\n  constructor(segmentGroup) {\n    _defineProperty(this, \"segmentGroup\", void 0);\n    this.segmentGroup = segmentGroup || null;\n  }\n}\nclass AbsoluteRedirect extends Error {\n  constructor(urlTree) {\n    super();\n    _defineProperty(this, \"urlTree\", void 0);\n    this.urlTree = urlTree;\n  }\n}\nfunction noMatch$1(segmentGroup) {\n  return throwError(new NoMatch(segmentGroup));\n}\nfunction namedOutletsRedirect(redirectTo) {\n  return throwError(new _RuntimeError(4000 /* RuntimeErrorCode.NAMED_OUTLET_REDIRECT */, (typeof ngDevMode === 'undefined' || ngDevMode) && `Only absolute redirects can have named outlets. redirectTo: '${redirectTo}'`));\n}\nfunction canLoadFails(route) {\n  return throwError(navigationCancelingError((typeof ngDevMode === 'undefined' || ngDevMode) && `Cannot load children because the guard of the route \"path: '${route.path}'\" returned false`, NavigationCancellationCode.GuardRejected));\n}\nclass ApplyRedirects {\n  constructor(urlSerializer, urlTree) {\n    _defineProperty(this, \"urlSerializer\", void 0);\n    _defineProperty(this, \"urlTree\", void 0);\n    this.urlSerializer = urlSerializer;\n    this.urlTree = urlTree;\n  }\n  lineralizeSegments(route, urlTree) {\n    let res = [];\n    let c = urlTree.root;\n    while (true) {\n      res = res.concat(c.segments);\n      if (c.numberOfChildren === 0) {\n        return of(res);\n      }\n      if (c.numberOfChildren > 1 || !c.children[PRIMARY_OUTLET]) {\n        return namedOutletsRedirect(`${route.redirectTo}`);\n      }\n      c = c.children[PRIMARY_OUTLET];\n    }\n  }\n  applyRedirectCommands(segments, redirectTo, posParams, currentSnapshot, injector) {\n    if (typeof redirectTo !== 'string') {\n      const redirectToFn = redirectTo;\n      const {\n        queryParams,\n        fragment,\n        routeConfig,\n        url,\n        outlet,\n        params,\n        data,\n        title\n      } = currentSnapshot;\n      const newRedirect = runInInjectionContext(injector, () => redirectToFn({\n        params,\n        data,\n        queryParams,\n        fragment,\n        routeConfig,\n        url,\n        outlet,\n        title\n      }));\n      if (newRedirect instanceof UrlTree) {\n        throw new AbsoluteRedirect(newRedirect);\n      }\n      redirectTo = newRedirect;\n    }\n    const newTree = this.applyRedirectCreateUrlTree(redirectTo, this.urlSerializer.parse(redirectTo), segments, posParams);\n    if (redirectTo[0] === '/') {\n      throw new AbsoluteRedirect(newTree);\n    }\n    return newTree;\n  }\n  applyRedirectCreateUrlTree(redirectTo, urlTree, segments, posParams) {\n    const newRoot = this.createSegmentGroup(redirectTo, urlTree.root, segments, posParams);\n    return new UrlTree(newRoot, this.createQueryParams(urlTree.queryParams, this.urlTree.queryParams), urlTree.fragment);\n  }\n  createQueryParams(redirectToParams, actualParams) {\n    const res = {};\n    Object.entries(redirectToParams).forEach(([k, v]) => {\n      const copySourceValue = typeof v === 'string' && v[0] === ':';\n      if (copySourceValue) {\n        const sourceName = v.substring(1);\n        res[k] = actualParams[sourceName];\n      } else {\n        res[k] = v;\n      }\n    });\n    return res;\n  }\n  createSegmentGroup(redirectTo, group, segments, posParams) {\n    const updatedSegments = this.createSegments(redirectTo, group.segments, segments, posParams);\n    let children = {};\n    Object.entries(group.children).forEach(([name, child]) => {\n      children[name] = this.createSegmentGroup(redirectTo, child, segments, posParams);\n    });\n    return new UrlSegmentGroup(updatedSegments, children);\n  }\n  createSegments(redirectTo, redirectToSegments, actualSegments, posParams) {\n    return redirectToSegments.map(s => s.path[0] === ':' ? this.findPosParam(redirectTo, s, posParams) : this.findOrReturn(s, actualSegments));\n  }\n  findPosParam(redirectTo, redirectToUrlSegment, posParams) {\n    const pos = posParams[redirectToUrlSegment.path.substring(1)];\n    if (!pos) throw new _RuntimeError(4001 /* RuntimeErrorCode.MISSING_REDIRECT */, (typeof ngDevMode === 'undefined' || ngDevMode) && `Cannot redirect to '${redirectTo}'. Cannot find '${redirectToUrlSegment.path}'.`);\n    return pos;\n  }\n  findOrReturn(redirectToUrlSegment, actualSegments) {\n    let idx = 0;\n    for (const s of actualSegments) {\n      if (s.path === redirectToUrlSegment.path) {\n        actualSegments.splice(idx);\n        return s;\n      }\n      idx++;\n    }\n    return redirectToUrlSegment;\n  }\n}\nconst noMatch = {\n  matched: false,\n  consumedSegments: [],\n  remainingSegments: [],\n  parameters: {},\n  positionalParamSegments: {}\n};\nfunction matchWithChecks(segmentGroup, route, segments, injector, urlSerializer) {\n  const result = match(segmentGroup, route, segments);\n  if (!result.matched) {\n    return of(result);\n  }\n  // Only create the Route's `EnvironmentInjector` if it matches the attempted\n  // navigation\n  injector = getOrCreateRouteInjectorIfNeeded(route, injector);\n  return runCanMatchGuards(injector, route, segments, urlSerializer).pipe(map(v => v === true ? result : {\n    ...noMatch\n  }));\n}\nfunction match(segmentGroup, route, segments) {\n  var _res$posParams, _res$posParams2;\n  if (route.path === '**') {\n    return createWildcardMatchResult(segments);\n  }\n  if (route.path === '') {\n    if (route.pathMatch === 'full' && (segmentGroup.hasChildren() || segments.length > 0)) {\n      return {\n        ...noMatch\n      };\n    }\n    return {\n      matched: true,\n      consumedSegments: [],\n      remainingSegments: segments,\n      parameters: {},\n      positionalParamSegments: {}\n    };\n  }\n  const matcher = route.matcher || defaultUrlMatcher;\n  const res = matcher(segments, segmentGroup, route);\n  if (!res) return {\n    ...noMatch\n  };\n  const posParams = {};\n  Object.entries((_res$posParams = res.posParams) !== null && _res$posParams !== void 0 ? _res$posParams : {}).forEach(([k, v]) => {\n    posParams[k] = v.path;\n  });\n  const parameters = res.consumed.length > 0 ? {\n    ...posParams,\n    ...res.consumed[res.consumed.length - 1].parameters\n  } : posParams;\n  return {\n    matched: true,\n    consumedSegments: res.consumed,\n    remainingSegments: segments.slice(res.consumed.length),\n    // TODO(atscott): investigate combining parameters and positionalParamSegments\n    parameters,\n    positionalParamSegments: (_res$posParams2 = res.posParams) !== null && _res$posParams2 !== void 0 ? _res$posParams2 : {}\n  };\n}\nfunction createWildcardMatchResult(segments) {\n  return {\n    matched: true,\n    parameters: segments.length > 0 ? last(segments).parameters : {},\n    consumedSegments: segments,\n    remainingSegments: [],\n    positionalParamSegments: {}\n  };\n}\nfunction split(segmentGroup, consumedSegments, slicedSegments, config) {\n  if (slicedSegments.length > 0 && containsEmptyPathMatchesWithNamedOutlets(segmentGroup, slicedSegments, config)) {\n    const s = new UrlSegmentGroup(consumedSegments, createChildrenForEmptyPaths(config, new UrlSegmentGroup(slicedSegments, segmentGroup.children)));\n    return {\n      segmentGroup: s,\n      slicedSegments: []\n    };\n  }\n  if (slicedSegments.length === 0 && containsEmptyPathMatches(segmentGroup, slicedSegments, config)) {\n    const s = new UrlSegmentGroup(segmentGroup.segments, addEmptyPathsToChildrenIfNeeded(segmentGroup, slicedSegments, config, segmentGroup.children));\n    return {\n      segmentGroup: s,\n      slicedSegments\n    };\n  }\n  const s = new UrlSegmentGroup(segmentGroup.segments, segmentGroup.children);\n  return {\n    segmentGroup: s,\n    slicedSegments\n  };\n}\nfunction addEmptyPathsToChildrenIfNeeded(segmentGroup, slicedSegments, routes, children) {\n  const res = {};\n  for (const r of routes) {\n    if (emptyPathMatch(segmentGroup, slicedSegments, r) && !children[getOutlet(r)]) {\n      const s = new UrlSegmentGroup([], {});\n      res[getOutlet(r)] = s;\n    }\n  }\n  return {\n    ...children,\n    ...res\n  };\n}\nfunction createChildrenForEmptyPaths(routes, primarySegment) {\n  const res = {};\n  res[PRIMARY_OUTLET] = primarySegment;\n  for (const r of routes) {\n    if (r.path === '' && getOutlet(r) !== PRIMARY_OUTLET) {\n      const s = new UrlSegmentGroup([], {});\n      res[getOutlet(r)] = s;\n    }\n  }\n  return res;\n}\nfunction containsEmptyPathMatchesWithNamedOutlets(segmentGroup, slicedSegments, routes) {\n  return routes.some(r => emptyPathMatch(segmentGroup, slicedSegments, r) && getOutlet(r) !== PRIMARY_OUTLET);\n}\nfunction containsEmptyPathMatches(segmentGroup, slicedSegments, routes) {\n  return routes.some(r => emptyPathMatch(segmentGroup, slicedSegments, r));\n}\nfunction emptyPathMatch(segmentGroup, slicedSegments, r) {\n  if ((segmentGroup.hasChildren() || slicedSegments.length > 0) && r.pathMatch === 'full') {\n    return false;\n  }\n  return r.path === '';\n}\nfunction noLeftoversInUrl(segmentGroup, segments, outlet) {\n  return segments.length === 0 && !segmentGroup.children[outlet];\n}\n\n/**\n * Class used to indicate there were no additional route config matches but that all segments of\n * the URL were consumed during matching so the route was URL matched. When this happens, we still\n * try to match child configs in case there are empty path children.\n */\nclass NoLeftoversInUrl {}\nfunction recognize$1(injector, configLoader, rootComponentType, config, urlTree, urlSerializer, paramsInheritanceStrategy = 'emptyOnly') {\n  return new Recognizer(injector, configLoader, rootComponentType, config, urlTree, paramsInheritanceStrategy, urlSerializer).recognize();\n}\nconst MAX_ALLOWED_REDIRECTS = 31;\nclass Recognizer {\n  constructor(injector, configLoader, rootComponentType, config, urlTree, paramsInheritanceStrategy, urlSerializer) {\n    _defineProperty(this, \"injector\", void 0);\n    _defineProperty(this, \"configLoader\", void 0);\n    _defineProperty(this, \"rootComponentType\", void 0);\n    _defineProperty(this, \"config\", void 0);\n    _defineProperty(this, \"urlTree\", void 0);\n    _defineProperty(this, \"paramsInheritanceStrategy\", void 0);\n    _defineProperty(this, \"urlSerializer\", void 0);\n    _defineProperty(this, \"applyRedirects\", void 0);\n    _defineProperty(this, \"absoluteRedirectCount\", 0);\n    _defineProperty(this, \"allowRedirects\", true);\n    this.injector = injector;\n    this.configLoader = configLoader;\n    this.rootComponentType = rootComponentType;\n    this.config = config;\n    this.urlTree = urlTree;\n    this.paramsInheritanceStrategy = paramsInheritanceStrategy;\n    this.urlSerializer = urlSerializer;\n    this.applyRedirects = new ApplyRedirects(this.urlSerializer, this.urlTree);\n  }\n  noMatchError(e) {\n    return new _RuntimeError(4002 /* RuntimeErrorCode.NO_MATCH */, typeof ngDevMode === 'undefined' || ngDevMode ? `Cannot match any routes. URL Segment: '${e.segmentGroup}'` : `'${e.segmentGroup}'`);\n  }\n  recognize() {\n    const rootSegmentGroup = split(this.urlTree.root, [], [], this.config).segmentGroup;\n    return this.match(rootSegmentGroup).pipe(map(({\n      children,\n      rootSnapshot\n    }) => {\n      const rootNode = new TreeNode(rootSnapshot, children);\n      const routeState = new RouterStateSnapshot('', rootNode);\n      const tree = createUrlTreeFromSnapshot(rootSnapshot, [], this.urlTree.queryParams, this.urlTree.fragment);\n      // https://github.com/angular/angular/issues/47307\n      // Creating the tree stringifies the query params\n      // We don't want to do this here so reassign them to the original.\n      tree.queryParams = this.urlTree.queryParams;\n      routeState.url = this.urlSerializer.serialize(tree);\n      return {\n        state: routeState,\n        tree\n      };\n    }));\n  }\n  match(rootSegmentGroup) {\n    // Use Object.freeze to prevent readers of the Router state from modifying it outside\n    // of a navigation, resulting in the router being out of sync with the browser.\n    const rootSnapshot = new ActivatedRouteSnapshot([], Object.freeze({}), Object.freeze({\n      ...this.urlTree.queryParams\n    }), this.urlTree.fragment, Object.freeze({}), PRIMARY_OUTLET, this.rootComponentType, null, {});\n    return this.processSegmentGroup(this.injector, this.config, rootSegmentGroup, PRIMARY_OUTLET, rootSnapshot).pipe(map(children => {\n      return {\n        children,\n        rootSnapshot\n      };\n    }), catchError(e => {\n      if (e instanceof AbsoluteRedirect) {\n        this.urlTree = e.urlTree;\n        return this.match(e.urlTree.root);\n      }\n      if (e instanceof NoMatch) {\n        throw this.noMatchError(e);\n      }\n      throw e;\n    }));\n  }\n  processSegmentGroup(injector, config, segmentGroup, outlet, parentRoute) {\n    if (segmentGroup.segments.length === 0 && segmentGroup.hasChildren()) {\n      return this.processChildren(injector, config, segmentGroup, parentRoute);\n    }\n    return this.processSegment(injector, config, segmentGroup, segmentGroup.segments, outlet, true, parentRoute).pipe(map(child => child instanceof TreeNode ? [child] : []));\n  }\n  /**\n   * Matches every child outlet in the `segmentGroup` to a `Route` in the config. Returns `null` if\n   * we cannot find a match for _any_ of the children.\n   *\n   * @param config - The `Routes` to match against\n   * @param segmentGroup - The `UrlSegmentGroup` whose children need to be matched against the\n   *     config.\n   */\n  processChildren(injector, config, segmentGroup, parentRoute) {\n    // Expand outlets one at a time, starting with the primary outlet. We need to do it this way\n    // because an absolute redirect from the primary outlet takes precedence.\n    const childOutlets = [];\n    for (const child of Object.keys(segmentGroup.children)) {\n      if (child === 'primary') {\n        childOutlets.unshift(child);\n      } else {\n        childOutlets.push(child);\n      }\n    }\n    return from(childOutlets).pipe(concatMap(childOutlet => {\n      const child = segmentGroup.children[childOutlet];\n      // Sort the config so that routes with outlets that match the one being activated\n      // appear first, followed by routes for other outlets, which might match if they have\n      // an empty path.\n      const sortedConfig = sortByMatchingOutlets(config, childOutlet);\n      return this.processSegmentGroup(injector, sortedConfig, child, childOutlet, parentRoute);\n    }), scan((children, outletChildren) => {\n      children.push(...outletChildren);\n      return children;\n    }), defaultIfEmpty(null), last$1(), mergeMap(children => {\n      if (children === null) return noMatch$1(segmentGroup);\n      // Because we may have matched two outlets to the same empty path segment, we can have\n      // multiple activated results for the same outlet. We should merge the children of\n      // these results so the final return value is only one `TreeNode` per outlet.\n      const mergedChildren = mergeEmptyPathMatches(children);\n      if (typeof ngDevMode === 'undefined' || ngDevMode) {\n        // This should really never happen - we are only taking the first match for each\n        // outlet and merge the empty path matches.\n        checkOutletNameUniqueness(mergedChildren);\n      }\n      sortActivatedRouteSnapshots(mergedChildren);\n      return of(mergedChildren);\n    }));\n  }\n  processSegment(injector, routes, segmentGroup, segments, outlet, allowRedirects, parentRoute) {\n    return from(routes).pipe(concatMap(r => {\n      var _r$_injector;\n      return this.processSegmentAgainstRoute((_r$_injector = r._injector) !== null && _r$_injector !== void 0 ? _r$_injector : injector, routes, r, segmentGroup, segments, outlet, allowRedirects, parentRoute).pipe(catchError(e => {\n        if (e instanceof NoMatch) {\n          return of(null);\n        }\n        throw e;\n      }));\n    }), first(x => !!x), catchError(e => {\n      if (isEmptyError(e)) {\n        if (noLeftoversInUrl(segmentGroup, segments, outlet)) {\n          return of(new NoLeftoversInUrl());\n        }\n        return noMatch$1(segmentGroup);\n      }\n      throw e;\n    }));\n  }\n  processSegmentAgainstRoute(injector, routes, route, rawSegment, segments, outlet, allowRedirects, parentRoute) {\n    // We allow matches to empty paths when the outlets differ so we can match a url like `/(b:b)` to\n    // a config like\n    // * `{path: '', children: [{path: 'b', outlet: 'b'}]}`\n    // or even\n    // * `{path: '', outlet: 'a', children: [{path: 'b', outlet: 'b'}]`\n    //\n    // The exception here is when the segment outlet is for the primary outlet. This would\n    // result in a match inside the named outlet because all children there are written as primary\n    // outlets. So we need to prevent child named outlet matches in a url like `/b` in a config like\n    // * `{path: '', outlet: 'x' children: [{path: 'b'}]}`\n    // This should only match if the url is `/(x:b)`.\n    if (getOutlet(route) !== outlet && (outlet === PRIMARY_OUTLET || !emptyPathMatch(rawSegment, segments, route))) {\n      return noMatch$1(rawSegment);\n    }\n    if (route.redirectTo === undefined) {\n      return this.matchSegmentAgainstRoute(injector, rawSegment, route, segments, outlet, parentRoute);\n    }\n    if (this.allowRedirects && allowRedirects) {\n      return this.expandSegmentAgainstRouteUsingRedirect(injector, rawSegment, routes, route, segments, outlet, parentRoute);\n    }\n    return noMatch$1(rawSegment);\n  }\n  expandSegmentAgainstRouteUsingRedirect(injector, segmentGroup, routes, route, segments, outlet, parentRoute) {\n    var _ref, _route$component;\n    const {\n      matched,\n      parameters,\n      consumedSegments,\n      positionalParamSegments,\n      remainingSegments\n    } = match(segmentGroup, route, segments);\n    if (!matched) return noMatch$1(segmentGroup);\n    // TODO(atscott): Move all of this under an if(ngDevMode) as a breaking change and allow stack\n    // size exceeded in production\n    if (typeof route.redirectTo === 'string' && route.redirectTo[0] === '/') {\n      this.absoluteRedirectCount++;\n      if (this.absoluteRedirectCount > MAX_ALLOWED_REDIRECTS) {\n        if (ngDevMode) {\n          throw new _RuntimeError(4016 /* RuntimeErrorCode.INFINITE_REDIRECT */, `Detected possible infinite redirect when redirecting from '${this.urlTree}' to '${route.redirectTo}'.\\n` + `This is currently a dev mode only error but will become a` + ` call stack size exceeded error in production in a future major version.`);\n        }\n        this.allowRedirects = false;\n      }\n    }\n    const currentSnapshot = new ActivatedRouteSnapshot(segments, parameters, Object.freeze({\n      ...this.urlTree.queryParams\n    }), this.urlTree.fragment, getData(route), getOutlet(route), (_ref = (_route$component = route.component) !== null && _route$component !== void 0 ? _route$component : route._loadedComponent) !== null && _ref !== void 0 ? _ref : null, route, getResolve(route));\n    const inherited = getInherited(currentSnapshot, parentRoute, this.paramsInheritanceStrategy);\n    currentSnapshot.params = Object.freeze(inherited.params);\n    currentSnapshot.data = Object.freeze(inherited.data);\n    const newTree = this.applyRedirects.applyRedirectCommands(consumedSegments, route.redirectTo, positionalParamSegments, currentSnapshot, injector);\n    return this.applyRedirects.lineralizeSegments(route, newTree).pipe(mergeMap(newSegments => {\n      return this.processSegment(injector, routes, segmentGroup, newSegments.concat(remainingSegments), outlet, false, parentRoute);\n    }));\n  }\n  matchSegmentAgainstRoute(injector, rawSegment, route, segments, outlet, parentRoute) {\n    const matchResult = matchWithChecks(rawSegment, route, segments, injector, this.urlSerializer);\n    if (route.path === '**') {\n      // Prior versions of the route matching algorithm would stop matching at the wildcard route.\n      // We should investigate a better strategy for any existing children. Otherwise, these\n      // child segments are silently dropped from the navigation.\n      // https://github.com/angular/angular/issues/40089\n      rawSegment.children = {};\n    }\n    return matchResult.pipe(switchMap(result => {\n      var _route$_injector2;\n      if (!result.matched) {\n        return noMatch$1(rawSegment);\n      }\n      // If the route has an injector created from providers, we should start using that.\n      injector = (_route$_injector2 = route._injector) !== null && _route$_injector2 !== void 0 ? _route$_injector2 : injector;\n      return this.getChildConfig(injector, route, segments).pipe(switchMap(({\n        routes: childConfig\n      }) => {\n        var _route$_loadedInjecto, _ref2, _route$component2;\n        const childInjector = (_route$_loadedInjecto = route._loadedInjector) !== null && _route$_loadedInjecto !== void 0 ? _route$_loadedInjecto : injector;\n        const {\n          parameters,\n          consumedSegments,\n          remainingSegments\n        } = result;\n        const snapshot = new ActivatedRouteSnapshot(consumedSegments, parameters, Object.freeze({\n          ...this.urlTree.queryParams\n        }), this.urlTree.fragment, getData(route), getOutlet(route), (_ref2 = (_route$component2 = route.component) !== null && _route$component2 !== void 0 ? _route$component2 : route._loadedComponent) !== null && _ref2 !== void 0 ? _ref2 : null, route, getResolve(route));\n        const inherited = getInherited(snapshot, parentRoute, this.paramsInheritanceStrategy);\n        snapshot.params = Object.freeze(inherited.params);\n        snapshot.data = Object.freeze(inherited.data);\n        const {\n          segmentGroup,\n          slicedSegments\n        } = split(rawSegment, consumedSegments, remainingSegments, childConfig);\n        if (slicedSegments.length === 0 && segmentGroup.hasChildren()) {\n          return this.processChildren(childInjector, childConfig, segmentGroup, snapshot).pipe(map(children => {\n            return new TreeNode(snapshot, children);\n          }));\n        }\n        if (childConfig.length === 0 && slicedSegments.length === 0) {\n          return of(new TreeNode(snapshot, []));\n        }\n        const matchedOnOutlet = getOutlet(route) === outlet;\n        // If we matched a config due to empty path match on a different outlet, we need to\n        // continue passing the current outlet for the segment rather than switch to PRIMARY.\n        // Note that we switch to primary when we have a match because outlet configs look like\n        // this: {path: 'a', outlet: 'a', children: [\n        //  {path: 'b', component: B},\n        //  {path: 'c', component: C},\n        // ]}\n        // Notice that the children of the named outlet are configured with the primary outlet\n        return this.processSegment(childInjector, childConfig, segmentGroup, slicedSegments, matchedOnOutlet ? PRIMARY_OUTLET : outlet, true, snapshot).pipe(map(child => {\n          return new TreeNode(snapshot, child instanceof TreeNode ? [child] : []);\n        }));\n      }));\n    }));\n  }\n  getChildConfig(injector, route, segments) {\n    if (route.children) {\n      // The children belong to the same module\n      return of({\n        routes: route.children,\n        injector\n      });\n    }\n    if (route.loadChildren) {\n      // lazy children belong to the loaded module\n      if (route._loadedRoutes !== undefined) {\n        return of({\n          routes: route._loadedRoutes,\n          injector: route._loadedInjector\n        });\n      }\n      return runCanLoadGuards(injector, route, segments, this.urlSerializer).pipe(mergeMap(shouldLoadResult => {\n        if (shouldLoadResult) {\n          return this.configLoader.loadChildren(injector, route).pipe(tap(cfg => {\n            route._loadedRoutes = cfg.routes;\n            route._loadedInjector = cfg.injector;\n          }));\n        }\n        return canLoadFails(route);\n      }));\n    }\n    return of({\n      routes: [],\n      injector\n    });\n  }\n}\nfunction sortActivatedRouteSnapshots(nodes) {\n  nodes.sort((a, b) => {\n    if (a.value.outlet === PRIMARY_OUTLET) return -1;\n    if (b.value.outlet === PRIMARY_OUTLET) return 1;\n    return a.value.outlet.localeCompare(b.value.outlet);\n  });\n}\nfunction hasEmptyPathConfig(node) {\n  const config = node.value.routeConfig;\n  return config && config.path === '';\n}\n/**\n * Finds `TreeNode`s with matching empty path route configs and merges them into `TreeNode` with\n * the children from each duplicate. This is necessary because different outlets can match a\n * single empty path route config and the results need to then be merged.\n */\nfunction mergeEmptyPathMatches(nodes) {\n  const result = [];\n  // The set of nodes which contain children that were merged from two duplicate empty path nodes.\n  const mergedNodes = new Set();\n  for (const node of nodes) {\n    if (!hasEmptyPathConfig(node)) {\n      result.push(node);\n      continue;\n    }\n    const duplicateEmptyPathNode = result.find(resultNode => node.value.routeConfig === resultNode.value.routeConfig);\n    if (duplicateEmptyPathNode !== undefined) {\n      duplicateEmptyPathNode.children.push(...node.children);\n      mergedNodes.add(duplicateEmptyPathNode);\n    } else {\n      result.push(node);\n    }\n  }\n  // For each node which has children from multiple sources, we need to recompute a new `TreeNode`\n  // by also merging those children. This is necessary when there are multiple empty path configs\n  // in a row. Put another way: whenever we combine children of two nodes, we need to also check\n  // if any of those children can be combined into a single node as well.\n  for (const mergedNode of mergedNodes) {\n    const mergedChildren = mergeEmptyPathMatches(mergedNode.children);\n    result.push(new TreeNode(mergedNode.value, mergedChildren));\n  }\n  return result.filter(n => !mergedNodes.has(n));\n}\nfunction checkOutletNameUniqueness(nodes) {\n  const names = {};\n  nodes.forEach(n => {\n    const routeWithSameOutletName = names[n.value.outlet];\n    if (routeWithSameOutletName) {\n      const p = routeWithSameOutletName.url.map(s => s.toString()).join('/');\n      const c = n.value.url.map(s => s.toString()).join('/');\n      throw new _RuntimeError(4006 /* RuntimeErrorCode.TWO_SEGMENTS_WITH_SAME_OUTLET */, (typeof ngDevMode === 'undefined' || ngDevMode) && `Two segments cannot have the same outlet name: '${p}' and '${c}'.`);\n    }\n    names[n.value.outlet] = n.value;\n  });\n}\nfunction getData(route) {\n  return route.data || {};\n}\nfunction getResolve(route) {\n  return route.resolve || {};\n}\nfunction recognize(injector, configLoader, rootComponentType, config, serializer, paramsInheritanceStrategy) {\n  return mergeMap(t => recognize$1(injector, configLoader, rootComponentType, config, t.extractedUrl, serializer, paramsInheritanceStrategy).pipe(map(({\n    state: targetSnapshot,\n    tree: urlAfterRedirects\n  }) => {\n    return {\n      ...t,\n      targetSnapshot,\n      urlAfterRedirects\n    };\n  })));\n}\nfunction resolveData(paramsInheritanceStrategy, injector) {\n  return mergeMap(t => {\n    const {\n      targetSnapshot,\n      guards: {\n        canActivateChecks\n      }\n    } = t;\n    if (!canActivateChecks.length) {\n      return of(t);\n    }\n    // Iterating a Set in javascript  happens in insertion order so it is safe to use a `Set` to\n    // preserve the correct order that the resolvers should run in.\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set#description\n    const routesWithResolversToRun = new Set(canActivateChecks.map(check => check.route));\n    const routesNeedingDataUpdates = new Set();\n    for (const route of routesWithResolversToRun) {\n      if (routesNeedingDataUpdates.has(route)) {\n        continue;\n      }\n      // All children under the route with a resolver to run need to recompute inherited data.\n      for (const newRoute of flattenRouteTree(route)) {\n        routesNeedingDataUpdates.add(newRoute);\n      }\n    }\n    let routesProcessed = 0;\n    return from(routesNeedingDataUpdates).pipe(concatMap(route => {\n      if (routesWithResolversToRun.has(route)) {\n        return runResolve(route, targetSnapshot, paramsInheritanceStrategy, injector);\n      } else {\n        route.data = getInherited(route, route.parent, paramsInheritanceStrategy).resolve;\n        return of(void 0);\n      }\n    }), tap(() => routesProcessed++), takeLast(1), mergeMap(_ => routesProcessed === routesNeedingDataUpdates.size ? of(t) : EMPTY));\n  });\n}\n/**\n *  Returns the `ActivatedRouteSnapshot` tree as an array, using DFS to traverse the route tree.\n */\nfunction flattenRouteTree(route) {\n  const descendants = route.children.map(child => flattenRouteTree(child)).flat();\n  return [route, ...descendants];\n}\nfunction runResolve(futureARS, futureRSS, paramsInheritanceStrategy, injector) {\n  const config = futureARS.routeConfig;\n  const resolve = futureARS._resolve;\n  if ((config === null || config === void 0 ? void 0 : config.title) !== undefined && !hasStaticTitle(config)) {\n    resolve[RouteTitleKey] = config.title;\n  }\n  return resolveNode(resolve, futureARS, futureRSS, injector).pipe(map(resolvedData => {\n    futureARS._resolvedData = resolvedData;\n    futureARS.data = getInherited(futureARS, futureARS.parent, paramsInheritanceStrategy).resolve;\n    return null;\n  }));\n}\nfunction resolveNode(resolve, futureARS, futureRSS, injector) {\n  const keys = getDataKeys(resolve);\n  if (keys.length === 0) {\n    return of({});\n  }\n  const data = {};\n  return from(keys).pipe(mergeMap(key => getResolver(resolve[key], futureARS, futureRSS, injector).pipe(first(), tap(value => {\n    if (value instanceof RedirectCommand) {\n      throw redirectingNavigationError(new DefaultUrlSerializer(), value);\n    }\n    data[key] = value;\n  }))), takeLast(1), map(() => data), catchError(e => isEmptyError(e) ? EMPTY : throwError(e)));\n}\nfunction getResolver(injectionToken, futureARS, futureRSS, injector) {\n  var _getClosestRouteInjec5;\n  const closestInjector = (_getClosestRouteInjec5 = getClosestRouteInjector(futureARS)) !== null && _getClosestRouteInjec5 !== void 0 ? _getClosestRouteInjec5 : injector;\n  const resolver = getTokenOrFunctionIdentity(injectionToken, closestInjector);\n  const resolverValue = resolver.resolve ? resolver.resolve(futureARS, futureRSS) : runInInjectionContext(closestInjector, () => resolver(futureARS, futureRSS));\n  return wrapIntoObservable(resolverValue);\n}\n\n/**\n * Perform a side effect through a switchMap for every emission on the source Observable,\n * but return an Observable that is identical to the source. It's essentially the same as\n * the `tap` operator, but if the side effectful `next` function returns an ObservableInput,\n * it will wait before continuing with the original value.\n */\nfunction switchTap(next) {\n  return switchMap(v => {\n    const nextResult = next(v);\n    if (nextResult) {\n      return from(nextResult).pipe(map(() => v));\n    }\n    return of(v);\n  });\n}\n\n/**\n * Provides a strategy for setting the page title after a router navigation.\n *\n * The built-in implementation traverses the router state snapshot and finds the deepest primary\n * outlet with `title` property. Given the `Routes` below, navigating to\n * `/base/child(popup:aux)` would result in the document title being set to \"child\".\n * ```ts\n * [\n *   {path: 'base', title: 'base', children: [\n *     {path: 'child', title: 'child'},\n *   ],\n *   {path: 'aux', outlet: 'popup', title: 'popupTitle'}\n * ]\n * ```\n *\n * This class can be used as a base class for custom title strategies. That is, you can create your\n * own class that extends the `TitleStrategy`. Note that in the above example, the `title`\n * from the named outlet is never used. However, a custom strategy might be implemented to\n * incorporate titles in named outlets.\n *\n * @publicApi\n * @see [Page title guide](guide/routing/common-router-tasks#setting-the-page-title)\n */\nclass TitleStrategy {\n  /**\n   * @returns The `title` of the deepest primary route.\n   */\n  buildTitle(snapshot) {\n    let pageTitle;\n    let route = snapshot.root;\n    while (route !== undefined) {\n      var _this$getResolvedTitl;\n      pageTitle = (_this$getResolvedTitl = this.getResolvedTitleForRoute(route)) !== null && _this$getResolvedTitl !== void 0 ? _this$getResolvedTitl : pageTitle;\n      route = route.children.find(child => child.outlet === PRIMARY_OUTLET);\n    }\n    return pageTitle;\n  }\n  /**\n   * Given an `ActivatedRouteSnapshot`, returns the final value of the\n   * `Route.title` property, which can either be a static string or a resolved value.\n   */\n  getResolvedTitleForRoute(snapshot) {\n    return snapshot.data[RouteTitleKey];\n  }\n}\n_TitleStrategy = TitleStrategy;\n_defineProperty(TitleStrategy, \"\\u0275fac\", function _TitleStrategy_Factory(__ngFactoryType__) {\n  return new (__ngFactoryType__ || _TitleStrategy)();\n});\n_defineProperty(TitleStrategy, \"\\u0275prov\", /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: _TitleStrategy,\n  factory: () => (() => inject(DefaultTitleStrategy))(),\n  providedIn: 'root'\n}));\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TitleStrategy, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root',\n      useFactory: () => inject(DefaultTitleStrategy)\n    }]\n  }], null, null);\n})();\n/**\n * The default `TitleStrategy` used by the router that updates the title using the `Title` service.\n */\nclass DefaultTitleStrategy extends TitleStrategy {\n  constructor(title) {\n    super();\n    _defineProperty(this, \"title\", void 0);\n    this.title = title;\n  }\n  /**\n   * Sets the title of the browser to the given value.\n   *\n   * @param title The `pageTitle` from the deepest primary route.\n   */\n  updateTitle(snapshot) {\n    const title = this.buildTitle(snapshot);\n    if (title !== undefined) {\n      this.title.setTitle(title);\n    }\n  }\n}\n_DefaultTitleStrategy = DefaultTitleStrategy;\n_defineProperty(DefaultTitleStrategy, \"\\u0275fac\", function _DefaultTitleStrategy_Factory(__ngFactoryType__) {\n  return new (__ngFactoryType__ || _DefaultTitleStrategy)(i0.ɵɵinject(i1.Title));\n});\n_defineProperty(DefaultTitleStrategy, \"\\u0275prov\", /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: _DefaultTitleStrategy,\n  factory: _DefaultTitleStrategy.ɵfac,\n  providedIn: 'root'\n}));\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(DefaultTitleStrategy, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], () => [{\n    type: i1.Title\n  }], null);\n})();\n\n/**\n * A DI token for the router service.\n *\n * @publicApi\n */\nconst ROUTER_CONFIGURATION = new InjectionToken(typeof ngDevMode === 'undefined' || ngDevMode ? 'router config' : '', {\n  providedIn: 'root',\n  factory: () => ({})\n});\n\n/**\n * This component is used internally within the router to be a placeholder when an empty\n * router-outlet is needed. For example, with a config such as:\n *\n * `{path: 'parent', outlet: 'nav', children: [...]}`\n *\n * In order to render, there needs to be a component on this config, which will default\n * to this `EmptyOutletComponent`.\n */\nclass ɵEmptyOutletComponent {}\n_ɵEmptyOutletComponent = ɵEmptyOutletComponent;\n_defineProperty(ɵEmptyOutletComponent, \"\\u0275fac\", function _ɵEmptyOutletComponent_Factory(__ngFactoryType__) {\n  return new (__ngFactoryType__ || _ɵEmptyOutletComponent)();\n});\n_defineProperty(ɵEmptyOutletComponent, \"\\u0275cmp\", /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: _ɵEmptyOutletComponent,\n  selectors: [[\"ng-component\"]],\n  exportAs: [\"emptyRouterOutlet\"],\n  decls: 1,\n  vars: 0,\n  template: function __EmptyOutletComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelement(0, \"router-outlet\");\n    }\n  },\n  dependencies: [RouterOutlet],\n  encapsulation: 2\n}));\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ɵEmptyOutletComponent, [{\n    type: Component,\n    args: [{\n      template: `<router-outlet/>`,\n      imports: [RouterOutlet],\n      // Used to avoid component ID collisions with user code.\n      exportAs: 'emptyRouterOutlet'\n    }]\n  }], null, null);\n})();\n/**\n * Makes a copy of the config and adds any default required properties.\n */\nfunction standardizeConfig(r) {\n  const children = r.children && r.children.map(standardizeConfig);\n  const c = children ? {\n    ...r,\n    children\n  } : {\n    ...r\n  };\n  if (!c.component && !c.loadComponent && (children || c.loadChildren) && c.outlet && c.outlet !== PRIMARY_OUTLET) {\n    c.component = ɵEmptyOutletComponent;\n  }\n  return c;\n}\n\n/**\n * The DI token for a router configuration.\n *\n * `ROUTES` is a low level API for router configuration via dependency injection.\n *\n * We recommend that in almost all cases to use higher level APIs such as `RouterModule.forRoot()`,\n * `provideRouter`, or `Router.resetConfig()`.\n *\n * @publicApi\n */\nconst ROUTES = new InjectionToken(ngDevMode ? 'ROUTES' : '');\nclass RouterConfigLoader {\n  constructor() {\n    _defineProperty(this, \"componentLoaders\", new WeakMap());\n    _defineProperty(this, \"childrenLoaders\", new WeakMap());\n    _defineProperty(this, \"onLoadStartListener\", void 0);\n    _defineProperty(this, \"onLoadEndListener\", void 0);\n    _defineProperty(this, \"compiler\", inject(Compiler));\n  }\n  loadComponent(route) {\n    if (this.componentLoaders.get(route)) {\n      return this.componentLoaders.get(route);\n    } else if (route._loadedComponent) {\n      return of(route._loadedComponent);\n    }\n    if (this.onLoadStartListener) {\n      this.onLoadStartListener(route);\n    }\n    const loadRunner = wrapIntoObservable(route.loadComponent()).pipe(map(maybeUnwrapDefaultExport), tap(component => {\n      var _route$path;\n      if (this.onLoadEndListener) {\n        this.onLoadEndListener(route);\n      }\n      (typeof ngDevMode === 'undefined' || ngDevMode) && assertStandalone((_route$path = route.path) !== null && _route$path !== void 0 ? _route$path : '', component);\n      route._loadedComponent = component;\n    }), finalize(() => {\n      this.componentLoaders.delete(route);\n    }));\n    // Use custom ConnectableObservable as share in runners pipe increasing the bundle size too much\n    const loader = new ConnectableObservable(loadRunner, () => new Subject()).pipe(refCount());\n    this.componentLoaders.set(route, loader);\n    return loader;\n  }\n  loadChildren(parentInjector, route) {\n    if (this.childrenLoaders.get(route)) {\n      return this.childrenLoaders.get(route);\n    } else if (route._loadedRoutes) {\n      return of({\n        routes: route._loadedRoutes,\n        injector: route._loadedInjector\n      });\n    }\n    if (this.onLoadStartListener) {\n      this.onLoadStartListener(route);\n    }\n    const moduleFactoryOrRoutes$ = loadChildren(route, this.compiler, parentInjector, this.onLoadEndListener);\n    const loadRunner = moduleFactoryOrRoutes$.pipe(finalize(() => {\n      this.childrenLoaders.delete(route);\n    }));\n    // Use custom ConnectableObservable as share in runners pipe increasing the bundle size too much\n    const loader = new ConnectableObservable(loadRunner, () => new Subject()).pipe(refCount());\n    this.childrenLoaders.set(route, loader);\n    return loader;\n  }\n}\n_RouterConfigLoader = RouterConfigLoader;\n_defineProperty(RouterConfigLoader, \"\\u0275fac\", function _RouterConfigLoader_Factory(__ngFactoryType__) {\n  return new (__ngFactoryType__ || _RouterConfigLoader)();\n});\n_defineProperty(RouterConfigLoader, \"\\u0275prov\", /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: _RouterConfigLoader,\n  factory: _RouterConfigLoader.ɵfac,\n  providedIn: 'root'\n}));\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RouterConfigLoader, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], null, null);\n})();\n/**\n * Executes a `route.loadChildren` callback and converts the result to an array of child routes and\n * an injector if that callback returned a module.\n *\n * This function is used for the route discovery during prerendering\n * in @angular-devkit/build-angular. If there are any updates to the contract here, it will require\n * an update to the extractor.\n */\nfunction loadChildren(route, compiler, parentInjector, onLoadEndListener) {\n  return wrapIntoObservable(route.loadChildren()).pipe(map(maybeUnwrapDefaultExport), mergeMap(t => {\n    if (t instanceof NgModuleFactory || Array.isArray(t)) {\n      return of(t);\n    } else {\n      return from(compiler.compileModuleAsync(t));\n    }\n  }), map(factoryOrRoutes => {\n    if (onLoadEndListener) {\n      onLoadEndListener(route);\n    }\n    // This injector comes from the `NgModuleRef` when lazy loading an `NgModule`. There is\n    // no injector associated with lazy loading a `Route` array.\n    let injector;\n    let rawRoutes;\n    let requireStandaloneComponents = false;\n    if (Array.isArray(factoryOrRoutes)) {\n      rawRoutes = factoryOrRoutes;\n      requireStandaloneComponents = true;\n    } else {\n      injector = factoryOrRoutes.create(parentInjector).injector;\n      // When loading a module that doesn't provide `RouterModule.forChild()` preloader\n      // will get stuck in an infinite loop. The child module's Injector will look to\n      // its parent `Injector` when it doesn't find any ROUTES so it will return routes\n      // for it's parent module instead.\n      rawRoutes = injector.get(ROUTES, [], {\n        optional: true,\n        self: true\n      }).flat();\n    }\n    const routes = rawRoutes.map(standardizeConfig);\n    (typeof ngDevMode === 'undefined' || ngDevMode) && validateConfig(routes, route.path, requireStandaloneComponents);\n    return {\n      routes,\n      injector\n    };\n  }));\n}\nfunction isWrappedDefaultExport(value) {\n  // We use `in` here with a string key `'default'`, because we expect `DefaultExport` objects to be\n  // dynamically imported ES modules with a spec-mandated `default` key. Thus we don't expect that\n  // `default` will be a renamed property.\n  return value && typeof value === 'object' && 'default' in value;\n}\nfunction maybeUnwrapDefaultExport(input) {\n  // As per `isWrappedDefaultExport`, the `default` key here is generated by the browser and not\n  // subject to property renaming, so we reference it with bracket access.\n  return isWrappedDefaultExport(input) ? input['default'] : input;\n}\n\n/**\n * @description\n *\n * Provides a way to migrate AngularJS applications to Angular.\n *\n * @publicApi\n */\nclass UrlHandlingStrategy {}\n_UrlHandlingStrategy = UrlHandlingStrategy;\n_defineProperty(UrlHandlingStrategy, \"\\u0275fac\", function _UrlHandlingStrategy_Factory(__ngFactoryType__) {\n  return new (__ngFactoryType__ || _UrlHandlingStrategy)();\n});\n_defineProperty(UrlHandlingStrategy, \"\\u0275prov\", /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: _UrlHandlingStrategy,\n  factory: () => (() => inject(DefaultUrlHandlingStrategy))(),\n  providedIn: 'root'\n}));\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(UrlHandlingStrategy, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root',\n      useFactory: () => inject(DefaultUrlHandlingStrategy)\n    }]\n  }], null, null);\n})();\n/**\n * @publicApi\n */\nclass DefaultUrlHandlingStrategy {\n  shouldProcessUrl(url) {\n    return true;\n  }\n  extract(url) {\n    return url;\n  }\n  merge(newUrlPart, wholeUrl) {\n    return newUrlPart;\n  }\n}\n_DefaultUrlHandlingStrategy = DefaultUrlHandlingStrategy;\n_defineProperty(DefaultUrlHandlingStrategy, \"\\u0275fac\", function _DefaultUrlHandlingStrategy_Factory(__ngFactoryType__) {\n  return new (__ngFactoryType__ || _DefaultUrlHandlingStrategy)();\n});\n_defineProperty(DefaultUrlHandlingStrategy, \"\\u0275prov\", /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: _DefaultUrlHandlingStrategy,\n  factory: _DefaultUrlHandlingStrategy.ɵfac,\n  providedIn: 'root'\n}));\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(DefaultUrlHandlingStrategy, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], null, null);\n})();\n\n/// <reference types=\"dom-view-transitions\" />\nconst CREATE_VIEW_TRANSITION = new InjectionToken(ngDevMode ? 'view transition helper' : '');\nconst VIEW_TRANSITION_OPTIONS = new InjectionToken(ngDevMode ? 'view transition options' : '');\n/**\n * A helper function for using browser view transitions. This function skips the call to\n * `startViewTransition` if the browser does not support it.\n *\n * @returns A Promise that resolves when the view transition callback begins.\n */\nfunction createViewTransition(injector, from, to) {\n  const transitionOptions = injector.get(VIEW_TRANSITION_OPTIONS);\n  const document = injector.get(DOCUMENT);\n  // Create promises outside the Angular zone to avoid causing extra change detections\n  return injector.get(NgZone).runOutsideAngular(() => {\n    if (!document.startViewTransition || transitionOptions.skipNextTransition) {\n      transitionOptions.skipNextTransition = false;\n      // The timing of `startViewTransition` is closer to a macrotask. It won't be called\n      // until the current event loop exits so we use a promise resolved in a timeout instead\n      // of Promise.resolve().\n      return new Promise(resolve => setTimeout(resolve));\n    }\n    let resolveViewTransitionStarted;\n    const viewTransitionStarted = new Promise(resolve => {\n      resolveViewTransitionStarted = resolve;\n    });\n    const transition = document.startViewTransition(() => {\n      resolveViewTransitionStarted();\n      // We don't actually update dom within the transition callback. The resolving of the above\n      // promise unblocks the Router navigation, which synchronously activates and deactivates\n      // routes (the DOM update). This view transition waits for the next change detection to\n      // complete (below), which includes the update phase of the routed components.\n      return createRenderPromise(injector);\n      // TODO(atscott): Types in DefinitelyTyped are not up-to-date\n    });\n    const {\n      onViewTransitionCreated\n    } = transitionOptions;\n    if (onViewTransitionCreated) {\n      runInInjectionContext(injector, () => onViewTransitionCreated({\n        transition,\n        from,\n        to\n      }));\n    }\n    return viewTransitionStarted;\n  });\n}\n/**\n * Creates a promise that resolves after next render.\n */\nfunction createRenderPromise(injector) {\n  return new Promise(resolve => {\n    // Wait for the microtask queue to empty after the next render happens (by waiting a macrotask).\n    // This ensures any follow-up renders in the microtask queue are completed before the\n    // view transition starts animating.\n    afterNextRender({\n      read: () => setTimeout(resolve)\n    }, {\n      injector\n    });\n  });\n}\nconst NAVIGATION_ERROR_HANDLER = new InjectionToken(typeof ngDevMode === 'undefined' || ngDevMode ? 'navigation error handler' : '');\nclass NavigationTransitions {\n  get hasRequestedNavigation() {\n    return this.navigationId !== 0;\n  }\n  constructor() {\n    _defineProperty(this, \"currentNavigation\", null);\n    _defineProperty(this, \"currentTransition\", null);\n    _defineProperty(this, \"lastSuccessfulNavigation\", null);\n    /**\n     * These events are used to communicate back to the Router about the state of the transition. The\n     * Router wants to respond to these events in various ways. Because the `NavigationTransition`\n     * class is not public, this event subject is not publicly exposed.\n     */\n    _defineProperty(this, \"events\", new Subject());\n    /**\n     * Used to abort the current transition with an error.\n     */\n    _defineProperty(this, \"transitionAbortSubject\", new Subject());\n    _defineProperty(this, \"configLoader\", inject(RouterConfigLoader));\n    _defineProperty(this, \"environmentInjector\", inject(EnvironmentInjector));\n    _defineProperty(this, \"destroyRef\", inject(DestroyRef));\n    _defineProperty(this, \"urlSerializer\", inject(UrlSerializer));\n    _defineProperty(this, \"rootContexts\", inject(ChildrenOutletContexts));\n    _defineProperty(this, \"location\", inject(Location));\n    _defineProperty(this, \"inputBindingEnabled\", inject(INPUT_BINDER, {\n      optional: true\n    }) !== null);\n    _defineProperty(this, \"titleStrategy\", inject(TitleStrategy));\n    _defineProperty(this, \"options\", inject(ROUTER_CONFIGURATION, {\n      optional: true\n    }) || {});\n    _defineProperty(this, \"paramsInheritanceStrategy\", this.options.paramsInheritanceStrategy || 'emptyOnly');\n    _defineProperty(this, \"urlHandlingStrategy\", inject(UrlHandlingStrategy));\n    _defineProperty(this, \"createViewTransition\", inject(CREATE_VIEW_TRANSITION, {\n      optional: true\n    }));\n    _defineProperty(this, \"navigationErrorHandler\", inject(NAVIGATION_ERROR_HANDLER, {\n      optional: true\n    }));\n    _defineProperty(this, \"navigationId\", 0);\n    _defineProperty(this, \"transitions\", void 0);\n    /**\n     * Hook that enables you to pause navigation after the preactivation phase.\n     * Used by `RouterModule`.\n     *\n     * @internal\n     */\n    _defineProperty(this, \"afterPreactivation\", () => of(void 0));\n    /** @internal */\n    _defineProperty(this, \"rootComponentType\", null);\n    _defineProperty(this, \"destroyed\", false);\n    const onLoadStart = r => this.events.next(new RouteConfigLoadStart(r));\n    const onLoadEnd = r => this.events.next(new RouteConfigLoadEnd(r));\n    this.configLoader.onLoadEndListener = onLoadEnd;\n    this.configLoader.onLoadStartListener = onLoadStart;\n    this.destroyRef.onDestroy(() => {\n      this.destroyed = true;\n    });\n  }\n  complete() {\n    var _this$transitions;\n    (_this$transitions = this.transitions) === null || _this$transitions === void 0 || _this$transitions.complete();\n  }\n  handleNavigationRequest(request) {\n    var _this$transitions2;\n    const id = ++this.navigationId;\n    (_this$transitions2 = this.transitions) === null || _this$transitions2 === void 0 || _this$transitions2.next({\n      ...request,\n      extractedUrl: this.urlHandlingStrategy.extract(request.rawUrl),\n      targetSnapshot: null,\n      targetRouterState: null,\n      guards: {\n        canActivateChecks: [],\n        canDeactivateChecks: []\n      },\n      guardsResult: null,\n      id\n    });\n  }\n  setupNavigations(router) {\n    this.transitions = new BehaviorSubject(null);\n    return this.transitions.pipe(filter(t => t !== null),\n    // Using switchMap so we cancel executing navigations when a new one comes in\n    switchMap(overallTransitionState => {\n      let completed = false;\n      let errored = false;\n      return of(overallTransitionState).pipe(switchMap(t => {\n        var _t$extras$onSameUrlNa;\n        // It is possible that `switchMap` fails to cancel previous navigations if a new one happens synchronously while the operator\n        // is processing the `next` notification of that previous navigation. This can happen when a new navigation (say 2) cancels a\n        // previous one (1) and yet another navigation (3) happens synchronously in response to the `NavigationCancel` event for (1).\n        // https://github.com/ReactiveX/rxjs/issues/7455\n        if (this.navigationId > overallTransitionState.id) {\n          const cancellationReason = typeof ngDevMode === 'undefined' || ngDevMode ? `Navigation ID ${overallTransitionState.id} is not equal to the current navigation id ${this.navigationId}` : '';\n          this.cancelNavigationTransition(overallTransitionState, cancellationReason, NavigationCancellationCode.SupersededByNewNavigation);\n          return EMPTY;\n        }\n        this.currentTransition = overallTransitionState;\n        // Store the Navigation object\n        this.currentNavigation = {\n          id: t.id,\n          initialUrl: t.rawUrl,\n          extractedUrl: t.extractedUrl,\n          targetBrowserUrl: typeof t.extras.browserUrl === 'string' ? this.urlSerializer.parse(t.extras.browserUrl) : t.extras.browserUrl,\n          trigger: t.source,\n          extras: t.extras,\n          previousNavigation: !this.lastSuccessfulNavigation ? null : {\n            ...this.lastSuccessfulNavigation,\n            previousNavigation: null\n          }\n        };\n        const urlTransition = !router.navigated || this.isUpdatingInternalState() || this.isUpdatedBrowserUrl();\n        const onSameUrlNavigation = (_t$extras$onSameUrlNa = t.extras.onSameUrlNavigation) !== null && _t$extras$onSameUrlNa !== void 0 ? _t$extras$onSameUrlNa : router.onSameUrlNavigation;\n        if (!urlTransition && onSameUrlNavigation !== 'reload') {\n          const reason = typeof ngDevMode === 'undefined' || ngDevMode ? `Navigation to ${t.rawUrl} was ignored because it is the same as the current Router URL.` : '';\n          this.events.next(new NavigationSkipped(t.id, this.urlSerializer.serialize(t.rawUrl), reason, NavigationSkippedCode.IgnoredSameUrlNavigation));\n          t.resolve(false);\n          return EMPTY;\n        }\n        if (this.urlHandlingStrategy.shouldProcessUrl(t.rawUrl)) {\n          return of(t).pipe(\n          // Fire NavigationStart event\n          switchMap(t => {\n            this.events.next(new NavigationStart(t.id, this.urlSerializer.serialize(t.extractedUrl), t.source, t.restoredState));\n            if (t.id !== this.navigationId) {\n              return EMPTY;\n            }\n            // This delay is required to match old behavior that forced\n            // navigation to always be async\n            return Promise.resolve(t);\n          }),\n          // Recognize\n          recognize(this.environmentInjector, this.configLoader, this.rootComponentType, router.config, this.urlSerializer, this.paramsInheritanceStrategy),\n          // Update URL if in `eager` update mode\n          tap(t => {\n            overallTransitionState.targetSnapshot = t.targetSnapshot;\n            overallTransitionState.urlAfterRedirects = t.urlAfterRedirects;\n            this.currentNavigation = {\n              ...this.currentNavigation,\n              finalUrl: t.urlAfterRedirects\n            };\n            // Fire RoutesRecognized\n            const routesRecognized = new RoutesRecognized(t.id, this.urlSerializer.serialize(t.extractedUrl), this.urlSerializer.serialize(t.urlAfterRedirects), t.targetSnapshot);\n            this.events.next(routesRecognized);\n          }));\n        } else if (urlTransition && this.urlHandlingStrategy.shouldProcessUrl(t.currentRawUrl)) {\n          /* When the current URL shouldn't be processed, but the previous one\n           * was, we handle this \"error condition\" by navigating to the\n           * previously successful URL, but leaving the URL intact.*/\n          const {\n            id,\n            extractedUrl,\n            source,\n            restoredState,\n            extras\n          } = t;\n          const navStart = new NavigationStart(id, this.urlSerializer.serialize(extractedUrl), source, restoredState);\n          this.events.next(navStart);\n          const targetSnapshot = createEmptyState(this.rootComponentType).snapshot;\n          this.currentTransition = overallTransitionState = {\n            ...t,\n            targetSnapshot,\n            urlAfterRedirects: extractedUrl,\n            extras: {\n              ...extras,\n              skipLocationChange: false,\n              replaceUrl: false\n            }\n          };\n          this.currentNavigation.finalUrl = extractedUrl;\n          return of(overallTransitionState);\n        } else {\n          /* When neither the current or previous URL can be processed, do\n           * nothing other than update router's internal reference to the\n           * current \"settled\" URL. This way the next navigation will be coming\n           * from the current URL in the browser.\n           */\n          const reason = typeof ngDevMode === 'undefined' || ngDevMode ? `Navigation was ignored because the UrlHandlingStrategy` + ` indicated neither the current URL ${t.currentRawUrl} nor target URL ${t.rawUrl} should be processed.` : '';\n          this.events.next(new NavigationSkipped(t.id, this.urlSerializer.serialize(t.extractedUrl), reason, NavigationSkippedCode.IgnoredByUrlHandlingStrategy));\n          t.resolve(false);\n          return EMPTY;\n        }\n      }),\n      // --- GUARDS ---\n      tap(t => {\n        const guardsStart = new GuardsCheckStart(t.id, this.urlSerializer.serialize(t.extractedUrl), this.urlSerializer.serialize(t.urlAfterRedirects), t.targetSnapshot);\n        this.events.next(guardsStart);\n      }), map(t => {\n        this.currentTransition = overallTransitionState = {\n          ...t,\n          guards: getAllRouteGuards(t.targetSnapshot, t.currentSnapshot, this.rootContexts)\n        };\n        return overallTransitionState;\n      }), checkGuards(this.environmentInjector, evt => this.events.next(evt)), tap(t => {\n        overallTransitionState.guardsResult = t.guardsResult;\n        if (t.guardsResult && typeof t.guardsResult !== 'boolean') {\n          throw redirectingNavigationError(this.urlSerializer, t.guardsResult);\n        }\n        const guardsEnd = new GuardsCheckEnd(t.id, this.urlSerializer.serialize(t.extractedUrl), this.urlSerializer.serialize(t.urlAfterRedirects), t.targetSnapshot, !!t.guardsResult);\n        this.events.next(guardsEnd);\n      }), filter(t => {\n        if (!t.guardsResult) {\n          this.cancelNavigationTransition(t, '', NavigationCancellationCode.GuardRejected);\n          return false;\n        }\n        return true;\n      }),\n      // --- RESOLVE ---\n      switchTap(t => {\n        if (t.guards.canActivateChecks.length === 0) {\n          return undefined;\n        }\n        return of(t).pipe(tap(t => {\n          const resolveStart = new ResolveStart(t.id, this.urlSerializer.serialize(t.extractedUrl), this.urlSerializer.serialize(t.urlAfterRedirects), t.targetSnapshot);\n          this.events.next(resolveStart);\n        }), switchMap(t => {\n          let dataResolved = false;\n          return of(t).pipe(resolveData(this.paramsInheritanceStrategy, this.environmentInjector), tap({\n            next: () => dataResolved = true,\n            complete: () => {\n              if (!dataResolved) {\n                this.cancelNavigationTransition(t, typeof ngDevMode === 'undefined' || ngDevMode ? `At least one route resolver didn't emit any value.` : '', NavigationCancellationCode.NoDataFromResolver);\n              }\n            }\n          }));\n        }), tap(t => {\n          const resolveEnd = new ResolveEnd(t.id, this.urlSerializer.serialize(t.extractedUrl), this.urlSerializer.serialize(t.urlAfterRedirects), t.targetSnapshot);\n          this.events.next(resolveEnd);\n        }));\n      }),\n      // --- LOAD COMPONENTS ---\n      switchTap(t => {\n        const loadComponents = route => {\n          var _route$routeConfig;\n          const loaders = [];\n          if ((_route$routeConfig = route.routeConfig) !== null && _route$routeConfig !== void 0 && _route$routeConfig.loadComponent && !route.routeConfig._loadedComponent) {\n            loaders.push(this.configLoader.loadComponent(route.routeConfig).pipe(tap(loadedComponent => {\n              route.component = loadedComponent;\n            }), map(() => void 0)));\n          }\n          for (const child of route.children) {\n            loaders.push(...loadComponents(child));\n          }\n          return loaders;\n        };\n        return combineLatest(loadComponents(t.targetSnapshot.root)).pipe(defaultIfEmpty(null), take(1));\n      }), switchTap(() => this.afterPreactivation()), switchMap(() => {\n        var _this$createViewTrans;\n        const {\n          currentSnapshot,\n          targetSnapshot\n        } = overallTransitionState;\n        const viewTransitionStarted = (_this$createViewTrans = this.createViewTransition) === null || _this$createViewTrans === void 0 ? void 0 : _this$createViewTrans.call(this, this.environmentInjector, currentSnapshot.root, targetSnapshot.root);\n        // If view transitions are enabled, block the navigation until the view\n        // transition callback starts. Otherwise, continue immediately.\n        return viewTransitionStarted ? from(viewTransitionStarted).pipe(map(() => overallTransitionState)) : of(overallTransitionState);\n      }), map(t => {\n        const targetRouterState = createRouterState(router.routeReuseStrategy, t.targetSnapshot, t.currentRouterState);\n        this.currentTransition = overallTransitionState = {\n          ...t,\n          targetRouterState\n        };\n        this.currentNavigation.targetRouterState = targetRouterState;\n        return overallTransitionState;\n      }), tap(() => {\n        this.events.next(new BeforeActivateRoutes());\n      }), activateRoutes(this.rootContexts, router.routeReuseStrategy, evt => this.events.next(evt), this.inputBindingEnabled),\n      // Ensure that if some observable used to drive the transition doesn't\n      // complete, the navigation still finalizes This should never happen, but\n      // this is done as a safety measure to avoid surfacing this error (#49567).\n      take(1), tap({\n        next: t => {\n          var _this$titleStrategy;\n          completed = true;\n          this.lastSuccessfulNavigation = this.currentNavigation;\n          this.events.next(new NavigationEnd(t.id, this.urlSerializer.serialize(t.extractedUrl), this.urlSerializer.serialize(t.urlAfterRedirects)));\n          (_this$titleStrategy = this.titleStrategy) === null || _this$titleStrategy === void 0 || _this$titleStrategy.updateTitle(t.targetRouterState.snapshot);\n          t.resolve(true);\n        },\n        complete: () => {\n          completed = true;\n        }\n      }),\n      // There used to be a lot more logic happening directly within the\n      // transition Observable. Some of this logic has been refactored out to\n      // other places but there may still be errors that happen there. This gives\n      // us a way to cancel the transition from the outside. This may also be\n      // required in the future to support something like the abort signal of the\n      // Navigation API where the navigation gets aborted from outside the\n      // transition.\n      takeUntil(this.transitionAbortSubject.pipe(tap(err => {\n        throw err;\n      }))), finalize(() => {\n        var _this$currentTransiti;\n        /* When the navigation stream finishes either through error or success,\n         * we set the `completed` or `errored` flag. However, there are some\n         * situations where we could get here without either of those being set.\n         * For instance, a redirect during NavigationStart. Therefore, this is a\n         * catch-all to make sure the NavigationCancel event is fired when a\n         * navigation gets cancelled but not caught by other means. */\n        if (!completed && !errored) {\n          const cancelationReason = typeof ngDevMode === 'undefined' || ngDevMode ? `Navigation ID ${overallTransitionState.id} is not equal to the current navigation id ${this.navigationId}` : '';\n          this.cancelNavigationTransition(overallTransitionState, cancelationReason, NavigationCancellationCode.SupersededByNewNavigation);\n        }\n        // Only clear current navigation if it is still set to the one that\n        // finalized.\n        if (((_this$currentTransiti = this.currentTransition) === null || _this$currentTransiti === void 0 ? void 0 : _this$currentTransiti.id) === overallTransitionState.id) {\n          this.currentNavigation = null;\n          this.currentTransition = null;\n        }\n      }), catchError(e => {\n        // If the application is already destroyed, the catch block should not\n        // execute anything in practice because other resources have already\n        // been released and destroyed.\n        if (this.destroyed) {\n          overallTransitionState.resolve(false);\n          return EMPTY;\n        }\n        errored = true;\n        /* This error type is issued during Redirect, and is handled as a\n         * cancellation rather than an error. */\n        if (isNavigationCancelingError(e)) {\n          this.events.next(new NavigationCancel(overallTransitionState.id, this.urlSerializer.serialize(overallTransitionState.extractedUrl), e.message, e.cancellationCode));\n          // When redirecting, we need to delay resolving the navigation\n          // promise and push it to the redirect navigation\n          if (!isRedirectingNavigationCancelingError(e)) {\n            overallTransitionState.resolve(false);\n          } else {\n            this.events.next(new RedirectRequest(e.url, e.navigationBehaviorOptions));\n          }\n          /* All other errors should reset to the router's internal URL reference\n           * to the pre-error state. */\n        } else {\n          var _overallTransitionSta;\n          const navigationError = new NavigationError(overallTransitionState.id, this.urlSerializer.serialize(overallTransitionState.extractedUrl), e, (_overallTransitionSta = overallTransitionState.targetSnapshot) !== null && _overallTransitionSta !== void 0 ? _overallTransitionSta : undefined);\n          try {\n            const navigationErrorHandlerResult = runInInjectionContext(this.environmentInjector, () => {\n              var _this$navigationError;\n              return (_this$navigationError = this.navigationErrorHandler) === null || _this$navigationError === void 0 ? void 0 : _this$navigationError.call(this, navigationError);\n            });\n            if (navigationErrorHandlerResult instanceof RedirectCommand) {\n              const {\n                message,\n                cancellationCode\n              } = redirectingNavigationError(this.urlSerializer, navigationErrorHandlerResult);\n              this.events.next(new NavigationCancel(overallTransitionState.id, this.urlSerializer.serialize(overallTransitionState.extractedUrl), message, cancellationCode));\n              this.events.next(new RedirectRequest(navigationErrorHandlerResult.redirectTo, navigationErrorHandlerResult.navigationBehaviorOptions));\n            } else {\n              this.events.next(navigationError);\n              throw e;\n            }\n          } catch (ee) {\n            // TODO(atscott): consider flipping the default behavior of\n            // resolveNavigationPromiseOnError to be `resolve(false)` when\n            // undefined. This is the most sane thing to do given that\n            // applications very rarely handle the promise rejection and, as a\n            // result, would get \"unhandled promise rejection\" console logs.\n            // The vast majority of applications would not be affected by this\n            // change so omitting a migration seems reasonable. Instead,\n            // applications that rely on rejection can specifically opt-in to the\n            // old behavior.\n            if (this.options.resolveNavigationPromiseOnError) {\n              overallTransitionState.resolve(false);\n            } else {\n              overallTransitionState.reject(ee);\n            }\n          }\n        }\n        return EMPTY;\n      }));\n      // casting because `pipe` returns observable({}) when called with 8+ arguments\n    }));\n  }\n  cancelNavigationTransition(t, reason, code) {\n    const navCancel = new NavigationCancel(t.id, this.urlSerializer.serialize(t.extractedUrl), reason, code);\n    this.events.next(navCancel);\n    t.resolve(false);\n  }\n  /**\n   * @returns Whether we're navigating to somewhere that is not what the Router is\n   * currently set to.\n   */\n  isUpdatingInternalState() {\n    var _this$currentTransiti2, _this$currentTransiti3;\n    // TODO(atscott): The serializer should likely be used instead of\n    // `UrlTree.toString()`. Custom serializers are often written to handle\n    // things better than the default one (objects, for example will be\n    // [Object object] with the custom serializer and be \"the same\" when they\n    // aren't).\n    // (Same for isUpdatedBrowserUrl)\n    return ((_this$currentTransiti2 = this.currentTransition) === null || _this$currentTransiti2 === void 0 ? void 0 : _this$currentTransiti2.extractedUrl.toString()) !== ((_this$currentTransiti3 = this.currentTransition) === null || _this$currentTransiti3 === void 0 ? void 0 : _this$currentTransiti3.currentUrlTree.toString());\n  }\n  /**\n   * @returns Whether we're updating the browser URL to something new (navigation is going\n   * to somewhere not displayed in the URL bar and we will update the URL\n   * bar if navigation succeeds).\n   */\n  isUpdatedBrowserUrl() {\n    var _this$currentNavigati, _this$currentNavigati2, _this$currentNavigati3, _this$currentNavigati4;\n    // The extracted URL is the part of the URL that this application cares about. `extract` may\n    // return only part of the browser URL and that part may have not changed even if some other\n    // portion of the URL did.\n    const currentBrowserUrl = this.urlHandlingStrategy.extract(this.urlSerializer.parse(this.location.path(true)));\n    const targetBrowserUrl = (_this$currentNavigati = (_this$currentNavigati2 = this.currentNavigation) === null || _this$currentNavigati2 === void 0 ? void 0 : _this$currentNavigati2.targetBrowserUrl) !== null && _this$currentNavigati !== void 0 ? _this$currentNavigati : (_this$currentNavigati3 = this.currentNavigation) === null || _this$currentNavigati3 === void 0 ? void 0 : _this$currentNavigati3.extractedUrl;\n    return currentBrowserUrl.toString() !== (targetBrowserUrl === null || targetBrowserUrl === void 0 ? void 0 : targetBrowserUrl.toString()) && !((_this$currentNavigati4 = this.currentNavigation) !== null && _this$currentNavigati4 !== void 0 && _this$currentNavigati4.extras.skipLocationChange);\n  }\n}\n_NavigationTransitions = NavigationTransitions;\n_defineProperty(NavigationTransitions, \"\\u0275fac\", function _NavigationTransitions_Factory(__ngFactoryType__) {\n  return new (__ngFactoryType__ || _NavigationTransitions)();\n});\n_defineProperty(NavigationTransitions, \"\\u0275prov\", /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: _NavigationTransitions,\n  factory: _NavigationTransitions.ɵfac,\n  providedIn: 'root'\n}));\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NavigationTransitions, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], () => [], null);\n})();\nfunction isBrowserTriggeredNavigation(source) {\n  return source !== IMPERATIVE_NAVIGATION;\n}\n\n/**\n * @description\n *\n * Provides a way to customize when activated routes get reused.\n *\n * @publicApi\n */\nclass RouteReuseStrategy {}\n_RouteReuseStrategy = RouteReuseStrategy;\n_defineProperty(RouteReuseStrategy, \"\\u0275fac\", function _RouteReuseStrategy_Factory(__ngFactoryType__) {\n  return new (__ngFactoryType__ || _RouteReuseStrategy)();\n});\n_defineProperty(RouteReuseStrategy, \"\\u0275prov\", /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: _RouteReuseStrategy,\n  factory: () => (() => inject(DefaultRouteReuseStrategy))(),\n  providedIn: 'root'\n}));\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RouteReuseStrategy, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root',\n      useFactory: () => inject(DefaultRouteReuseStrategy)\n    }]\n  }], null, null);\n})();\n/**\n * @description\n *\n * This base route reuse strategy only reuses routes when the matched router configs are\n * identical. This prevents components from being destroyed and recreated\n * when just the route parameters, query parameters or fragment change\n * (that is, the existing component is _reused_).\n *\n * This strategy does not store any routes for later reuse.\n *\n * Angular uses this strategy by default.\n *\n *\n * It can be used as a base class for custom route reuse strategies, i.e. you can create your own\n * class that extends the `BaseRouteReuseStrategy` one.\n * @publicApi\n */\nclass BaseRouteReuseStrategy {\n  /**\n   * Whether the given route should detach for later reuse.\n   * Always returns false for `BaseRouteReuseStrategy`.\n   * */\n  shouldDetach(route) {\n    return false;\n  }\n  /**\n   * A no-op; the route is never stored since this strategy never detaches routes for later re-use.\n   */\n  store(route, detachedTree) {}\n  /** Returns `false`, meaning the route (and its subtree) is never reattached */\n  shouldAttach(route) {\n    return false;\n  }\n  /** Returns `null` because this strategy does not store routes for later re-use. */\n  retrieve(route) {\n    return null;\n  }\n  /**\n   * Determines if a route should be reused.\n   * This strategy returns `true` when the future route config and current route config are\n   * identical.\n   */\n  shouldReuseRoute(future, curr) {\n    return future.routeConfig === curr.routeConfig;\n  }\n}\nclass DefaultRouteReuseStrategy extends BaseRouteReuseStrategy {}\n_DefaultRouteReuseStrategy = DefaultRouteReuseStrategy;\n_defineProperty(DefaultRouteReuseStrategy, \"\\u0275fac\", /* @__PURE__ */(() => {\n  let ɵ_DefaultRouteReuseStrategy_BaseFactory;\n  return function _DefaultRouteReuseStrategy_Factory(__ngFactoryType__) {\n    return (ɵ_DefaultRouteReuseStrategy_BaseFactory || (ɵ_DefaultRouteReuseStrategy_BaseFactory = i0.ɵɵgetInheritedFactory(_DefaultRouteReuseStrategy)))(__ngFactoryType__ || _DefaultRouteReuseStrategy);\n  };\n})());\n_defineProperty(DefaultRouteReuseStrategy, \"\\u0275prov\", /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: _DefaultRouteReuseStrategy,\n  factory: _DefaultRouteReuseStrategy.ɵfac,\n  providedIn: 'root'\n}));\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(DefaultRouteReuseStrategy, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], null, null);\n})();\nclass StateManager {\n  constructor() {\n    _defineProperty(this, \"urlSerializer\", inject(UrlSerializer));\n    _defineProperty(this, \"options\", inject(ROUTER_CONFIGURATION, {\n      optional: true\n    }) || {});\n    _defineProperty(this, \"canceledNavigationResolution\", this.options.canceledNavigationResolution || 'replace');\n    _defineProperty(this, \"location\", inject(Location));\n    _defineProperty(this, \"urlHandlingStrategy\", inject(UrlHandlingStrategy));\n    _defineProperty(this, \"urlUpdateStrategy\", this.options.urlUpdateStrategy || 'deferred');\n    _defineProperty(this, \"currentUrlTree\", new UrlTree());\n    _defineProperty(this, \"rawUrlTree\", this.currentUrlTree);\n    _defineProperty(this, \"routerState\", createEmptyState(null));\n    _defineProperty(this, \"stateMemento\", this.createStateMemento());\n  }\n  /**\n   * Returns the currently activated `UrlTree`.\n   *\n   * This `UrlTree` shows only URLs that the `Router` is configured to handle (through\n   * `UrlHandlingStrategy`).\n   *\n   * The value is set after finding the route config tree to activate but before activating the\n   * route.\n   */\n  getCurrentUrlTree() {\n    return this.currentUrlTree;\n  }\n  /**\n   * Returns a `UrlTree` that is represents what the browser is actually showing.\n   *\n   * In the life of a navigation transition:\n   * 1. When a navigation begins, the raw `UrlTree` is updated to the full URL that's being\n   * navigated to.\n   * 2. During a navigation, redirects are applied, which might only apply to _part_ of the URL (due\n   * to `UrlHandlingStrategy`).\n   * 3. Just before activation, the raw `UrlTree` is updated to include the redirects on top of the\n   * original raw URL.\n   *\n   * Note that this is _only_ here to support `UrlHandlingStrategy.extract` and\n   * `UrlHandlingStrategy.shouldProcessUrl`. Without those APIs, the current `UrlTree` would not\n   * deviated from the raw `UrlTree`.\n   *\n   * For `extract`, a raw `UrlTree` is needed because `extract` may only return part\n   * of the navigation URL. Thus, the current `UrlTree` may only represent _part_ of the browser\n   * URL. When a navigation gets cancelled and the router needs to reset the URL or a new navigation\n   * occurs, it needs to know the _whole_ browser URL, not just the part handled by\n   * `UrlHandlingStrategy`.\n   * For `shouldProcessUrl`, when the return is `false`, the router ignores the navigation but\n   * still updates the raw `UrlTree` with the assumption that the navigation was caused by the\n   * location change listener due to a URL update by the AngularJS router. In this case, the router\n   * still need to know what the browser's URL is for future navigations.\n   */\n  getRawUrlTree() {\n    return this.rawUrlTree;\n  }\n  createBrowserPath({\n    finalUrl,\n    initialUrl,\n    targetBrowserUrl\n  }) {\n    const rawUrl = finalUrl !== undefined ? this.urlHandlingStrategy.merge(finalUrl, initialUrl) : initialUrl;\n    const url = targetBrowserUrl !== null && targetBrowserUrl !== void 0 ? targetBrowserUrl : rawUrl;\n    const path = url instanceof UrlTree ? this.urlSerializer.serialize(url) : url;\n    return path;\n  }\n  commitTransition({\n    targetRouterState,\n    finalUrl,\n    initialUrl\n  }) {\n    // If we are committing the transition after having a final URL and target state, we're updating\n    // all pieces of the state. Otherwise, we likely skipped the transition (due to URL handling strategy)\n    // and only want to update the rawUrlTree, which represents the browser URL (and doesn't necessarily match router state).\n    if (finalUrl && targetRouterState) {\n      this.currentUrlTree = finalUrl;\n      this.rawUrlTree = this.urlHandlingStrategy.merge(finalUrl, initialUrl);\n      this.routerState = targetRouterState;\n    } else {\n      this.rawUrlTree = initialUrl;\n    }\n  }\n  /** Returns the current RouterState. */\n  getRouterState() {\n    return this.routerState;\n  }\n  updateStateMemento() {\n    this.stateMemento = this.createStateMemento();\n  }\n  createStateMemento() {\n    return {\n      rawUrlTree: this.rawUrlTree,\n      currentUrlTree: this.currentUrlTree,\n      routerState: this.routerState\n    };\n  }\n  resetInternalState({\n    finalUrl\n  }) {\n    this.routerState = this.stateMemento.routerState;\n    this.currentUrlTree = this.stateMemento.currentUrlTree;\n    // Note here that we use the urlHandlingStrategy to get the reset `rawUrlTree` because it may be\n    // configured to handle only part of the navigation URL. This means we would only want to reset\n    // the part of the navigation handled by the Angular router rather than the whole URL. In\n    // addition, the URLHandlingStrategy may be configured to specifically preserve parts of the URL\n    // when merging, such as the query params so they are not lost on a refresh.\n    this.rawUrlTree = this.urlHandlingStrategy.merge(this.currentUrlTree, finalUrl !== null && finalUrl !== void 0 ? finalUrl : this.rawUrlTree);\n  }\n}\n_StateManager = StateManager;\n_defineProperty(StateManager, \"\\u0275fac\", function _StateManager_Factory(__ngFactoryType__) {\n  return new (__ngFactoryType__ || _StateManager)();\n});\n_defineProperty(StateManager, \"\\u0275prov\", /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: _StateManager,\n  factory: () => (() => inject(HistoryStateManager))(),\n  providedIn: 'root'\n}));\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(StateManager, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root',\n      useFactory: () => inject(HistoryStateManager)\n    }]\n  }], null, null);\n})();\nclass HistoryStateManager extends StateManager {\n  constructor(...args) {\n    super(...args);\n    /**\n     * The id of the currently active page in the router.\n     * Updated to the transition's target id on a successful navigation.\n     *\n     * This is used to track what page the router last activated. When an attempted navigation fails,\n     * the router can then use this to compute how to restore the state back to the previously active\n     * page.\n     */\n    _defineProperty(this, \"currentPageId\", 0);\n    _defineProperty(this, \"lastSuccessfulId\", -1);\n  }\n  restoredState() {\n    return this.location.getState();\n  }\n  /**\n   * The ɵrouterPageId of whatever page is currently active in the browser history. This is\n   * important for computing the target page id for new navigations because we need to ensure each\n   * page id in the browser history is 1 more than the previous entry.\n   */\n  get browserPageId() {\n    var _this$restoredState$ɵ, _this$restoredState;\n    if (this.canceledNavigationResolution !== 'computed') {\n      return this.currentPageId;\n    }\n    return (_this$restoredState$ɵ = (_this$restoredState = this.restoredState()) === null || _this$restoredState === void 0 ? void 0 : _this$restoredState.ɵrouterPageId) !== null && _this$restoredState$ɵ !== void 0 ? _this$restoredState$ɵ : this.currentPageId;\n  }\n  registerNonRouterCurrentEntryChangeListener(listener) {\n    return this.location.subscribe(event => {\n      if (event['type'] === 'popstate') {\n        // The `setTimeout` was added in #12160 and is likely to support Angular/AngularJS\n        // hybrid apps.\n        setTimeout(() => {\n          listener(event['url'], event.state, 'popstate');\n        });\n      }\n    });\n  }\n  handleRouterEvent(e, currentTransition) {\n    if (e instanceof NavigationStart) {\n      this.updateStateMemento();\n    } else if (e instanceof NavigationSkipped) {\n      this.commitTransition(currentTransition);\n    } else if (e instanceof RoutesRecognized) {\n      if (this.urlUpdateStrategy === 'eager') {\n        if (!currentTransition.extras.skipLocationChange) {\n          this.setBrowserUrl(this.createBrowserPath(currentTransition), currentTransition);\n        }\n      }\n    } else if (e instanceof BeforeActivateRoutes) {\n      this.commitTransition(currentTransition);\n      if (this.urlUpdateStrategy === 'deferred' && !currentTransition.extras.skipLocationChange) {\n        this.setBrowserUrl(this.createBrowserPath(currentTransition), currentTransition);\n      }\n    } else if (e instanceof NavigationCancel && (e.code === NavigationCancellationCode.GuardRejected || e.code === NavigationCancellationCode.NoDataFromResolver)) {\n      this.restoreHistory(currentTransition);\n    } else if (e instanceof NavigationError) {\n      this.restoreHistory(currentTransition, true);\n    } else if (e instanceof NavigationEnd) {\n      this.lastSuccessfulId = e.id;\n      this.currentPageId = this.browserPageId;\n    }\n  }\n  setBrowserUrl(path, {\n    extras,\n    id\n  }) {\n    const {\n      replaceUrl,\n      state\n    } = extras;\n    if (this.location.isCurrentPathEqualTo(path) || !!replaceUrl) {\n      // replacements do not update the target page\n      const currentBrowserPageId = this.browserPageId;\n      const newState = {\n        ...state,\n        ...this.generateNgRouterState(id, currentBrowserPageId)\n      };\n      this.location.replaceState(path, '', newState);\n    } else {\n      const newState = {\n        ...state,\n        ...this.generateNgRouterState(id, this.browserPageId + 1)\n      };\n      this.location.go(path, '', newState);\n    }\n  }\n  /**\n   * Performs the necessary rollback action to restore the browser URL to the\n   * state before the transition.\n   */\n  restoreHistory(navigation, restoringFromCaughtError = false) {\n    if (this.canceledNavigationResolution === 'computed') {\n      const currentBrowserPageId = this.browserPageId;\n      const targetPagePosition = this.currentPageId - currentBrowserPageId;\n      if (targetPagePosition !== 0) {\n        this.location.historyGo(targetPagePosition);\n      } else if (this.getCurrentUrlTree() === navigation.finalUrl && targetPagePosition === 0) {\n        // We got to the activation stage (where currentUrlTree is set to the navigation's\n        // finalUrl), but we weren't moving anywhere in history (skipLocationChange or replaceUrl).\n        // We still need to reset the router state back to what it was when the navigation started.\n        this.resetInternalState(navigation);\n        this.resetUrlToCurrentUrlTree();\n      } else ;\n    } else if (this.canceledNavigationResolution === 'replace') {\n      // TODO(atscott): It seems like we should _always_ reset the state here. It would be a no-op\n      // for `deferred` navigations that haven't change the internal state yet because guards\n      // reject. For 'eager' navigations, it seems like we also really should reset the state\n      // because the navigation was cancelled. Investigate if this can be done by running TGP.\n      if (restoringFromCaughtError) {\n        this.resetInternalState(navigation);\n      }\n      this.resetUrlToCurrentUrlTree();\n    }\n  }\n  resetUrlToCurrentUrlTree() {\n    this.location.replaceState(this.urlSerializer.serialize(this.getRawUrlTree()), '', this.generateNgRouterState(this.lastSuccessfulId, this.currentPageId));\n  }\n  generateNgRouterState(navigationId, routerPageId) {\n    if (this.canceledNavigationResolution === 'computed') {\n      return {\n        navigationId,\n        ɵrouterPageId: routerPageId\n      };\n    }\n    return {\n      navigationId\n    };\n  }\n}\n_HistoryStateManager = HistoryStateManager;\n_defineProperty(HistoryStateManager, \"\\u0275fac\", /* @__PURE__ */(() => {\n  let ɵ_HistoryStateManager_BaseFactory;\n  return function _HistoryStateManager_Factory(__ngFactoryType__) {\n    return (ɵ_HistoryStateManager_BaseFactory || (ɵ_HistoryStateManager_BaseFactory = i0.ɵɵgetInheritedFactory(_HistoryStateManager)))(__ngFactoryType__ || _HistoryStateManager);\n  };\n})());\n_defineProperty(HistoryStateManager, \"\\u0275prov\", /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: _HistoryStateManager,\n  factory: _HistoryStateManager.ɵfac,\n  providedIn: 'root'\n}));\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(HistoryStateManager, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], null, null);\n})();\n\n/**\n * Performs the given action once the router finishes its next/current navigation.\n *\n * The navigation is considered complete under the following conditions:\n * - `NavigationCancel` event emits and the code is not `NavigationCancellationCode.Redirect` or\n * `NavigationCancellationCode.SupersededByNewNavigation`. In these cases, the\n * redirecting/superseding navigation must finish.\n * - `NavigationError`, `NavigationEnd`, or `NavigationSkipped` event emits\n */\nfunction afterNextNavigation(router, action) {\n  router.events.pipe(filter(e => e instanceof NavigationEnd || e instanceof NavigationCancel || e instanceof NavigationError || e instanceof NavigationSkipped), map(e => {\n    if (e instanceof NavigationEnd || e instanceof NavigationSkipped) {\n      return 0 /* NavigationResult.COMPLETE */;\n    }\n    const redirecting = e instanceof NavigationCancel ? e.code === NavigationCancellationCode.Redirect || e.code === NavigationCancellationCode.SupersededByNewNavigation : false;\n    return redirecting ? 2 /* NavigationResult.REDIRECTING */ : 1 /* NavigationResult.FAILED */;\n  }), filter(result => result !== 2 /* NavigationResult.REDIRECTING */), take(1)).subscribe(() => {\n    action();\n  });\n}\n\n/**\n * The equivalent `IsActiveMatchOptions` options for `Router.isActive` is called with `true`\n * (exact = true).\n */\nconst exactMatchOptions = {\n  paths: 'exact',\n  fragment: 'ignored',\n  matrixParams: 'ignored',\n  queryParams: 'exact'\n};\n/**\n * The equivalent `IsActiveMatchOptions` options for `Router.isActive` is called with `false`\n * (exact = false).\n */\nconst subsetMatchOptions = {\n  paths: 'subset',\n  fragment: 'ignored',\n  matrixParams: 'ignored',\n  queryParams: 'subset'\n};\n/**\n * @description\n *\n * A service that facilitates navigation among views and URL manipulation capabilities.\n * This service is provided in the root scope and configured with [provideRouter](api/router/provideRouter).\n *\n * @see {@link Route}\n * @see {@link provideRouter}\n * @see [Routing and Navigation Guide](guide/routing/common-router-tasks).\n *\n * @ngModule RouterModule\n *\n * @publicApi\n */\nclass Router {\n  get currentUrlTree() {\n    return this.stateManager.getCurrentUrlTree();\n  }\n  get rawUrlTree() {\n    return this.stateManager.getRawUrlTree();\n  }\n  /**\n   * An event stream for routing events.\n   */\n  get events() {\n    // TODO(atscott): This _should_ be events.asObservable(). However, this change requires internal\n    // cleanup: tests are doing `(route.events as Subject<Event>).next(...)`. This isn't\n    // allowed/supported but we still have to fix these or file bugs against the teams before making\n    // the change.\n    return this._events;\n  }\n  /**\n   * The current state of routing in this NgModule.\n   */\n  get routerState() {\n    return this.stateManager.getRouterState();\n  }\n  /**\n   * True if at least one navigation event has occurred,\n   * false otherwise.\n   */\n\n  constructor() {\n    var _inject$flat, _inject;\n    _defineProperty(this, \"disposed\", false);\n    _defineProperty(this, \"nonRouterCurrentEntryChangeSubscription\", void 0);\n    _defineProperty(this, \"console\", inject(_Console));\n    _defineProperty(this, \"stateManager\", inject(StateManager));\n    _defineProperty(this, \"options\", inject(ROUTER_CONFIGURATION, {\n      optional: true\n    }) || {});\n    _defineProperty(this, \"pendingTasks\", inject(_PendingTasksInternal));\n    _defineProperty(this, \"urlUpdateStrategy\", this.options.urlUpdateStrategy || 'deferred');\n    _defineProperty(this, \"navigationTransitions\", inject(NavigationTransitions));\n    _defineProperty(this, \"urlSerializer\", inject(UrlSerializer));\n    _defineProperty(this, \"location\", inject(Location));\n    _defineProperty(this, \"urlHandlingStrategy\", inject(UrlHandlingStrategy));\n    /**\n     * The private `Subject` type for the public events exposed in the getter. This is used internally\n     * to push events to. The separate field allows us to expose separate types in the public API\n     * (i.e., an Observable rather than the Subject).\n     */\n    _defineProperty(this, \"_events\", new Subject());\n    _defineProperty(this, \"navigated\", false);\n    /**\n     * A strategy for re-using routes.\n     *\n     * @deprecated Configure using `providers` instead:\n     *   `{provide: RouteReuseStrategy, useClass: MyStrategy}`.\n     */\n    _defineProperty(this, \"routeReuseStrategy\", inject(RouteReuseStrategy));\n    /**\n     * How to handle a navigation request to the current URL.\n     *\n     *\n     * @deprecated Configure this through `provideRouter` or `RouterModule.forRoot` instead.\n     * @see {@link withRouterConfig}\n     * @see {@link provideRouter}\n     * @see {@link RouterModule}\n     */\n    _defineProperty(this, \"onSameUrlNavigation\", this.options.onSameUrlNavigation || 'ignore');\n    _defineProperty(this, \"config\", (_inject$flat = (_inject = inject(ROUTES, {\n      optional: true\n    })) === null || _inject === void 0 ? void 0 : _inject.flat()) !== null && _inject$flat !== void 0 ? _inject$flat : []);\n    /**\n     * Indicates whether the application has opted in to binding Router data to component inputs.\n     *\n     * This option is enabled by the `withComponentInputBinding` feature of `provideRouter` or\n     * `bindToComponentInputs` in the `ExtraOptions` of `RouterModule.forRoot`.\n     */\n    _defineProperty(this, \"componentInputBindingEnabled\", !!inject(INPUT_BINDER, {\n      optional: true\n    }));\n    _defineProperty(this, \"eventsSubscription\", new Subscription());\n    this.resetConfig(this.config);\n    this.navigationTransitions.setupNavigations(this).subscribe({\n      error: e => {\n        this.console.warn(ngDevMode ? `Unhandled Navigation Error: ${e}` : e);\n      }\n    });\n    this.subscribeToNavigationEvents();\n  }\n  subscribeToNavigationEvents() {\n    const subscription = this.navigationTransitions.events.subscribe(e => {\n      try {\n        const currentTransition = this.navigationTransitions.currentTransition;\n        const currentNavigation = this.navigationTransitions.currentNavigation;\n        if (currentTransition !== null && currentNavigation !== null) {\n          this.stateManager.handleRouterEvent(e, currentNavigation);\n          if (e instanceof NavigationCancel && e.code !== NavigationCancellationCode.Redirect && e.code !== NavigationCancellationCode.SupersededByNewNavigation) {\n            // It seems weird that `navigated` is set to `true` when the navigation is rejected,\n            // however it's how things were written initially. Investigation would need to be done\n            // to determine if this can be removed.\n            this.navigated = true;\n          } else if (e instanceof NavigationEnd) {\n            this.navigated = true;\n          } else if (e instanceof RedirectRequest) {\n            const opts = e.navigationBehaviorOptions;\n            const mergedTree = this.urlHandlingStrategy.merge(e.url, currentTransition.currentRawUrl);\n            const extras = {\n              browserUrl: currentTransition.extras.browserUrl,\n              info: currentTransition.extras.info,\n              skipLocationChange: currentTransition.extras.skipLocationChange,\n              // The URL is already updated at this point if we have 'eager' URL\n              // updates or if the navigation was triggered by the browser (back\n              // button, URL bar, etc). We want to replace that item in history\n              // if the navigation is rejected.\n              replaceUrl: currentTransition.extras.replaceUrl || this.urlUpdateStrategy === 'eager' || isBrowserTriggeredNavigation(currentTransition.source),\n              // allow developer to override default options with RedirectCommand\n              ...opts\n            };\n            this.scheduleNavigation(mergedTree, IMPERATIVE_NAVIGATION, null, extras, {\n              resolve: currentTransition.resolve,\n              reject: currentTransition.reject,\n              promise: currentTransition.promise\n            });\n          }\n        }\n        // Note that it's important to have the Router process the events _before_ the event is\n        // pushed through the public observable. This ensures the correct router state is in place\n        // before applications observe the events.\n        if (isPublicRouterEvent(e)) {\n          this._events.next(e);\n        }\n      } catch (e) {\n        this.navigationTransitions.transitionAbortSubject.next(e);\n      }\n    });\n    this.eventsSubscription.add(subscription);\n  }\n  /** @internal */\n  resetRootComponentType(rootComponentType) {\n    // TODO: vsavkin router 4.0 should make the root component set to null\n    // this will simplify the lifecycle of the router.\n    this.routerState.root.component = rootComponentType;\n    this.navigationTransitions.rootComponentType = rootComponentType;\n  }\n  /**\n   * Sets up the location change listener and performs the initial navigation.\n   */\n  initialNavigation() {\n    this.setUpLocationChangeListener();\n    if (!this.navigationTransitions.hasRequestedNavigation) {\n      this.navigateToSyncWithBrowser(this.location.path(true), IMPERATIVE_NAVIGATION, this.stateManager.restoredState());\n    }\n  }\n  /**\n   * Sets up the location change listener. This listener detects navigations triggered from outside\n   * the Router (the browser back/forward buttons, for example) and schedules a corresponding Router\n   * navigation so that the correct events, guards, etc. are triggered.\n   */\n  setUpLocationChangeListener() {\n    var _this$nonRouterCurren;\n    // Don't need to use Zone.wrap any more, because zone.js\n    // already patch onPopState, so location change callback will\n    // run into ngZone\n    (_this$nonRouterCurren = this.nonRouterCurrentEntryChangeSubscription) !== null && _this$nonRouterCurren !== void 0 ? _this$nonRouterCurren : this.nonRouterCurrentEntryChangeSubscription = this.stateManager.registerNonRouterCurrentEntryChangeListener((url, state, source) => {\n      this.navigateToSyncWithBrowser(url, source, state);\n    });\n  }\n  /**\n   * Schedules a router navigation to synchronize Router state with the browser state.\n   *\n   * This is done as a response to a popstate event and the initial navigation. These\n   * two scenarios represent times when the browser URL/state has been updated and\n   * the Router needs to respond to ensure its internal state matches.\n   */\n  navigateToSyncWithBrowser(url, source, state) {\n    const extras = {\n      replaceUrl: true\n    };\n    // TODO: restoredState should always include the entire state, regardless\n    // of navigationId. This requires a breaking change to update the type on\n    // NavigationStart’s restoredState, which currently requires navigationId\n    // to always be present. The Router used to only restore history state if\n    // a navigationId was present.\n    // The stored navigationId is used by the RouterScroller to retrieve the scroll\n    // position for the page.\n    const restoredState = state !== null && state !== void 0 && state.navigationId ? state : null;\n    // Separate to NavigationStart.restoredState, we must also restore the state to\n    // history.state and generate a new navigationId, since it will be overwritten\n    if (state) {\n      const stateCopy = {\n        ...state\n      };\n      delete stateCopy.navigationId;\n      delete stateCopy.ɵrouterPageId;\n      if (Object.keys(stateCopy).length !== 0) {\n        extras.state = stateCopy;\n      }\n    }\n    const urlTree = this.parseUrl(url);\n    this.scheduleNavigation(urlTree, source, restoredState, extras);\n  }\n  /** The current URL. */\n  get url() {\n    return this.serializeUrl(this.currentUrlTree);\n  }\n  /**\n   * Returns the current `Navigation` object when the router is navigating,\n   * and `null` when idle.\n   */\n  getCurrentNavigation() {\n    return this.navigationTransitions.currentNavigation;\n  }\n  /**\n   * The `Navigation` object of the most recent navigation to succeed and `null` if there\n   *     has not been a successful navigation yet.\n   */\n  get lastSuccessfulNavigation() {\n    return this.navigationTransitions.lastSuccessfulNavigation;\n  }\n  /**\n   * Resets the route configuration used for navigation and generating links.\n   *\n   * @param config The route array for the new configuration.\n   *\n   * @usageNotes\n   *\n   * ```ts\n   * router.resetConfig([\n   *  { path: 'team/:id', component: TeamCmp, children: [\n   *    { path: 'simple', component: SimpleCmp },\n   *    { path: 'user/:name', component: UserCmp }\n   *  ]}\n   * ]);\n   * ```\n   */\n  resetConfig(config) {\n    (typeof ngDevMode === 'undefined' || ngDevMode) && validateConfig(config);\n    this.config = config.map(standardizeConfig);\n    this.navigated = false;\n  }\n  /** @nodoc */\n  ngOnDestroy() {\n    this.dispose();\n  }\n  /** Disposes of the router. */\n  dispose() {\n    // We call `unsubscribe()` to release observers, as users may forget to\n    // unsubscribe manually when subscribing to `router.events`. We do not call\n    // `complete()` because it is unsafe; if someone subscribes using the `first`\n    // operator and the observable completes before emitting a value,\n    // RxJS will throw an error.\n    this._events.unsubscribe();\n    this.navigationTransitions.complete();\n    if (this.nonRouterCurrentEntryChangeSubscription) {\n      this.nonRouterCurrentEntryChangeSubscription.unsubscribe();\n      this.nonRouterCurrentEntryChangeSubscription = undefined;\n    }\n    this.disposed = true;\n    this.eventsSubscription.unsubscribe();\n  }\n  /**\n   * Appends URL segments to the current URL tree to create a new URL tree.\n   *\n   * @param commands An array of URL fragments with which to construct the new URL tree.\n   * If the path is static, can be the literal URL string. For a dynamic path, pass an array of path\n   * segments, followed by the parameters for each segment.\n   * The fragments are applied to the current URL tree or the one provided  in the `relativeTo`\n   * property of the options object, if supplied.\n   * @param navigationExtras Options that control the navigation strategy.\n   * @returns The new URL tree.\n   *\n   * @usageNotes\n   *\n   * ```\n   * // create /team/33/user/11\n   * router.createUrlTree(['/team', 33, 'user', 11]);\n   *\n   * // create /team/33;expand=true/user/11\n   * router.createUrlTree(['/team', 33, {expand: true}, 'user', 11]);\n   *\n   * // you can collapse static segments like this (this works only with the first passed-in value):\n   * router.createUrlTree(['/team/33/user', userId]);\n   *\n   * // If the first segment can contain slashes, and you do not want the router to split it,\n   * // you can do the following:\n   * router.createUrlTree([{segmentPath: '/one/two'}]);\n   *\n   * // create /team/33/(user/11//right:chat)\n   * router.createUrlTree(['/team', 33, {outlets: {primary: 'user/11', right: 'chat'}}]);\n   *\n   * // remove the right secondary node\n   * router.createUrlTree(['/team', 33, {outlets: {primary: 'user/11', right: null}}]);\n   *\n   * // assuming the current url is `/team/33/user/11` and the route points to `user/11`\n   *\n   * // navigate to /team/33/user/11/details\n   * router.createUrlTree(['details'], {relativeTo: route});\n   *\n   * // navigate to /team/33/user/22\n   * router.createUrlTree(['../22'], {relativeTo: route});\n   *\n   * // navigate to /team/44/user/22\n   * router.createUrlTree(['../../team/44/user/22'], {relativeTo: route});\n   *\n   * Note that a value of `null` or `undefined` for `relativeTo` indicates that the\n   * tree should be created relative to the root.\n   * ```\n   */\n  createUrlTree(commands, navigationExtras = {}) {\n    const {\n      relativeTo,\n      queryParams,\n      fragment,\n      queryParamsHandling,\n      preserveFragment\n    } = navigationExtras;\n    const f = preserveFragment ? this.currentUrlTree.fragment : fragment;\n    let q = null;\n    switch (queryParamsHandling !== null && queryParamsHandling !== void 0 ? queryParamsHandling : this.options.defaultQueryParamsHandling) {\n      case 'merge':\n        q = {\n          ...this.currentUrlTree.queryParams,\n          ...queryParams\n        };\n        break;\n      case 'preserve':\n        q = this.currentUrlTree.queryParams;\n        break;\n      default:\n        q = queryParams || null;\n    }\n    if (q !== null) {\n      q = this.removeEmptyProps(q);\n    }\n    let relativeToUrlSegmentGroup;\n    try {\n      const relativeToSnapshot = relativeTo ? relativeTo.snapshot : this.routerState.snapshot.root;\n      relativeToUrlSegmentGroup = createSegmentGroupFromRoute(relativeToSnapshot);\n    } catch (e) {\n      // This is strictly for backwards compatibility with tests that create\n      // invalid `ActivatedRoute` mocks.\n      // Note: the difference between having this fallback for invalid `ActivatedRoute` setups and\n      // just throwing is ~500 test failures. Fixing all of those tests by hand is not feasible at\n      // the moment.\n      if (typeof commands[0] !== 'string' || commands[0][0] !== '/') {\n        // Navigations that were absolute in the old way of creating UrlTrees\n        // would still work because they wouldn't attempt to match the\n        // segments in the `ActivatedRoute` to the `currentUrlTree` but\n        // instead just replace the root segment with the navigation result.\n        // Non-absolute navigations would fail to apply the commands because\n        // the logic could not find the segment to replace (so they'd act like there were no\n        // commands).\n        commands = [];\n      }\n      relativeToUrlSegmentGroup = this.currentUrlTree.root;\n    }\n    return createUrlTreeFromSegmentGroup(relativeToUrlSegmentGroup, commands, q, f !== null && f !== void 0 ? f : null);\n  }\n  /**\n   * Navigates to a view using an absolute route path.\n   *\n   * @param url An absolute path for a defined route. The function does not apply any delta to the\n   *     current URL.\n   * @param extras An object containing properties that modify the navigation strategy.\n   *\n   * @returns A Promise that resolves to 'true' when navigation succeeds,\n   * to 'false' when navigation fails, or is rejected on error.\n   *\n   * @usageNotes\n   *\n   * The following calls request navigation to an absolute path.\n   *\n   * ```ts\n   * router.navigateByUrl(\"/team/33/user/11\");\n   *\n   * // Navigate without updating the URL\n   * router.navigateByUrl(\"/team/33/user/11\", { skipLocationChange: true });\n   * ```\n   *\n   * @see [Routing and Navigation guide](guide/routing/common-router-tasks)\n   *\n   */\n  navigateByUrl(url, extras = {\n    skipLocationChange: false\n  }) {\n    const urlTree = isUrlTree(url) ? url : this.parseUrl(url);\n    const mergedTree = this.urlHandlingStrategy.merge(urlTree, this.rawUrlTree);\n    return this.scheduleNavigation(mergedTree, IMPERATIVE_NAVIGATION, null, extras);\n  }\n  /**\n   * Navigate based on the provided array of commands and a starting point.\n   * If no starting route is provided, the navigation is absolute.\n   *\n   * @param commands An array of URL fragments with which to construct the target URL.\n   * If the path is static, can be the literal URL string. For a dynamic path, pass an array of path\n   * segments, followed by the parameters for each segment.\n   * The fragments are applied to the current URL or the one provided  in the `relativeTo` property\n   * of the options object, if supplied.\n   * @param extras An options object that determines how the URL should be constructed or\n   *     interpreted.\n   *\n   * @returns A Promise that resolves to `true` when navigation succeeds, or `false` when navigation\n   *     fails. The Promise is rejected when an error occurs if `resolveNavigationPromiseOnError` is\n   * not `true`.\n   *\n   * @usageNotes\n   *\n   * The following calls request navigation to a dynamic route path relative to the current URL.\n   *\n   * ```ts\n   * router.navigate(['team', 33, 'user', 11], {relativeTo: route});\n   *\n   * // Navigate without updating the URL, overriding the default behavior\n   * router.navigate(['team', 33, 'user', 11], {relativeTo: route, skipLocationChange: true});\n   * ```\n   *\n   * @see [Routing and Navigation guide](guide/routing/common-router-tasks)\n   *\n   */\n  navigate(commands, extras = {\n    skipLocationChange: false\n  }) {\n    validateCommands(commands);\n    return this.navigateByUrl(this.createUrlTree(commands, extras), extras);\n  }\n  /** Serializes a `UrlTree` into a string */\n  serializeUrl(url) {\n    return this.urlSerializer.serialize(url);\n  }\n  /** Parses a string into a `UrlTree` */\n  parseUrl(url) {\n    try {\n      return this.urlSerializer.parse(url);\n    } catch {\n      return this.urlSerializer.parse('/');\n    }\n  }\n  isActive(url, matchOptions) {\n    let options;\n    if (matchOptions === true) {\n      options = {\n        ...exactMatchOptions\n      };\n    } else if (matchOptions === false) {\n      options = {\n        ...subsetMatchOptions\n      };\n    } else {\n      options = matchOptions;\n    }\n    if (isUrlTree(url)) {\n      return containsTree(this.currentUrlTree, url, options);\n    }\n    const urlTree = this.parseUrl(url);\n    return containsTree(this.currentUrlTree, urlTree, options);\n  }\n  removeEmptyProps(params) {\n    return Object.entries(params).reduce((result, [key, value]) => {\n      if (value !== null && value !== undefined) {\n        result[key] = value;\n      }\n      return result;\n    }, {});\n  }\n  scheduleNavigation(rawUrl, source, restoredState, extras, priorPromise) {\n    if (this.disposed) {\n      return Promise.resolve(false);\n    }\n    let resolve;\n    let reject;\n    let promise;\n    if (priorPromise) {\n      resolve = priorPromise.resolve;\n      reject = priorPromise.reject;\n      promise = priorPromise.promise;\n    } else {\n      promise = new Promise((res, rej) => {\n        resolve = res;\n        reject = rej;\n      });\n    }\n    // Indicate that the navigation is happening.\n    const taskId = this.pendingTasks.add();\n    afterNextNavigation(this, () => {\n      // Remove pending task in a microtask to allow for cancelled\n      // initial navigations and redirects within the same task.\n      queueMicrotask(() => this.pendingTasks.remove(taskId));\n    });\n    this.navigationTransitions.handleNavigationRequest({\n      source,\n      restoredState,\n      currentUrlTree: this.currentUrlTree,\n      currentRawUrl: this.currentUrlTree,\n      rawUrl,\n      extras,\n      resolve: resolve,\n      reject: reject,\n      promise,\n      currentSnapshot: this.routerState.snapshot,\n      currentRouterState: this.routerState\n    });\n    // Make sure that the error is propagated even though `processNavigations` catch\n    // handler does not rethrow\n    return promise.catch(e => {\n      return Promise.reject(e);\n    });\n  }\n}\n_Router = Router;\n_defineProperty(Router, \"\\u0275fac\", function _Router_Factory(__ngFactoryType__) {\n  return new (__ngFactoryType__ || _Router)();\n});\n_defineProperty(Router, \"\\u0275prov\", /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: _Router,\n  factory: _Router.ɵfac,\n  providedIn: 'root'\n}));\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(Router, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], () => [], null);\n})();\nfunction validateCommands(commands) {\n  for (let i = 0; i < commands.length; i++) {\n    const cmd = commands[i];\n    if (cmd == null) {\n      throw new _RuntimeError(4008 /* RuntimeErrorCode.NULLISH_COMMAND */, (typeof ngDevMode === 'undefined' || ngDevMode) && `The requested path contains ${cmd} segment at index ${i}`);\n    }\n  }\n}\nfunction isPublicRouterEvent(e) {\n  return !(e instanceof BeforeActivateRoutes) && !(e instanceof RedirectRequest);\n}\nexport { ActivatedRoute, ActivatedRouteSnapshot, ActivationEnd, ActivationStart, BaseRouteReuseStrategy, CREATE_VIEW_TRANSITION, ChildActivationEnd, ChildActivationStart, ChildrenOutletContexts, DefaultTitleStrategy, DefaultUrlSerializer, EventType, GuardsCheckEnd, GuardsCheckStart, INPUT_BINDER, NAVIGATION_ERROR_HANDLER, NavigationCancel, NavigationCancellationCode, NavigationEnd, NavigationError, NavigationSkipped, NavigationSkippedCode, NavigationStart, NavigationTransitions, OutletContext, PRIMARY_OUTLET, ROUTER_CONFIGURATION, ROUTER_OUTLET_DATA, ROUTES, RedirectCommand, ResolveEnd, ResolveStart, RouteConfigLoadEnd, RouteConfigLoadStart, RouteReuseStrategy, RoutedComponentInputBinder, Router, RouterConfigLoader, RouterEvent, RouterOutlet, RouterState, RouterStateSnapshot, RoutesRecognized, Scroll, TitleStrategy, UrlHandlingStrategy, UrlSegment, UrlSegmentGroup, UrlSerializer, UrlTree, VIEW_TRANSITION_OPTIONS, afterNextNavigation, convertToParamMap, createUrlTreeFromSnapshot, createViewTransition, defaultUrlMatcher, isUrlTree, loadChildren, stringifyEvent, ɵEmptyOutletComponent };","map":{"version":3,"names":["DOCUMENT","Location","i0","ɵisPromise","_isPromise","ɵRuntimeError","_RuntimeError","Injectable","ɵisNgModule","_isNgModule","isStandalone","createEnvironmentInjector","InjectionToken","EventEmitter","input","inject","ViewContainerRef","ChangeDetectorRef","Output","Input","Directive","reflectComponentType","ɵisInjectable","_isInjectable","runInInjectionContext","Component","NgModuleFactory","Compiler","NgZone","afterNextRender","EnvironmentInjector","DestroyRef","ɵConsole","_Console","ɵPendingTasksInternal","_PendingTasksInternal","isObservable","from","of","BehaviorSubject","combineLatest","EmptyError","concat","defer","pipe","throwError","EMPTY","ConnectableObservable","Subject","Subscription","map","switchMap","take","startWith","filter","mergeMap","first","concatMap","tap","catchError","scan","defaultIfEmpty","last","last$1","takeLast","finalize","refCount","takeUntil","i1","PRIMARY_OUTLET","RouteTitleKey","Symbol","ParamsAsMap","constructor","params","_defineProperty","has","name","Object","prototype","hasOwnProperty","call","get","v","Array","isArray","getAll","keys","convertToParamMap","defaultUrlMatcher","segments","segmentGroup","route","parts","path","split","length","pathMatch","hasChildren","posParams","index","part","segment","isParameter","substring","consumed","slice","shallowEqualArrays","a","b","i","shallowEqual","k1","getDataKeys","undefined","k2","key","equalArraysOrString","obj","getOwnPropertySymbols","aSorted","sort","bSorted","every","val","wrapIntoObservable","value","Promise","resolve","pathCompareMap","equalSegmentGroups","containsSegmentGroup","paramCompareMap","equalParams","containsParams","ignored","containsTree","container","containee","options","paths","root","matrixParams","queryParams","fragment","equalPath","matrixParamsMatch","numberOfChildren","c","children","containsSegmentGroupHelper","containeePaths","current","next","containerPaths","containeeSegment","parameters","UrlTree","UrlSegmentGroup","ngDevMode","queryParamMap","_this$_queryParamMap","_queryParamMap","toString","DEFAULT_SERIALIZER","serialize","values","forEach","parent","serializePaths","UrlSegment","parameterMap","_this$_parameterMap","_parameterMap","serializePath","equalSegments","as","bs","mapChildrenIntoArray","fn","res","entries","childOutlet","child","UrlSerializer","_UrlSerializer","_UrlSerializer_Factory","__ngFactoryType__","ɵɵdefineInjectable","token","factory","DefaultUrlSerializer","providedIn","ɵsetClassMetadata","type","args","useFactory","parse","url","p","UrlParser","parseRootSegment","parseQueryParams","parseFragment","tree","serializeSegment","query","serializeQueryParams","encodeUriFragment","join","primary","k","push","encodeUriString","s","encodeURIComponent","replace","encodeUriQuery","encodeURI","encodeUriSegment","decode","decodeURIComponent","decodeQuery","serializeMatrixParams","strParams","SEGMENT_RE","matchSegments","str","match","MATRIX_PARAM_SEGMENT_RE","matchMatrixKeySegments","QUERY_PARAM_RE","matchQueryParams","QUERY_PARAM_VALUE_RE","matchUrlQueryParamValue","remaining","consumeOptional","peekStartsWith","parseChildren","parseQueryParam","parseSegment","capture","parseParens","parseMatrixParams","parseParam","valueMatch","decodedKey","decodedVal","currentVal","allowPrimary","outletName","indexOf","startsWith","createRoot","rootCandidate","squashSegmentGroup","newChildren","childCandidate","grandChildOutlet","grandChild","mergeTrivialChildren","isUrlTree","createUrlTreeFromSnapshot","relativeTo","commands","relativeToUrlSegmentGroup","createSegmentGroupFromRoute","createUrlTreeFromSegmentGroup","targetGroup","createSegmentGroupFromRouteRecursive","currentRoute","childOutlets","childSnapshot","outlet","rootSegmentGroup","nav","computeNavigation","toRoot","position","findStartingPositionForTargetGroup","newSegmentGroup","processChildren","updateSegmentGroupChildren","updateSegmentGroup","isMatrixParams","command","outlets","segmentPath","isCommandWithOutlets","oldRoot","oldSegmentGroup","qp","replaceSegment","newRoot","oldSegment","newSegment","Navigation","isAbsolute","numberOfDoubleDots","cmdWithOutlet","find","reduce","cmd","cmdIdx","urlPart","partIndex","Position","target","NaN","modifier","createPositionApplyingDoubleDots","group","g","ci","dd","getOutlets","startIndex","m","prefixedWith","slicedCommands","commandIndex","pathIndex","createNewSegmentGroup","some","o","childrenOfEmptyChild","currentCommandIndex","currentPathIndex","noMatch","curr","compare","createNewSegmentChildren","stringify","IMPERATIVE_NAVIGATION","EventType","RouterEvent","id","NavigationStart","navigationTrigger","restoredState","NavigationEnd","urlAfterRedirects","NavigationCancellationCode","NavigationSkippedCode","NavigationCancel","reason","code","NavigationSkipped","NavigationError","error","RoutesRecognized","state","GuardsCheckStart","GuardsCheckEnd","shouldActivate","ResolveStart","ResolveEnd","RouteConfigLoadStart","RouteConfigLoadEnd","ChildActivationStart","snapshot","routeConfig","ChildActivationEnd","ActivationStart","ActivationEnd","Scroll","routerEvent","anchor","pos","BeforeActivateRoutes","RedirectRequest","navigationBehaviorOptions","stringifyEvent","_routerEvent$snapshot","_routerEvent$snapshot2","_routerEvent$snapshot3","_routerEvent$snapshot4","getOrCreateRouteInjectorIfNeeded","currentInjector","_route$_injector","providers","_injector","validateConfig","config","parentPath","requireStandaloneComponents","fullPath","getFullPath","validateNode","assertStandalone","component","redirectTo","loadComponent","loadChildren","canActivate","matcher","charAt","exp","getOutlet","sortByMatchingOutlets","routes","sortedConfig","r","getClosestRouteInjector","_snapshot$routeConfig","_loadedInjector","OutletContext","injector","_getClosestRouteInjec","_this$route","rootInjector","ChildrenOutletContexts","Map","onChildOutletCreated","childName","context","getOrCreateContext","contexts","set","onChildOutletDestroyed","getContext","attachRef","onOutletDeactivated","onOutletReAttached","_ChildrenOutletContexts","_ChildrenOutletContexts_Factory","ɵɵinject","ɵfac","Tree","_root","t","pathFromRoot","n","findNode","firstChild","siblings","findPath","cc","node","unshift","TreeNode","nodeChildrenAsMap","RouterState","setRouterState","createEmptyState","rootComponent","createEmptyStateSnapshot","emptyUrl","emptyParams","emptyData","emptyQueryParams","activated","ActivatedRoute","ActivatedRouteSnapshot","RouterStateSnapshot","urlSubject","paramsSubject","queryParamsSubject","fragmentSubject","dataSubject","futureSnapshot","_this$dataSubject$pip","_this$dataSubject","_futureSnapshot","title","d","data","_routerState","paramMap","_this$_paramMap","_paramMap","_this$_queryParamMap2","getInherited","paramsInheritanceStrategy","_parent$routeConfig","inherited","_resolvedData","_route$_resolvedData","hasStaticTitle","_this$data","_resolve","_this$_paramMap2","_this$_queryParamMap3","matched","serializeNode","advanceActivatedRoute","currentSnapshot","nextSnapshot","equalParamsAndUrlSegments","equalUrlParams","parentsMismatch","ROUTER_OUTLET_DATA","RouterOutlet","INPUT_BINDER","optional","activatedComponentRef","ngOnChanges","changes","firstChange","previousValue","isTrackedInParentContexts","deactivate","parentContexts","initializeOutletWithName","ngOnDestroy","_this$inputBinder","inputBinder","unsubscribeFromRouteData","_this$parentContexts$","ngOnInit","attach","activateWith","isActivated","instance","activatedRoute","_activatedRoute","activatedRouteData","detach","location","cmp","detachEvents","emit","ref","_this$inputBinder2","insert","hostView","bindActivatedRouteToOutletComponent","attachEvents","destroy","deactivateEvents","environmentInjector","_this$inputBinder3","childContexts","OutletInjector","routerOutletData","createComponent","changeDetector","markForCheck","activateEvents","_RouterOutlet","_RouterOutlet_Factory","ɵɵdefineDirective","selectors","inputs","outputs","exportAs","features","ɵɵNgOnChangesFeature","selector","outletData","notFoundValue","RoutedComponentInputBinder","subscribeToRouteData","_this$outletDataSubsc","outletDataSubscriptions","unsubscribe","delete","dataSubscription","subscribe","mirror","templateName","setInput","_RoutedComponentInputBinder","_RoutedComponentInputBinder_Factory","createRouterState","routeReuseStrategy","prevState","createNode","shouldReuseRoute","createOrReuseChildren","shouldAttach","detachedRouteHandle","retrieve","createActivatedRoute","RedirectCommand","NAVIGATION_CANCELING_ERROR","redirectingNavigationError","urlSerializer","redirect","navigationCancelingError","Redirect","message","Error","cancellationCode","isRedirectingNavigationCancelingError","isNavigationCancelingError","warnedAboutUnsupportedInputBinding","activateRoutes","rootContexts","forwardEvent","inputBindingEnabled","ActivateRoutes","targetRouterState","currentRouterState","activate","futureState","currState","futureRoot","currRoot","deactivateChildRoutes","activateChildRoutes","futureNode","currNode","futureChild","childOutletName","deactivateRoutes","deactivateRouteAndItsChildren","parentContext","future","shouldDetach","detachAndStoreRouteSubtree","deactivateRouteAndOutlet","treeNode","componentRef","store","stored","supportsBindingToComponentInputs","console","warn","CanActivate","CanDeactivate","getAllRouteGuards","getChildRouteGuards","getCanActivateChild","canActivateChild","guards","getTokenOrFunctionIdentity","tokenOrFunction","NOT_FOUND","result","futurePath","checks","canDeactivateChecks","canActivateChecks","prevChildren","getRouteGuards","shouldRun","shouldRunGuardsAndResolvers","runGuardsAndResolvers","mode","isFunction","isBoolean","isCanLoad","guard","canLoad","isCanActivate","isCanActivateChild","isCanDeactivate","canDeactivate","isCanMatch","canMatch","isEmptyError","e","INITIAL_VALUE","prioritizedGuardValue","obs","results","isRedirect","item","checkGuards","targetSnapshot","guardsResult","runCanDeactivateChecks","runCanActivateChecks","futureRSS","currRSS","check","runCanDeactivate","fireChildActivationStart","fireActivationStart","runCanActivateChild","runCanActivate","futureARS","canActivateObservables","_getClosestRouteInjec2","closestInjector","guardVal","canActivateChildGuards","reverse","_","canActivateChildGuardsMapped","guardsMapped","_getClosestRouteInjec3","currARS","canDeactivateObservables","_getClosestRouteInjec4","runCanLoadGuards","canLoadObservables","injectionToken","redirectIfUrlTree","runCanMatchGuards","canMatchObservables","NoMatch","AbsoluteRedirect","urlTree","noMatch$1","namedOutletsRedirect","canLoadFails","GuardRejected","ApplyRedirects","lineralizeSegments","applyRedirectCommands","redirectToFn","newRedirect","newTree","applyRedirectCreateUrlTree","createSegmentGroup","createQueryParams","redirectToParams","actualParams","copySourceValue","sourceName","updatedSegments","createSegments","redirectToSegments","actualSegments","findPosParam","findOrReturn","redirectToUrlSegment","idx","splice","consumedSegments","remainingSegments","positionalParamSegments","matchWithChecks","_res$posParams","_res$posParams2","createWildcardMatchResult","slicedSegments","containsEmptyPathMatchesWithNamedOutlets","createChildrenForEmptyPaths","containsEmptyPathMatches","addEmptyPathsToChildrenIfNeeded","emptyPathMatch","primarySegment","noLeftoversInUrl","NoLeftoversInUrl","recognize$1","configLoader","rootComponentType","Recognizer","recognize","MAX_ALLOWED_REDIRECTS","applyRedirects","noMatchError","rootSnapshot","rootNode","routeState","freeze","processSegmentGroup","parentRoute","processSegment","outletChildren","mergedChildren","mergeEmptyPathMatches","checkOutletNameUniqueness","sortActivatedRouteSnapshots","allowRedirects","_r$_injector","processSegmentAgainstRoute","x","rawSegment","matchSegmentAgainstRoute","expandSegmentAgainstRouteUsingRedirect","_ref","_route$component","absoluteRedirectCount","getData","_loadedComponent","getResolve","newSegments","matchResult","_route$_injector2","getChildConfig","childConfig","_route$_loadedInjecto","_ref2","_route$component2","childInjector","matchedOnOutlet","_loadedRoutes","shouldLoadResult","cfg","nodes","localeCompare","hasEmptyPathConfig","mergedNodes","Set","duplicateEmptyPathNode","resultNode","add","mergedNode","names","routeWithSameOutletName","serializer","extractedUrl","resolveData","routesWithResolversToRun","routesNeedingDataUpdates","newRoute","flattenRouteTree","routesProcessed","runResolve","size","descendants","flat","resolveNode","resolvedData","getResolver","_getClosestRouteInjec5","resolver","resolverValue","switchTap","nextResult","TitleStrategy","buildTitle","pageTitle","_this$getResolvedTitl","getResolvedTitleForRoute","_TitleStrategy","_TitleStrategy_Factory","DefaultTitleStrategy","updateTitle","setTitle","_DefaultTitleStrategy","_DefaultTitleStrategy_Factory","Title","ROUTER_CONFIGURATION","ɵEmptyOutletComponent","_ɵEmptyOutletComponent","_ɵEmptyOutletComponent_Factory","ɵɵdefineComponent","decls","vars","template","__EmptyOutletComponent_Template","rf","ctx","ɵɵelement","dependencies","encapsulation","imports","standardizeConfig","ROUTES","RouterConfigLoader","WeakMap","componentLoaders","onLoadStartListener","loadRunner","maybeUnwrapDefaultExport","_route$path","onLoadEndListener","loader","parentInjector","childrenLoaders","moduleFactoryOrRoutes$","compiler","_RouterConfigLoader","_RouterConfigLoader_Factory","compileModuleAsync","factoryOrRoutes","rawRoutes","create","self","isWrappedDefaultExport","UrlHandlingStrategy","_UrlHandlingStrategy","_UrlHandlingStrategy_Factory","DefaultUrlHandlingStrategy","shouldProcessUrl","extract","merge","newUrlPart","wholeUrl","_DefaultUrlHandlingStrategy","_DefaultUrlHandlingStrategy_Factory","CREATE_VIEW_TRANSITION","VIEW_TRANSITION_OPTIONS","createViewTransition","to","transitionOptions","document","runOutsideAngular","startViewTransition","skipNextTransition","setTimeout","resolveViewTransitionStarted","viewTransitionStarted","transition","createRenderPromise","onViewTransitionCreated","read","NAVIGATION_ERROR_HANDLER","NavigationTransitions","hasRequestedNavigation","navigationId","onLoadStart","events","onLoadEnd","destroyRef","onDestroy","destroyed","complete","_this$transitions","transitions","handleNavigationRequest","request","_this$transitions2","urlHandlingStrategy","rawUrl","setupNavigations","router","overallTransitionState","completed","errored","_t$extras$onSameUrlNa","cancellationReason","cancelNavigationTransition","SupersededByNewNavigation","currentTransition","currentNavigation","initialUrl","targetBrowserUrl","extras","browserUrl","trigger","source","previousNavigation","lastSuccessfulNavigation","urlTransition","navigated","isUpdatingInternalState","isUpdatedBrowserUrl","onSameUrlNavigation","IgnoredSameUrlNavigation","finalUrl","routesRecognized","currentRawUrl","navStart","skipLocationChange","replaceUrl","IgnoredByUrlHandlingStrategy","guardsStart","evt","guardsEnd","resolveStart","dataResolved","NoDataFromResolver","resolveEnd","loadComponents","_route$routeConfig","loaders","loadedComponent","afterPreactivation","_this$createViewTrans","_this$titleStrategy","titleStrategy","transitionAbortSubject","err","_this$currentTransiti","cancelationReason","_overallTransitionSta","navigationError","navigationErrorHandlerResult","_this$navigationError","navigationErrorHandler","ee","resolveNavigationPromiseOnError","reject","navCancel","_this$currentTransiti2","_this$currentTransiti3","currentUrlTree","_this$currentNavigati","_this$currentNavigati2","_this$currentNavigati3","_this$currentNavigati4","currentBrowserUrl","_NavigationTransitions","_NavigationTransitions_Factory","isBrowserTriggeredNavigation","RouteReuseStrategy","_RouteReuseStrategy","_RouteReuseStrategy_Factory","DefaultRouteReuseStrategy","BaseRouteReuseStrategy","detachedTree","_DefaultRouteReuseStrategy","ɵ_DefaultRouteReuseStrategy_BaseFactory","_DefaultRouteReuseStrategy_Factory","ɵɵgetInheritedFactory","StateManager","canceledNavigationResolution","urlUpdateStrategy","createStateMemento","getCurrentUrlTree","getRawUrlTree","rawUrlTree","createBrowserPath","commitTransition","routerState","getRouterState","updateStateMemento","stateMemento","resetInternalState","_StateManager","_StateManager_Factory","HistoryStateManager","getState","browserPageId","_this$restoredState$ɵ","_this$restoredState","currentPageId","ɵrouterPageId","registerNonRouterCurrentEntryChangeListener","listener","event","handleRouterEvent","setBrowserUrl","restoreHistory","lastSuccessfulId","isCurrentPathEqualTo","currentBrowserPageId","newState","generateNgRouterState","replaceState","go","navigation","restoringFromCaughtError","targetPagePosition","historyGo","resetUrlToCurrentUrlTree","routerPageId","_HistoryStateManager","ɵ_HistoryStateManager_BaseFactory","_HistoryStateManager_Factory","afterNextNavigation","action","redirecting","exactMatchOptions","subsetMatchOptions","Router","stateManager","_events","_inject$flat","_inject","resetConfig","navigationTransitions","subscribeToNavigationEvents","subscription","opts","mergedTree","info","scheduleNavigation","promise","isPublicRouterEvent","eventsSubscription","resetRootComponentType","initialNavigation","setUpLocationChangeListener","navigateToSyncWithBrowser","_this$nonRouterCurren","nonRouterCurrentEntryChangeSubscription","stateCopy","parseUrl","serializeUrl","getCurrentNavigation","dispose","disposed","createUrlTree","navigationExtras","queryParamsHandling","preserveFragment","f","q","defaultQueryParamsHandling","removeEmptyProps","relativeToSnapshot","navigateByUrl","navigate","validateCommands","isActive","matchOptions","priorPromise","rej","taskId","pendingTasks","queueMicrotask","remove","catch","_Router","_Router_Factory"],"sources":["E:/PMS_A3/A3_Team/node_modules/@angular/router/fesm2022/router-B-Y85L0c.mjs"],"sourcesContent":["/**\n * @license Angular v19.2.6\n * (c) 2010-2025 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport { DOCUMENT, Location } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { ɵisPromise as _isPromise, ɵRuntimeError as _RuntimeError, Injectable, ɵisNgModule as _isNgModule, isStandalone, createEnvironmentInjector, InjectionToken, EventEmitter, input, inject, ViewContainerRef, ChangeDetectorRef, Output, Input, Directive, reflectComponentType, ɵisInjectable as _isInjectable, runInInjectionContext, Component, NgModuleFactory, Compiler, NgZone, afterNextRender, EnvironmentInjector, DestroyRef, ɵConsole as _Console, ɵPendingTasksInternal as _PendingTasksInternal } from '@angular/core';\nimport { isObservable, from, of, BehaviorSubject, combineLatest, EmptyError, concat, defer, pipe, throwError, EMPTY, ConnectableObservable, Subject, Subscription } from 'rxjs';\nimport { map, switchMap, take, startWith, filter, mergeMap, first, concatMap, tap, catchError, scan, defaultIfEmpty, last as last$1, takeLast, finalize, refCount, takeUntil } from 'rxjs/operators';\nimport * as i1 from '@angular/platform-browser';\n\n/**\n * The primary routing outlet.\n *\n * @publicApi\n */\nconst PRIMARY_OUTLET = 'primary';\n/**\n * A private symbol used to store the value of `Route.title` inside the `Route.data` if it is a\n * static string or `Route.resolve` if anything else. This allows us to reuse the existing route\n * data/resolvers to support the title feature without new instrumentation in the `Router` pipeline.\n */\nconst RouteTitleKey = /* @__PURE__ */ Symbol('RouteTitle');\nclass ParamsAsMap {\n    params;\n    constructor(params) {\n        this.params = params || {};\n    }\n    has(name) {\n        return Object.prototype.hasOwnProperty.call(this.params, name);\n    }\n    get(name) {\n        if (this.has(name)) {\n            const v = this.params[name];\n            return Array.isArray(v) ? v[0] : v;\n        }\n        return null;\n    }\n    getAll(name) {\n        if (this.has(name)) {\n            const v = this.params[name];\n            return Array.isArray(v) ? v : [v];\n        }\n        return [];\n    }\n    get keys() {\n        return Object.keys(this.params);\n    }\n}\n/**\n * Converts a `Params` instance to a `ParamMap`.\n * @param params The instance to convert.\n * @returns The new map instance.\n *\n * @publicApi\n */\nfunction convertToParamMap(params) {\n    return new ParamsAsMap(params);\n}\n/**\n * Matches the route configuration (`route`) against the actual URL (`segments`).\n *\n * When no matcher is defined on a `Route`, this is the matcher used by the Router by default.\n *\n * @param segments The remaining unmatched segments in the current navigation\n * @param segmentGroup The current segment group being matched\n * @param route The `Route` to match against.\n *\n * @see {@link UrlMatchResult}\n * @see {@link Route}\n *\n * @returns The resulting match information or `null` if the `route` should not match.\n * @publicApi\n */\nfunction defaultUrlMatcher(segments, segmentGroup, route) {\n    const parts = route.path.split('/');\n    if (parts.length > segments.length) {\n        // The actual URL is shorter than the config, no match\n        return null;\n    }\n    if (route.pathMatch === 'full' &&\n        (segmentGroup.hasChildren() || parts.length < segments.length)) {\n        // The config is longer than the actual URL but we are looking for a full match, return null\n        return null;\n    }\n    const posParams = {};\n    // Check each config part against the actual URL\n    for (let index = 0; index < parts.length; index++) {\n        const part = parts[index];\n        const segment = segments[index];\n        const isParameter = part[0] === ':';\n        if (isParameter) {\n            posParams[part.substring(1)] = segment;\n        }\n        else if (part !== segment.path) {\n            // The actual URL part does not match the config, no match\n            return null;\n        }\n    }\n    return { consumed: segments.slice(0, parts.length), posParams };\n}\n\nfunction shallowEqualArrays(a, b) {\n    if (a.length !== b.length)\n        return false;\n    for (let i = 0; i < a.length; ++i) {\n        if (!shallowEqual(a[i], b[i]))\n            return false;\n    }\n    return true;\n}\nfunction shallowEqual(a, b) {\n    // While `undefined` should never be possible, it would sometimes be the case in IE 11\n    // and pre-chromium Edge. The check below accounts for this edge case.\n    const k1 = a ? getDataKeys(a) : undefined;\n    const k2 = b ? getDataKeys(b) : undefined;\n    if (!k1 || !k2 || k1.length != k2.length) {\n        return false;\n    }\n    let key;\n    for (let i = 0; i < k1.length; i++) {\n        key = k1[i];\n        if (!equalArraysOrString(a[key], b[key])) {\n            return false;\n        }\n    }\n    return true;\n}\n/**\n * Gets the keys of an object, including `symbol` keys.\n */\nfunction getDataKeys(obj) {\n    return [...Object.keys(obj), ...Object.getOwnPropertySymbols(obj)];\n}\n/**\n * Test equality for arrays of strings or a string.\n */\nfunction equalArraysOrString(a, b) {\n    if (Array.isArray(a) && Array.isArray(b)) {\n        if (a.length !== b.length)\n            return false;\n        const aSorted = [...a].sort();\n        const bSorted = [...b].sort();\n        return aSorted.every((val, index) => bSorted[index] === val);\n    }\n    else {\n        return a === b;\n    }\n}\n/**\n * Return the last element of an array.\n */\nfunction last(a) {\n    return a.length > 0 ? a[a.length - 1] : null;\n}\nfunction wrapIntoObservable(value) {\n    if (isObservable(value)) {\n        return value;\n    }\n    if (_isPromise(value)) {\n        // Use `Promise.resolve()` to wrap promise-like instances.\n        // Required ie when a Resolver returns a AngularJS `$q` promise to correctly trigger the\n        // change detection.\n        return from(Promise.resolve(value));\n    }\n    return of(value);\n}\n\nconst pathCompareMap = {\n    'exact': equalSegmentGroups,\n    'subset': containsSegmentGroup,\n};\nconst paramCompareMap = {\n    'exact': equalParams,\n    'subset': containsParams,\n    'ignored': () => true,\n};\nfunction containsTree(container, containee, options) {\n    return (pathCompareMap[options.paths](container.root, containee.root, options.matrixParams) &&\n        paramCompareMap[options.queryParams](container.queryParams, containee.queryParams) &&\n        !(options.fragment === 'exact' && container.fragment !== containee.fragment));\n}\nfunction equalParams(container, containee) {\n    // TODO: This does not handle array params correctly.\n    return shallowEqual(container, containee);\n}\nfunction equalSegmentGroups(container, containee, matrixParams) {\n    if (!equalPath(container.segments, containee.segments))\n        return false;\n    if (!matrixParamsMatch(container.segments, containee.segments, matrixParams)) {\n        return false;\n    }\n    if (container.numberOfChildren !== containee.numberOfChildren)\n        return false;\n    for (const c in containee.children) {\n        if (!container.children[c])\n            return false;\n        if (!equalSegmentGroups(container.children[c], containee.children[c], matrixParams))\n            return false;\n    }\n    return true;\n}\nfunction containsParams(container, containee) {\n    return (Object.keys(containee).length <= Object.keys(container).length &&\n        Object.keys(containee).every((key) => equalArraysOrString(container[key], containee[key])));\n}\nfunction containsSegmentGroup(container, containee, matrixParams) {\n    return containsSegmentGroupHelper(container, containee, containee.segments, matrixParams);\n}\nfunction containsSegmentGroupHelper(container, containee, containeePaths, matrixParams) {\n    if (container.segments.length > containeePaths.length) {\n        const current = container.segments.slice(0, containeePaths.length);\n        if (!equalPath(current, containeePaths))\n            return false;\n        if (containee.hasChildren())\n            return false;\n        if (!matrixParamsMatch(current, containeePaths, matrixParams))\n            return false;\n        return true;\n    }\n    else if (container.segments.length === containeePaths.length) {\n        if (!equalPath(container.segments, containeePaths))\n            return false;\n        if (!matrixParamsMatch(container.segments, containeePaths, matrixParams))\n            return false;\n        for (const c in containee.children) {\n            if (!container.children[c])\n                return false;\n            if (!containsSegmentGroup(container.children[c], containee.children[c], matrixParams)) {\n                return false;\n            }\n        }\n        return true;\n    }\n    else {\n        const current = containeePaths.slice(0, container.segments.length);\n        const next = containeePaths.slice(container.segments.length);\n        if (!equalPath(container.segments, current))\n            return false;\n        if (!matrixParamsMatch(container.segments, current, matrixParams))\n            return false;\n        if (!container.children[PRIMARY_OUTLET])\n            return false;\n        return containsSegmentGroupHelper(container.children[PRIMARY_OUTLET], containee, next, matrixParams);\n    }\n}\nfunction matrixParamsMatch(containerPaths, containeePaths, options) {\n    return containeePaths.every((containeeSegment, i) => {\n        return paramCompareMap[options](containerPaths[i].parameters, containeeSegment.parameters);\n    });\n}\n/**\n * @description\n *\n * Represents the parsed URL.\n *\n * Since a router state is a tree, and the URL is nothing but a serialized state, the URL is a\n * serialized tree.\n * UrlTree is a data structure that provides a lot of affordances in dealing with URLs\n *\n * @usageNotes\n * ### Example\n *\n * ```ts\n * @Component({templateUrl:'template.html'})\n * class MyComponent {\n *   constructor(router: Router) {\n *     const tree: UrlTree =\n *       router.parseUrl('/team/33/(user/victor//support:help)?debug=true#fragment');\n *     const f = tree.fragment; // return 'fragment'\n *     const q = tree.queryParams; // returns {debug: 'true'}\n *     const g: UrlSegmentGroup = tree.root.children[PRIMARY_OUTLET];\n *     const s: UrlSegment[] = g.segments; // returns 2 segments 'team' and '33'\n *     g.children[PRIMARY_OUTLET].segments; // returns 2 segments 'user' and 'victor'\n *     g.children['support'].segments; // return 1 segment 'help'\n *   }\n * }\n * ```\n *\n * @publicApi\n */\nclass UrlTree {\n    root;\n    queryParams;\n    fragment;\n    /** @internal */\n    _queryParamMap;\n    constructor(\n    /** The root segment group of the URL tree */\n    root = new UrlSegmentGroup([], {}), \n    /** The query params of the URL */\n    queryParams = {}, \n    /** The fragment of the URL */\n    fragment = null) {\n        this.root = root;\n        this.queryParams = queryParams;\n        this.fragment = fragment;\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            if (root.segments.length > 0) {\n                throw new _RuntimeError(4015 /* RuntimeErrorCode.INVALID_ROOT_URL_SEGMENT */, 'The root `UrlSegmentGroup` should not contain `segments`. ' +\n                    'Instead, these segments belong in the `children` so they can be associated with a named outlet.');\n            }\n        }\n    }\n    get queryParamMap() {\n        this._queryParamMap ??= convertToParamMap(this.queryParams);\n        return this._queryParamMap;\n    }\n    /** @docsNotRequired */\n    toString() {\n        return DEFAULT_SERIALIZER.serialize(this);\n    }\n}\n/**\n * @description\n *\n * Represents the parsed URL segment group.\n *\n * See `UrlTree` for more information.\n *\n * @publicApi\n */\nclass UrlSegmentGroup {\n    segments;\n    children;\n    /** The parent node in the url tree */\n    parent = null;\n    constructor(\n    /** The URL segments of this group. See `UrlSegment` for more information */\n    segments, \n    /** The list of children of this group */\n    children) {\n        this.segments = segments;\n        this.children = children;\n        Object.values(children).forEach((v) => (v.parent = this));\n    }\n    /** Whether the segment has child segments */\n    hasChildren() {\n        return this.numberOfChildren > 0;\n    }\n    /** Number of child segments */\n    get numberOfChildren() {\n        return Object.keys(this.children).length;\n    }\n    /** @docsNotRequired */\n    toString() {\n        return serializePaths(this);\n    }\n}\n/**\n * @description\n *\n * Represents a single URL segment.\n *\n * A UrlSegment is a part of a URL between the two slashes. It contains a path and the matrix\n * parameters associated with the segment.\n *\n * @usageNotes\n * ### Example\n *\n * ```ts\n * @Component({templateUrl:'template.html'})\n * class MyComponent {\n *   constructor(router: Router) {\n *     const tree: UrlTree = router.parseUrl('/team;id=33');\n *     const g: UrlSegmentGroup = tree.root.children[PRIMARY_OUTLET];\n *     const s: UrlSegment[] = g.segments;\n *     s[0].path; // returns 'team'\n *     s[0].parameters; // returns {id: 33}\n *   }\n * }\n * ```\n *\n * @publicApi\n */\nclass UrlSegment {\n    path;\n    parameters;\n    /** @internal */\n    _parameterMap;\n    constructor(\n    /** The path part of a URL segment */\n    path, \n    /** The matrix parameters associated with a segment */\n    parameters) {\n        this.path = path;\n        this.parameters = parameters;\n    }\n    get parameterMap() {\n        this._parameterMap ??= convertToParamMap(this.parameters);\n        return this._parameterMap;\n    }\n    /** @docsNotRequired */\n    toString() {\n        return serializePath(this);\n    }\n}\nfunction equalSegments(as, bs) {\n    return equalPath(as, bs) && as.every((a, i) => shallowEqual(a.parameters, bs[i].parameters));\n}\nfunction equalPath(as, bs) {\n    if (as.length !== bs.length)\n        return false;\n    return as.every((a, i) => a.path === bs[i].path);\n}\nfunction mapChildrenIntoArray(segment, fn) {\n    let res = [];\n    Object.entries(segment.children).forEach(([childOutlet, child]) => {\n        if (childOutlet === PRIMARY_OUTLET) {\n            res = res.concat(fn(child, childOutlet));\n        }\n    });\n    Object.entries(segment.children).forEach(([childOutlet, child]) => {\n        if (childOutlet !== PRIMARY_OUTLET) {\n            res = res.concat(fn(child, childOutlet));\n        }\n    });\n    return res;\n}\n/**\n * @description\n *\n * Serializes and deserializes a URL string into a URL tree.\n *\n * The url serialization strategy is customizable. You can\n * make all URLs case insensitive by providing a custom UrlSerializer.\n *\n * See `DefaultUrlSerializer` for an example of a URL serializer.\n *\n * @publicApi\n */\nclass UrlSerializer {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: UrlSerializer, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: UrlSerializer, providedIn: 'root', useFactory: () => new DefaultUrlSerializer() });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: UrlSerializer, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root', useFactory: () => new DefaultUrlSerializer() }]\n        }] });\n/**\n * @description\n *\n * A default implementation of the `UrlSerializer`.\n *\n * Example URLs:\n *\n * ```\n * /inbox/33(popup:compose)\n * /inbox/33;open=true/messages/44\n * ```\n *\n * DefaultUrlSerializer uses parentheses to serialize secondary segments (e.g., popup:compose), the\n * colon syntax to specify the outlet, and the ';parameter=value' syntax (e.g., open=true) to\n * specify route specific parameters.\n *\n * @publicApi\n */\nclass DefaultUrlSerializer {\n    /** Parses a url into a `UrlTree` */\n    parse(url) {\n        const p = new UrlParser(url);\n        return new UrlTree(p.parseRootSegment(), p.parseQueryParams(), p.parseFragment());\n    }\n    /** Converts a `UrlTree` into a url */\n    serialize(tree) {\n        const segment = `/${serializeSegment(tree.root, true)}`;\n        const query = serializeQueryParams(tree.queryParams);\n        const fragment = typeof tree.fragment === `string` ? `#${encodeUriFragment(tree.fragment)}` : '';\n        return `${segment}${query}${fragment}`;\n    }\n}\nconst DEFAULT_SERIALIZER = new DefaultUrlSerializer();\nfunction serializePaths(segment) {\n    return segment.segments.map((p) => serializePath(p)).join('/');\n}\nfunction serializeSegment(segment, root) {\n    if (!segment.hasChildren()) {\n        return serializePaths(segment);\n    }\n    if (root) {\n        const primary = segment.children[PRIMARY_OUTLET]\n            ? serializeSegment(segment.children[PRIMARY_OUTLET], false)\n            : '';\n        const children = [];\n        Object.entries(segment.children).forEach(([k, v]) => {\n            if (k !== PRIMARY_OUTLET) {\n                children.push(`${k}:${serializeSegment(v, false)}`);\n            }\n        });\n        return children.length > 0 ? `${primary}(${children.join('//')})` : primary;\n    }\n    else {\n        const children = mapChildrenIntoArray(segment, (v, k) => {\n            if (k === PRIMARY_OUTLET) {\n                return [serializeSegment(segment.children[PRIMARY_OUTLET], false)];\n            }\n            return [`${k}:${serializeSegment(v, false)}`];\n        });\n        // use no parenthesis if the only child is a primary outlet route\n        if (Object.keys(segment.children).length === 1 && segment.children[PRIMARY_OUTLET] != null) {\n            return `${serializePaths(segment)}/${children[0]}`;\n        }\n        return `${serializePaths(segment)}/(${children.join('//')})`;\n    }\n}\n/**\n * Encodes a URI string with the default encoding. This function will only ever be called from\n * `encodeUriQuery` or `encodeUriSegment` as it's the base set of encodings to be used. We need\n * a custom encoding because encodeURIComponent is too aggressive and encodes stuff that doesn't\n * have to be encoded per https://url.spec.whatwg.org.\n */\nfunction encodeUriString(s) {\n    return encodeURIComponent(s)\n        .replace(/%40/g, '@')\n        .replace(/%3A/gi, ':')\n        .replace(/%24/g, '$')\n        .replace(/%2C/gi, ',');\n}\n/**\n * This function should be used to encode both keys and values in a query string key/value. In\n * the following URL, you need to call encodeUriQuery on \"k\" and \"v\":\n *\n * http://www.site.org/html;mk=mv?k=v#f\n */\nfunction encodeUriQuery(s) {\n    return encodeUriString(s).replace(/%3B/gi, ';');\n}\n/**\n * This function should be used to encode a URL fragment. In the following URL, you need to call\n * encodeUriFragment on \"f\":\n *\n * http://www.site.org/html;mk=mv?k=v#f\n */\nfunction encodeUriFragment(s) {\n    return encodeURI(s);\n}\n/**\n * This function should be run on any URI segment as well as the key and value in a key/value\n * pair for matrix params. In the following URL, you need to call encodeUriSegment on \"html\",\n * \"mk\", and \"mv\":\n *\n * http://www.site.org/html;mk=mv?k=v#f\n */\nfunction encodeUriSegment(s) {\n    return encodeUriString(s).replace(/\\(/g, '%28').replace(/\\)/g, '%29').replace(/%26/gi, '&');\n}\nfunction decode(s) {\n    return decodeURIComponent(s);\n}\n// Query keys/values should have the \"+\" replaced first, as \"+\" in a query string is \" \".\n// decodeURIComponent function will not decode \"+\" as a space.\nfunction decodeQuery(s) {\n    return decode(s.replace(/\\+/g, '%20'));\n}\nfunction serializePath(path) {\n    return `${encodeUriSegment(path.path)}${serializeMatrixParams(path.parameters)}`;\n}\nfunction serializeMatrixParams(params) {\n    return Object.entries(params)\n        .map(([key, value]) => `;${encodeUriSegment(key)}=${encodeUriSegment(value)}`)\n        .join('');\n}\nfunction serializeQueryParams(params) {\n    const strParams = Object.entries(params)\n        .map(([name, value]) => {\n        return Array.isArray(value)\n            ? value.map((v) => `${encodeUriQuery(name)}=${encodeUriQuery(v)}`).join('&')\n            : `${encodeUriQuery(name)}=${encodeUriQuery(value)}`;\n    })\n        .filter((s) => s);\n    return strParams.length ? `?${strParams.join('&')}` : '';\n}\nconst SEGMENT_RE = /^[^\\/()?;#]+/;\nfunction matchSegments(str) {\n    const match = str.match(SEGMENT_RE);\n    return match ? match[0] : '';\n}\nconst MATRIX_PARAM_SEGMENT_RE = /^[^\\/()?;=#]+/;\nfunction matchMatrixKeySegments(str) {\n    const match = str.match(MATRIX_PARAM_SEGMENT_RE);\n    return match ? match[0] : '';\n}\nconst QUERY_PARAM_RE = /^[^=?&#]+/;\n// Return the name of the query param at the start of the string or an empty string\nfunction matchQueryParams(str) {\n    const match = str.match(QUERY_PARAM_RE);\n    return match ? match[0] : '';\n}\nconst QUERY_PARAM_VALUE_RE = /^[^&#]+/;\n// Return the value of the query param at the start of the string or an empty string\nfunction matchUrlQueryParamValue(str) {\n    const match = str.match(QUERY_PARAM_VALUE_RE);\n    return match ? match[0] : '';\n}\nclass UrlParser {\n    url;\n    remaining;\n    constructor(url) {\n        this.url = url;\n        this.remaining = url;\n    }\n    parseRootSegment() {\n        this.consumeOptional('/');\n        if (this.remaining === '' || this.peekStartsWith('?') || this.peekStartsWith('#')) {\n            return new UrlSegmentGroup([], {});\n        }\n        // The root segment group never has segments\n        return new UrlSegmentGroup([], this.parseChildren());\n    }\n    parseQueryParams() {\n        const params = {};\n        if (this.consumeOptional('?')) {\n            do {\n                this.parseQueryParam(params);\n            } while (this.consumeOptional('&'));\n        }\n        return params;\n    }\n    parseFragment() {\n        return this.consumeOptional('#') ? decodeURIComponent(this.remaining) : null;\n    }\n    parseChildren() {\n        if (this.remaining === '') {\n            return {};\n        }\n        this.consumeOptional('/');\n        const segments = [];\n        if (!this.peekStartsWith('(')) {\n            segments.push(this.parseSegment());\n        }\n        while (this.peekStartsWith('/') && !this.peekStartsWith('//') && !this.peekStartsWith('/(')) {\n            this.capture('/');\n            segments.push(this.parseSegment());\n        }\n        let children = {};\n        if (this.peekStartsWith('/(')) {\n            this.capture('/');\n            children = this.parseParens(true);\n        }\n        let res = {};\n        if (this.peekStartsWith('(')) {\n            res = this.parseParens(false);\n        }\n        if (segments.length > 0 || Object.keys(children).length > 0) {\n            res[PRIMARY_OUTLET] = new UrlSegmentGroup(segments, children);\n        }\n        return res;\n    }\n    // parse a segment with its matrix parameters\n    // ie `name;k1=v1;k2`\n    parseSegment() {\n        const path = matchSegments(this.remaining);\n        if (path === '' && this.peekStartsWith(';')) {\n            throw new _RuntimeError(4009 /* RuntimeErrorCode.EMPTY_PATH_WITH_PARAMS */, (typeof ngDevMode === 'undefined' || ngDevMode) &&\n                `Empty path url segment cannot have parameters: '${this.remaining}'.`);\n        }\n        this.capture(path);\n        return new UrlSegment(decode(path), this.parseMatrixParams());\n    }\n    parseMatrixParams() {\n        const params = {};\n        while (this.consumeOptional(';')) {\n            this.parseParam(params);\n        }\n        return params;\n    }\n    parseParam(params) {\n        const key = matchMatrixKeySegments(this.remaining);\n        if (!key) {\n            return;\n        }\n        this.capture(key);\n        let value = '';\n        if (this.consumeOptional('=')) {\n            const valueMatch = matchSegments(this.remaining);\n            if (valueMatch) {\n                value = valueMatch;\n                this.capture(value);\n            }\n        }\n        params[decode(key)] = decode(value);\n    }\n    // Parse a single query parameter `name[=value]`\n    parseQueryParam(params) {\n        const key = matchQueryParams(this.remaining);\n        if (!key) {\n            return;\n        }\n        this.capture(key);\n        let value = '';\n        if (this.consumeOptional('=')) {\n            const valueMatch = matchUrlQueryParamValue(this.remaining);\n            if (valueMatch) {\n                value = valueMatch;\n                this.capture(value);\n            }\n        }\n        const decodedKey = decodeQuery(key);\n        const decodedVal = decodeQuery(value);\n        if (params.hasOwnProperty(decodedKey)) {\n            // Append to existing values\n            let currentVal = params[decodedKey];\n            if (!Array.isArray(currentVal)) {\n                currentVal = [currentVal];\n                params[decodedKey] = currentVal;\n            }\n            currentVal.push(decodedVal);\n        }\n        else {\n            // Create a new value\n            params[decodedKey] = decodedVal;\n        }\n    }\n    // parse `(a/b//outlet_name:c/d)`\n    parseParens(allowPrimary) {\n        const segments = {};\n        this.capture('(');\n        while (!this.consumeOptional(')') && this.remaining.length > 0) {\n            const path = matchSegments(this.remaining);\n            const next = this.remaining[path.length];\n            // if is is not one of these characters, then the segment was unescaped\n            // or the group was not closed\n            if (next !== '/' && next !== ')' && next !== ';') {\n                throw new _RuntimeError(4010 /* RuntimeErrorCode.UNPARSABLE_URL */, (typeof ngDevMode === 'undefined' || ngDevMode) && `Cannot parse url '${this.url}'`);\n            }\n            let outletName = undefined;\n            if (path.indexOf(':') > -1) {\n                outletName = path.slice(0, path.indexOf(':'));\n                this.capture(outletName);\n                this.capture(':');\n            }\n            else if (allowPrimary) {\n                outletName = PRIMARY_OUTLET;\n            }\n            const children = this.parseChildren();\n            segments[outletName] =\n                Object.keys(children).length === 1\n                    ? children[PRIMARY_OUTLET]\n                    : new UrlSegmentGroup([], children);\n            this.consumeOptional('//');\n        }\n        return segments;\n    }\n    peekStartsWith(str) {\n        return this.remaining.startsWith(str);\n    }\n    // Consumes the prefix when it is present and returns whether it has been consumed\n    consumeOptional(str) {\n        if (this.peekStartsWith(str)) {\n            this.remaining = this.remaining.substring(str.length);\n            return true;\n        }\n        return false;\n    }\n    capture(str) {\n        if (!this.consumeOptional(str)) {\n            throw new _RuntimeError(4011 /* RuntimeErrorCode.UNEXPECTED_VALUE_IN_URL */, (typeof ngDevMode === 'undefined' || ngDevMode) && `Expected \"${str}\".`);\n        }\n    }\n}\nfunction createRoot(rootCandidate) {\n    return rootCandidate.segments.length > 0\n        ? new UrlSegmentGroup([], { [PRIMARY_OUTLET]: rootCandidate })\n        : rootCandidate;\n}\n/**\n * Recursively\n * - merges primary segment children into their parents\n * - drops empty children (those which have no segments and no children themselves). This latter\n * prevents serializing a group into something like `/a(aux:)`, where `aux` is an empty child\n * segment.\n * - merges named outlets without a primary segment sibling into the children. This prevents\n * serializing a URL like `//(a:a)(b:b) instead of `/(a:a//b:b)` when the aux b route lives on the\n * root but the `a` route lives under an empty path primary route.\n */\nfunction squashSegmentGroup(segmentGroup) {\n    const newChildren = {};\n    for (const [childOutlet, child] of Object.entries(segmentGroup.children)) {\n        const childCandidate = squashSegmentGroup(child);\n        // moves named children in an empty path primary child into this group\n        if (childOutlet === PRIMARY_OUTLET &&\n            childCandidate.segments.length === 0 &&\n            childCandidate.hasChildren()) {\n            for (const [grandChildOutlet, grandChild] of Object.entries(childCandidate.children)) {\n                newChildren[grandChildOutlet] = grandChild;\n            }\n        } // don't add empty children\n        else if (childCandidate.segments.length > 0 || childCandidate.hasChildren()) {\n            newChildren[childOutlet] = childCandidate;\n        }\n    }\n    const s = new UrlSegmentGroup(segmentGroup.segments, newChildren);\n    return mergeTrivialChildren(s);\n}\n/**\n * When possible, merges the primary outlet child into the parent `UrlSegmentGroup`.\n *\n * When a segment group has only one child which is a primary outlet, merges that child into the\n * parent. That is, the child segment group's segments are merged into the `s` and the child's\n * children become the children of `s`. Think of this like a 'squash', merging the child segment\n * group into the parent.\n */\nfunction mergeTrivialChildren(s) {\n    if (s.numberOfChildren === 1 && s.children[PRIMARY_OUTLET]) {\n        const c = s.children[PRIMARY_OUTLET];\n        return new UrlSegmentGroup(s.segments.concat(c.segments), c.children);\n    }\n    return s;\n}\nfunction isUrlTree(v) {\n    return v instanceof UrlTree;\n}\n\n/**\n * Creates a `UrlTree` relative to an `ActivatedRouteSnapshot`.\n *\n * @publicApi\n *\n *\n * @param relativeTo The `ActivatedRouteSnapshot` to apply the commands to\n * @param commands An array of URL fragments with which to construct the new URL tree.\n * If the path is static, can be the literal URL string. For a dynamic path, pass an array of path\n * segments, followed by the parameters for each segment.\n * The fragments are applied to the one provided in the `relativeTo` parameter.\n * @param queryParams The query parameters for the `UrlTree`. `null` if the `UrlTree` does not have\n *     any query parameters.\n * @param fragment The fragment for the `UrlTree`. `null` if the `UrlTree` does not have a fragment.\n *\n * @usageNotes\n *\n * ```ts\n * // create /team/33/user/11\n * createUrlTreeFromSnapshot(snapshot, ['/team', 33, 'user', 11]);\n *\n * // create /team/33;expand=true/user/11\n * createUrlTreeFromSnapshot(snapshot, ['/team', 33, {expand: true}, 'user', 11]);\n *\n * // you can collapse static segments like this (this works only with the first passed-in value):\n * createUrlTreeFromSnapshot(snapshot, ['/team/33/user', userId]);\n *\n * // If the first segment can contain slashes, and you do not want the router to split it,\n * // you can do the following:\n * createUrlTreeFromSnapshot(snapshot, [{segmentPath: '/one/two'}]);\n *\n * // create /team/33/(user/11//right:chat)\n * createUrlTreeFromSnapshot(snapshot, ['/team', 33, {outlets: {primary: 'user/11', right:\n * 'chat'}}], null, null);\n *\n * // remove the right secondary node\n * createUrlTreeFromSnapshot(snapshot, ['/team', 33, {outlets: {primary: 'user/11', right: null}}]);\n *\n * // For the examples below, assume the current URL is for the `/team/33/user/11` and the\n * `ActivatedRouteSnapshot` points to `user/11`:\n *\n * // navigate to /team/33/user/11/details\n * createUrlTreeFromSnapshot(snapshot, ['details']);\n *\n * // navigate to /team/33/user/22\n * createUrlTreeFromSnapshot(snapshot, ['../22']);\n *\n * // navigate to /team/44/user/22\n * createUrlTreeFromSnapshot(snapshot, ['../../team/44/user/22']);\n * ```\n */\nfunction createUrlTreeFromSnapshot(relativeTo, commands, queryParams = null, fragment = null) {\n    const relativeToUrlSegmentGroup = createSegmentGroupFromRoute(relativeTo);\n    return createUrlTreeFromSegmentGroup(relativeToUrlSegmentGroup, commands, queryParams, fragment);\n}\nfunction createSegmentGroupFromRoute(route) {\n    let targetGroup;\n    function createSegmentGroupFromRouteRecursive(currentRoute) {\n        const childOutlets = {};\n        for (const childSnapshot of currentRoute.children) {\n            const root = createSegmentGroupFromRouteRecursive(childSnapshot);\n            childOutlets[childSnapshot.outlet] = root;\n        }\n        const segmentGroup = new UrlSegmentGroup(currentRoute.url, childOutlets);\n        if (currentRoute === route) {\n            targetGroup = segmentGroup;\n        }\n        return segmentGroup;\n    }\n    const rootCandidate = createSegmentGroupFromRouteRecursive(route.root);\n    const rootSegmentGroup = createRoot(rootCandidate);\n    return targetGroup ?? rootSegmentGroup;\n}\nfunction createUrlTreeFromSegmentGroup(relativeTo, commands, queryParams, fragment) {\n    let root = relativeTo;\n    while (root.parent) {\n        root = root.parent;\n    }\n    // There are no commands so the `UrlTree` goes to the same path as the one created from the\n    // `UrlSegmentGroup`. All we need to do is update the `queryParams` and `fragment` without\n    // applying any other logic.\n    if (commands.length === 0) {\n        return tree(root, root, root, queryParams, fragment);\n    }\n    const nav = computeNavigation(commands);\n    if (nav.toRoot()) {\n        return tree(root, root, new UrlSegmentGroup([], {}), queryParams, fragment);\n    }\n    const position = findStartingPositionForTargetGroup(nav, root, relativeTo);\n    const newSegmentGroup = position.processChildren\n        ? updateSegmentGroupChildren(position.segmentGroup, position.index, nav.commands)\n        : updateSegmentGroup(position.segmentGroup, position.index, nav.commands);\n    return tree(root, position.segmentGroup, newSegmentGroup, queryParams, fragment);\n}\nfunction isMatrixParams(command) {\n    return typeof command === 'object' && command != null && !command.outlets && !command.segmentPath;\n}\n/**\n * Determines if a given command has an `outlets` map. When we encounter a command\n * with an outlets k/v map, we need to apply each outlet individually to the existing segment.\n */\nfunction isCommandWithOutlets(command) {\n    return typeof command === 'object' && command != null && command.outlets;\n}\nfunction tree(oldRoot, oldSegmentGroup, newSegmentGroup, queryParams, fragment) {\n    let qp = {};\n    if (queryParams) {\n        Object.entries(queryParams).forEach(([name, value]) => {\n            qp[name] = Array.isArray(value) ? value.map((v) => `${v}`) : `${value}`;\n        });\n    }\n    let rootCandidate;\n    if (oldRoot === oldSegmentGroup) {\n        rootCandidate = newSegmentGroup;\n    }\n    else {\n        rootCandidate = replaceSegment(oldRoot, oldSegmentGroup, newSegmentGroup);\n    }\n    const newRoot = createRoot(squashSegmentGroup(rootCandidate));\n    return new UrlTree(newRoot, qp, fragment);\n}\n/**\n * Replaces the `oldSegment` which is located in some child of the `current` with the `newSegment`.\n * This also has the effect of creating new `UrlSegmentGroup` copies to update references. This\n * shouldn't be necessary but the fallback logic for an invalid ActivatedRoute in the creation uses\n * the Router's current url tree. If we don't create new segment groups, we end up modifying that\n * value.\n */\nfunction replaceSegment(current, oldSegment, newSegment) {\n    const children = {};\n    Object.entries(current.children).forEach(([outletName, c]) => {\n        if (c === oldSegment) {\n            children[outletName] = newSegment;\n        }\n        else {\n            children[outletName] = replaceSegment(c, oldSegment, newSegment);\n        }\n    });\n    return new UrlSegmentGroup(current.segments, children);\n}\nclass Navigation {\n    isAbsolute;\n    numberOfDoubleDots;\n    commands;\n    constructor(isAbsolute, numberOfDoubleDots, commands) {\n        this.isAbsolute = isAbsolute;\n        this.numberOfDoubleDots = numberOfDoubleDots;\n        this.commands = commands;\n        if (isAbsolute && commands.length > 0 && isMatrixParams(commands[0])) {\n            throw new _RuntimeError(4003 /* RuntimeErrorCode.ROOT_SEGMENT_MATRIX_PARAMS */, (typeof ngDevMode === 'undefined' || ngDevMode) &&\n                'Root segment cannot have matrix parameters');\n        }\n        const cmdWithOutlet = commands.find(isCommandWithOutlets);\n        if (cmdWithOutlet && cmdWithOutlet !== last(commands)) {\n            throw new _RuntimeError(4004 /* RuntimeErrorCode.MISPLACED_OUTLETS_COMMAND */, (typeof ngDevMode === 'undefined' || ngDevMode) &&\n                '{outlets:{}} has to be the last command');\n        }\n    }\n    toRoot() {\n        return this.isAbsolute && this.commands.length === 1 && this.commands[0] == '/';\n    }\n}\n/** Transforms commands to a normalized `Navigation` */\nfunction computeNavigation(commands) {\n    if (typeof commands[0] === 'string' && commands.length === 1 && commands[0] === '/') {\n        return new Navigation(true, 0, commands);\n    }\n    let numberOfDoubleDots = 0;\n    let isAbsolute = false;\n    const res = commands.reduce((res, cmd, cmdIdx) => {\n        if (typeof cmd === 'object' && cmd != null) {\n            if (cmd.outlets) {\n                const outlets = {};\n                Object.entries(cmd.outlets).forEach(([name, commands]) => {\n                    outlets[name] = typeof commands === 'string' ? commands.split('/') : commands;\n                });\n                return [...res, { outlets }];\n            }\n            if (cmd.segmentPath) {\n                return [...res, cmd.segmentPath];\n            }\n        }\n        if (!(typeof cmd === 'string')) {\n            return [...res, cmd];\n        }\n        if (cmdIdx === 0) {\n            cmd.split('/').forEach((urlPart, partIndex) => {\n                if (partIndex == 0 && urlPart === '.') ;\n                else if (partIndex == 0 && urlPart === '') {\n                    //  '/a'\n                    isAbsolute = true;\n                }\n                else if (urlPart === '..') {\n                    //  '../a'\n                    numberOfDoubleDots++;\n                }\n                else if (urlPart != '') {\n                    res.push(urlPart);\n                }\n            });\n            return res;\n        }\n        return [...res, cmd];\n    }, []);\n    return new Navigation(isAbsolute, numberOfDoubleDots, res);\n}\nclass Position {\n    segmentGroup;\n    processChildren;\n    index;\n    constructor(segmentGroup, processChildren, index) {\n        this.segmentGroup = segmentGroup;\n        this.processChildren = processChildren;\n        this.index = index;\n    }\n}\nfunction findStartingPositionForTargetGroup(nav, root, target) {\n    if (nav.isAbsolute) {\n        return new Position(root, true, 0);\n    }\n    if (!target) {\n        // `NaN` is used only to maintain backwards compatibility with incorrectly mocked\n        // `ActivatedRouteSnapshot` in tests. In prior versions of this code, the position here was\n        // determined based on an internal property that was rarely mocked, resulting in `NaN`. In\n        // reality, this code path should _never_ be touched since `target` is not allowed to be falsey.\n        return new Position(root, false, NaN);\n    }\n    if (target.parent === null) {\n        return new Position(target, true, 0);\n    }\n    const modifier = isMatrixParams(nav.commands[0]) ? 0 : 1;\n    const index = target.segments.length - 1 + modifier;\n    return createPositionApplyingDoubleDots(target, index, nav.numberOfDoubleDots);\n}\nfunction createPositionApplyingDoubleDots(group, index, numberOfDoubleDots) {\n    let g = group;\n    let ci = index;\n    let dd = numberOfDoubleDots;\n    while (dd > ci) {\n        dd -= ci;\n        g = g.parent;\n        if (!g) {\n            throw new _RuntimeError(4005 /* RuntimeErrorCode.INVALID_DOUBLE_DOTS */, (typeof ngDevMode === 'undefined' || ngDevMode) && \"Invalid number of '../'\");\n        }\n        ci = g.segments.length;\n    }\n    return new Position(g, false, ci - dd);\n}\nfunction getOutlets(commands) {\n    if (isCommandWithOutlets(commands[0])) {\n        return commands[0].outlets;\n    }\n    return { [PRIMARY_OUTLET]: commands };\n}\nfunction updateSegmentGroup(segmentGroup, startIndex, commands) {\n    segmentGroup ??= new UrlSegmentGroup([], {});\n    if (segmentGroup.segments.length === 0 && segmentGroup.hasChildren()) {\n        return updateSegmentGroupChildren(segmentGroup, startIndex, commands);\n    }\n    const m = prefixedWith(segmentGroup, startIndex, commands);\n    const slicedCommands = commands.slice(m.commandIndex);\n    if (m.match && m.pathIndex < segmentGroup.segments.length) {\n        const g = new UrlSegmentGroup(segmentGroup.segments.slice(0, m.pathIndex), {});\n        g.children[PRIMARY_OUTLET] = new UrlSegmentGroup(segmentGroup.segments.slice(m.pathIndex), segmentGroup.children);\n        return updateSegmentGroupChildren(g, 0, slicedCommands);\n    }\n    else if (m.match && slicedCommands.length === 0) {\n        return new UrlSegmentGroup(segmentGroup.segments, {});\n    }\n    else if (m.match && !segmentGroup.hasChildren()) {\n        return createNewSegmentGroup(segmentGroup, startIndex, commands);\n    }\n    else if (m.match) {\n        return updateSegmentGroupChildren(segmentGroup, 0, slicedCommands);\n    }\n    else {\n        return createNewSegmentGroup(segmentGroup, startIndex, commands);\n    }\n}\nfunction updateSegmentGroupChildren(segmentGroup, startIndex, commands) {\n    if (commands.length === 0) {\n        return new UrlSegmentGroup(segmentGroup.segments, {});\n    }\n    else {\n        const outlets = getOutlets(commands);\n        const children = {};\n        // If the set of commands applies to anything other than the primary outlet and the child\n        // segment is an empty path primary segment on its own, we want to apply the commands to the\n        // empty child path rather than here. The outcome is that the empty primary child is effectively\n        // removed from the final output UrlTree. Imagine the following config:\n        //\n        // {path: '', children: [{path: '**', outlet: 'popup'}]}.\n        //\n        // Navigation to /(popup:a) will activate the child outlet correctly Given a follow-up\n        // navigation with commands\n        // ['/', {outlets: {'popup': 'b'}}], we _would not_ want to apply the outlet commands to the\n        // root segment because that would result in\n        // //(popup:a)(popup:b) since the outlet command got applied one level above where it appears in\n        // the `ActivatedRoute` rather than updating the existing one.\n        //\n        // Because empty paths do not appear in the URL segments and the fact that the segments used in\n        // the output `UrlTree` are squashed to eliminate these empty paths where possible\n        // https://github.com/angular/angular/blob/13f10de40e25c6900ca55bd83b36bd533dacfa9e/packages/router/src/url_tree.ts#L755\n        // it can be hard to determine what is the right thing to do when applying commands to a\n        // `UrlSegmentGroup` that is created from an \"unsquashed\"/expanded `ActivatedRoute` tree.\n        // This code effectively \"squashes\" empty path primary routes when they have no siblings on\n        // the same level of the tree.\n        if (Object.keys(outlets).some((o) => o !== PRIMARY_OUTLET) &&\n            segmentGroup.children[PRIMARY_OUTLET] &&\n            segmentGroup.numberOfChildren === 1 &&\n            segmentGroup.children[PRIMARY_OUTLET].segments.length === 0) {\n            const childrenOfEmptyChild = updateSegmentGroupChildren(segmentGroup.children[PRIMARY_OUTLET], startIndex, commands);\n            return new UrlSegmentGroup(segmentGroup.segments, childrenOfEmptyChild.children);\n        }\n        Object.entries(outlets).forEach(([outlet, commands]) => {\n            if (typeof commands === 'string') {\n                commands = [commands];\n            }\n            if (commands !== null) {\n                children[outlet] = updateSegmentGroup(segmentGroup.children[outlet], startIndex, commands);\n            }\n        });\n        Object.entries(segmentGroup.children).forEach(([childOutlet, child]) => {\n            if (outlets[childOutlet] === undefined) {\n                children[childOutlet] = child;\n            }\n        });\n        return new UrlSegmentGroup(segmentGroup.segments, children);\n    }\n}\nfunction prefixedWith(segmentGroup, startIndex, commands) {\n    let currentCommandIndex = 0;\n    let currentPathIndex = startIndex;\n    const noMatch = { match: false, pathIndex: 0, commandIndex: 0 };\n    while (currentPathIndex < segmentGroup.segments.length) {\n        if (currentCommandIndex >= commands.length)\n            return noMatch;\n        const path = segmentGroup.segments[currentPathIndex];\n        const command = commands[currentCommandIndex];\n        // Do not try to consume command as part of the prefixing if it has outlets because it can\n        // contain outlets other than the one being processed. Consuming the outlets command would\n        // result in other outlets being ignored.\n        if (isCommandWithOutlets(command)) {\n            break;\n        }\n        const curr = `${command}`;\n        const next = currentCommandIndex < commands.length - 1 ? commands[currentCommandIndex + 1] : null;\n        if (currentPathIndex > 0 && curr === undefined)\n            break;\n        if (curr && next && typeof next === 'object' && next.outlets === undefined) {\n            if (!compare(curr, next, path))\n                return noMatch;\n            currentCommandIndex += 2;\n        }\n        else {\n            if (!compare(curr, {}, path))\n                return noMatch;\n            currentCommandIndex++;\n        }\n        currentPathIndex++;\n    }\n    return { match: true, pathIndex: currentPathIndex, commandIndex: currentCommandIndex };\n}\nfunction createNewSegmentGroup(segmentGroup, startIndex, commands) {\n    const paths = segmentGroup.segments.slice(0, startIndex);\n    let i = 0;\n    while (i < commands.length) {\n        const command = commands[i];\n        if (isCommandWithOutlets(command)) {\n            const children = createNewSegmentChildren(command.outlets);\n            return new UrlSegmentGroup(paths, children);\n        }\n        // if we start with an object literal, we need to reuse the path part from the segment\n        if (i === 0 && isMatrixParams(commands[0])) {\n            const p = segmentGroup.segments[startIndex];\n            paths.push(new UrlSegment(p.path, stringify(commands[0])));\n            i++;\n            continue;\n        }\n        const curr = isCommandWithOutlets(command) ? command.outlets[PRIMARY_OUTLET] : `${command}`;\n        const next = i < commands.length - 1 ? commands[i + 1] : null;\n        if (curr && next && isMatrixParams(next)) {\n            paths.push(new UrlSegment(curr, stringify(next)));\n            i += 2;\n        }\n        else {\n            paths.push(new UrlSegment(curr, {}));\n            i++;\n        }\n    }\n    return new UrlSegmentGroup(paths, {});\n}\nfunction createNewSegmentChildren(outlets) {\n    const children = {};\n    Object.entries(outlets).forEach(([outlet, commands]) => {\n        if (typeof commands === 'string') {\n            commands = [commands];\n        }\n        if (commands !== null) {\n            children[outlet] = createNewSegmentGroup(new UrlSegmentGroup([], {}), 0, commands);\n        }\n    });\n    return children;\n}\nfunction stringify(params) {\n    const res = {};\n    Object.entries(params).forEach(([k, v]) => (res[k] = `${v}`));\n    return res;\n}\nfunction compare(path, params, segment) {\n    return path == segment.path && shallowEqual(params, segment.parameters);\n}\n\nconst IMPERATIVE_NAVIGATION = 'imperative';\n/**\n * Identifies the type of a router event.\n *\n * @publicApi\n */\nvar EventType;\n(function (EventType) {\n    EventType[EventType[\"NavigationStart\"] = 0] = \"NavigationStart\";\n    EventType[EventType[\"NavigationEnd\"] = 1] = \"NavigationEnd\";\n    EventType[EventType[\"NavigationCancel\"] = 2] = \"NavigationCancel\";\n    EventType[EventType[\"NavigationError\"] = 3] = \"NavigationError\";\n    EventType[EventType[\"RoutesRecognized\"] = 4] = \"RoutesRecognized\";\n    EventType[EventType[\"ResolveStart\"] = 5] = \"ResolveStart\";\n    EventType[EventType[\"ResolveEnd\"] = 6] = \"ResolveEnd\";\n    EventType[EventType[\"GuardsCheckStart\"] = 7] = \"GuardsCheckStart\";\n    EventType[EventType[\"GuardsCheckEnd\"] = 8] = \"GuardsCheckEnd\";\n    EventType[EventType[\"RouteConfigLoadStart\"] = 9] = \"RouteConfigLoadStart\";\n    EventType[EventType[\"RouteConfigLoadEnd\"] = 10] = \"RouteConfigLoadEnd\";\n    EventType[EventType[\"ChildActivationStart\"] = 11] = \"ChildActivationStart\";\n    EventType[EventType[\"ChildActivationEnd\"] = 12] = \"ChildActivationEnd\";\n    EventType[EventType[\"ActivationStart\"] = 13] = \"ActivationStart\";\n    EventType[EventType[\"ActivationEnd\"] = 14] = \"ActivationEnd\";\n    EventType[EventType[\"Scroll\"] = 15] = \"Scroll\";\n    EventType[EventType[\"NavigationSkipped\"] = 16] = \"NavigationSkipped\";\n})(EventType || (EventType = {}));\n/**\n * Base for events the router goes through, as opposed to events tied to a specific\n * route. Fired one time for any given navigation.\n *\n * The following code shows how a class subscribes to router events.\n *\n * ```ts\n * import {Event, RouterEvent, Router} from '@angular/router';\n *\n * class MyService {\n *   constructor(public router: Router) {\n *     router.events.pipe(\n *        filter((e: Event | RouterEvent): e is RouterEvent => e instanceof RouterEvent)\n *     ).subscribe((e: RouterEvent) => {\n *       // Do something\n *     });\n *   }\n * }\n * ```\n *\n * @see {@link Event}\n * @see [Router events summary](guide/routing/router-reference#router-events)\n * @publicApi\n */\nclass RouterEvent {\n    id;\n    url;\n    constructor(\n    /** A unique ID that the router assigns to every router navigation. */\n    id, \n    /** The URL that is the destination for this navigation. */\n    url) {\n        this.id = id;\n        this.url = url;\n    }\n}\n/**\n * An event triggered when a navigation starts.\n *\n * @publicApi\n */\nclass NavigationStart extends RouterEvent {\n    type = EventType.NavigationStart;\n    /**\n     * Identifies the call or event that triggered the navigation.\n     * An `imperative` trigger is a call to `router.navigateByUrl()` or `router.navigate()`.\n     *\n     * @see {@link NavigationEnd}\n     * @see {@link NavigationCancel}\n     * @see {@link NavigationError}\n     */\n    navigationTrigger;\n    /**\n     * The navigation state that was previously supplied to the `pushState` call,\n     * when the navigation is triggered by a `popstate` event. Otherwise null.\n     *\n     * The state object is defined by `NavigationExtras`, and contains any\n     * developer-defined state value, as well as a unique ID that\n     * the router assigns to every router transition/navigation.\n     *\n     * From the perspective of the router, the router never \"goes back\".\n     * When the user clicks on the back button in the browser,\n     * a new navigation ID is created.\n     *\n     * Use the ID in this previous-state object to differentiate between a newly created\n     * state and one returned to by a `popstate` event, so that you can restore some\n     * remembered state, such as scroll position.\n     *\n     */\n    restoredState;\n    constructor(\n    /** @docsNotRequired */\n    id, \n    /** @docsNotRequired */\n    url, \n    /** @docsNotRequired */\n    navigationTrigger = 'imperative', \n    /** @docsNotRequired */\n    restoredState = null) {\n        super(id, url);\n        this.navigationTrigger = navigationTrigger;\n        this.restoredState = restoredState;\n    }\n    /** @docsNotRequired */\n    toString() {\n        return `NavigationStart(id: ${this.id}, url: '${this.url}')`;\n    }\n}\n/**\n * An event triggered when a navigation ends successfully.\n *\n * @see {@link NavigationStart}\n * @see {@link NavigationCancel}\n * @see {@link NavigationError}\n *\n * @publicApi\n */\nclass NavigationEnd extends RouterEvent {\n    urlAfterRedirects;\n    type = EventType.NavigationEnd;\n    constructor(\n    /** @docsNotRequired */\n    id, \n    /** @docsNotRequired */\n    url, \n    /** @docsNotRequired */\n    urlAfterRedirects) {\n        super(id, url);\n        this.urlAfterRedirects = urlAfterRedirects;\n    }\n    /** @docsNotRequired */\n    toString() {\n        return `NavigationEnd(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${this.urlAfterRedirects}')`;\n    }\n}\n/**\n * A code for the `NavigationCancel` event of the `Router` to indicate the\n * reason a navigation failed.\n *\n * @publicApi\n */\nvar NavigationCancellationCode;\n(function (NavigationCancellationCode) {\n    /**\n     * A navigation failed because a guard returned a `UrlTree` to redirect.\n     */\n    NavigationCancellationCode[NavigationCancellationCode[\"Redirect\"] = 0] = \"Redirect\";\n    /**\n     * A navigation failed because a more recent navigation started.\n     */\n    NavigationCancellationCode[NavigationCancellationCode[\"SupersededByNewNavigation\"] = 1] = \"SupersededByNewNavigation\";\n    /**\n     * A navigation failed because one of the resolvers completed without emitting a value.\n     */\n    NavigationCancellationCode[NavigationCancellationCode[\"NoDataFromResolver\"] = 2] = \"NoDataFromResolver\";\n    /**\n     * A navigation failed because a guard returned `false`.\n     */\n    NavigationCancellationCode[NavigationCancellationCode[\"GuardRejected\"] = 3] = \"GuardRejected\";\n})(NavigationCancellationCode || (NavigationCancellationCode = {}));\n/**\n * A code for the `NavigationSkipped` event of the `Router` to indicate the\n * reason a navigation was skipped.\n *\n * @publicApi\n */\nvar NavigationSkippedCode;\n(function (NavigationSkippedCode) {\n    /**\n     * A navigation was skipped because the navigation URL was the same as the current Router URL.\n     */\n    NavigationSkippedCode[NavigationSkippedCode[\"IgnoredSameUrlNavigation\"] = 0] = \"IgnoredSameUrlNavigation\";\n    /**\n     * A navigation was skipped because the configured `UrlHandlingStrategy` return `false` for both\n     * the current Router URL and the target of the navigation.\n     *\n     * @see {@link UrlHandlingStrategy}\n     */\n    NavigationSkippedCode[NavigationSkippedCode[\"IgnoredByUrlHandlingStrategy\"] = 1] = \"IgnoredByUrlHandlingStrategy\";\n})(NavigationSkippedCode || (NavigationSkippedCode = {}));\n/**\n * An event triggered when a navigation is canceled, directly or indirectly.\n * This can happen for several reasons including when a route guard\n * returns `false` or initiates a redirect by returning a `UrlTree`.\n *\n * @see {@link NavigationStart}\n * @see {@link NavigationEnd}\n * @see {@link NavigationError}\n *\n * @publicApi\n */\nclass NavigationCancel extends RouterEvent {\n    reason;\n    code;\n    type = EventType.NavigationCancel;\n    constructor(\n    /** @docsNotRequired */\n    id, \n    /** @docsNotRequired */\n    url, \n    /**\n     * A description of why the navigation was cancelled. For debug purposes only. Use `code`\n     * instead for a stable cancellation reason that can be used in production.\n     */\n    reason, \n    /**\n     * A code to indicate why the navigation was canceled. This cancellation code is stable for\n     * the reason and can be relied on whereas the `reason` string could change and should not be\n     * used in production.\n     */\n    code) {\n        super(id, url);\n        this.reason = reason;\n        this.code = code;\n    }\n    /** @docsNotRequired */\n    toString() {\n        return `NavigationCancel(id: ${this.id}, url: '${this.url}')`;\n    }\n}\n/**\n * An event triggered when a navigation is skipped.\n * This can happen for a couple reasons including onSameUrlHandling\n * is set to `ignore` and the navigation URL is not different than the\n * current state.\n *\n * @publicApi\n */\nclass NavigationSkipped extends RouterEvent {\n    reason;\n    code;\n    type = EventType.NavigationSkipped;\n    constructor(\n    /** @docsNotRequired */\n    id, \n    /** @docsNotRequired */\n    url, \n    /**\n     * A description of why the navigation was skipped. For debug purposes only. Use `code`\n     * instead for a stable skipped reason that can be used in production.\n     */\n    reason, \n    /**\n     * A code to indicate why the navigation was skipped. This code is stable for\n     * the reason and can be relied on whereas the `reason` string could change and should not be\n     * used in production.\n     */\n    code) {\n        super(id, url);\n        this.reason = reason;\n        this.code = code;\n    }\n}\n/**\n * An event triggered when a navigation fails due to an unexpected error.\n *\n * @see {@link NavigationStart}\n * @see {@link NavigationEnd}\n * @see {@link NavigationCancel}\n *\n * @publicApi\n */\nclass NavigationError extends RouterEvent {\n    error;\n    target;\n    type = EventType.NavigationError;\n    constructor(\n    /** @docsNotRequired */\n    id, \n    /** @docsNotRequired */\n    url, \n    /** @docsNotRequired */\n    error, \n    /**\n     * The target of the navigation when the error occurred.\n     *\n     * Note that this can be `undefined` because an error could have occurred before the\n     * `RouterStateSnapshot` was created for the navigation.\n     */\n    target) {\n        super(id, url);\n        this.error = error;\n        this.target = target;\n    }\n    /** @docsNotRequired */\n    toString() {\n        return `NavigationError(id: ${this.id}, url: '${this.url}', error: ${this.error})`;\n    }\n}\n/**\n * An event triggered when routes are recognized.\n *\n * @publicApi\n */\nclass RoutesRecognized extends RouterEvent {\n    urlAfterRedirects;\n    state;\n    type = EventType.RoutesRecognized;\n    constructor(\n    /** @docsNotRequired */\n    id, \n    /** @docsNotRequired */\n    url, \n    /** @docsNotRequired */\n    urlAfterRedirects, \n    /** @docsNotRequired */\n    state) {\n        super(id, url);\n        this.urlAfterRedirects = urlAfterRedirects;\n        this.state = state;\n    }\n    /** @docsNotRequired */\n    toString() {\n        return `RoutesRecognized(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${this.urlAfterRedirects}', state: ${this.state})`;\n    }\n}\n/**\n * An event triggered at the start of the Guard phase of routing.\n *\n * @see {@link GuardsCheckEnd}\n *\n * @publicApi\n */\nclass GuardsCheckStart extends RouterEvent {\n    urlAfterRedirects;\n    state;\n    type = EventType.GuardsCheckStart;\n    constructor(\n    /** @docsNotRequired */\n    id, \n    /** @docsNotRequired */\n    url, \n    /** @docsNotRequired */\n    urlAfterRedirects, \n    /** @docsNotRequired */\n    state) {\n        super(id, url);\n        this.urlAfterRedirects = urlAfterRedirects;\n        this.state = state;\n    }\n    toString() {\n        return `GuardsCheckStart(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${this.urlAfterRedirects}', state: ${this.state})`;\n    }\n}\n/**\n * An event triggered at the end of the Guard phase of routing.\n *\n * @see {@link GuardsCheckStart}\n *\n * @publicApi\n */\nclass GuardsCheckEnd extends RouterEvent {\n    urlAfterRedirects;\n    state;\n    shouldActivate;\n    type = EventType.GuardsCheckEnd;\n    constructor(\n    /** @docsNotRequired */\n    id, \n    /** @docsNotRequired */\n    url, \n    /** @docsNotRequired */\n    urlAfterRedirects, \n    /** @docsNotRequired */\n    state, \n    /** @docsNotRequired */\n    shouldActivate) {\n        super(id, url);\n        this.urlAfterRedirects = urlAfterRedirects;\n        this.state = state;\n        this.shouldActivate = shouldActivate;\n    }\n    toString() {\n        return `GuardsCheckEnd(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${this.urlAfterRedirects}', state: ${this.state}, shouldActivate: ${this.shouldActivate})`;\n    }\n}\n/**\n * An event triggered at the start of the Resolve phase of routing.\n *\n * Runs in the \"resolve\" phase whether or not there is anything to resolve.\n * In future, may change to only run when there are things to be resolved.\n *\n * @see {@link ResolveEnd}\n *\n * @publicApi\n */\nclass ResolveStart extends RouterEvent {\n    urlAfterRedirects;\n    state;\n    type = EventType.ResolveStart;\n    constructor(\n    /** @docsNotRequired */\n    id, \n    /** @docsNotRequired */\n    url, \n    /** @docsNotRequired */\n    urlAfterRedirects, \n    /** @docsNotRequired */\n    state) {\n        super(id, url);\n        this.urlAfterRedirects = urlAfterRedirects;\n        this.state = state;\n    }\n    toString() {\n        return `ResolveStart(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${this.urlAfterRedirects}', state: ${this.state})`;\n    }\n}\n/**\n * An event triggered at the end of the Resolve phase of routing.\n * @see {@link ResolveStart}\n *\n * @publicApi\n */\nclass ResolveEnd extends RouterEvent {\n    urlAfterRedirects;\n    state;\n    type = EventType.ResolveEnd;\n    constructor(\n    /** @docsNotRequired */\n    id, \n    /** @docsNotRequired */\n    url, \n    /** @docsNotRequired */\n    urlAfterRedirects, \n    /** @docsNotRequired */\n    state) {\n        super(id, url);\n        this.urlAfterRedirects = urlAfterRedirects;\n        this.state = state;\n    }\n    toString() {\n        return `ResolveEnd(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${this.urlAfterRedirects}', state: ${this.state})`;\n    }\n}\n/**\n * An event triggered before lazy loading a route configuration.\n *\n * @see {@link RouteConfigLoadEnd}\n *\n * @publicApi\n */\nclass RouteConfigLoadStart {\n    route;\n    type = EventType.RouteConfigLoadStart;\n    constructor(\n    /** @docsNotRequired */\n    route) {\n        this.route = route;\n    }\n    toString() {\n        return `RouteConfigLoadStart(path: ${this.route.path})`;\n    }\n}\n/**\n * An event triggered when a route has been lazy loaded.\n *\n * @see {@link RouteConfigLoadStart}\n *\n * @publicApi\n */\nclass RouteConfigLoadEnd {\n    route;\n    type = EventType.RouteConfigLoadEnd;\n    constructor(\n    /** @docsNotRequired */\n    route) {\n        this.route = route;\n    }\n    toString() {\n        return `RouteConfigLoadEnd(path: ${this.route.path})`;\n    }\n}\n/**\n * An event triggered at the start of the child-activation\n * part of the Resolve phase of routing.\n * @see {@link ChildActivationEnd}\n * @see {@link ResolveStart}\n *\n * @publicApi\n */\nclass ChildActivationStart {\n    snapshot;\n    type = EventType.ChildActivationStart;\n    constructor(\n    /** @docsNotRequired */\n    snapshot) {\n        this.snapshot = snapshot;\n    }\n    toString() {\n        const path = (this.snapshot.routeConfig && this.snapshot.routeConfig.path) || '';\n        return `ChildActivationStart(path: '${path}')`;\n    }\n}\n/**\n * An event triggered at the end of the child-activation part\n * of the Resolve phase of routing.\n * @see {@link ChildActivationStart}\n * @see {@link ResolveStart}\n * @publicApi\n */\nclass ChildActivationEnd {\n    snapshot;\n    type = EventType.ChildActivationEnd;\n    constructor(\n    /** @docsNotRequired */\n    snapshot) {\n        this.snapshot = snapshot;\n    }\n    toString() {\n        const path = (this.snapshot.routeConfig && this.snapshot.routeConfig.path) || '';\n        return `ChildActivationEnd(path: '${path}')`;\n    }\n}\n/**\n * An event triggered at the start of the activation part\n * of the Resolve phase of routing.\n * @see {@link ActivationEnd}\n * @see {@link ResolveStart}\n *\n * @publicApi\n */\nclass ActivationStart {\n    snapshot;\n    type = EventType.ActivationStart;\n    constructor(\n    /** @docsNotRequired */\n    snapshot) {\n        this.snapshot = snapshot;\n    }\n    toString() {\n        const path = (this.snapshot.routeConfig && this.snapshot.routeConfig.path) || '';\n        return `ActivationStart(path: '${path}')`;\n    }\n}\n/**\n * An event triggered at the end of the activation part\n * of the Resolve phase of routing.\n * @see {@link ActivationStart}\n * @see {@link ResolveStart}\n *\n * @publicApi\n */\nclass ActivationEnd {\n    snapshot;\n    type = EventType.ActivationEnd;\n    constructor(\n    /** @docsNotRequired */\n    snapshot) {\n        this.snapshot = snapshot;\n    }\n    toString() {\n        const path = (this.snapshot.routeConfig && this.snapshot.routeConfig.path) || '';\n        return `ActivationEnd(path: '${path}')`;\n    }\n}\n/**\n * An event triggered by scrolling.\n *\n * @publicApi\n */\nclass Scroll {\n    routerEvent;\n    position;\n    anchor;\n    type = EventType.Scroll;\n    constructor(\n    /** @docsNotRequired */\n    routerEvent, \n    /** @docsNotRequired */\n    position, \n    /** @docsNotRequired */\n    anchor) {\n        this.routerEvent = routerEvent;\n        this.position = position;\n        this.anchor = anchor;\n    }\n    toString() {\n        const pos = this.position ? `${this.position[0]}, ${this.position[1]}` : null;\n        return `Scroll(anchor: '${this.anchor}', position: '${pos}')`;\n    }\n}\nclass BeforeActivateRoutes {\n}\nclass RedirectRequest {\n    url;\n    navigationBehaviorOptions;\n    constructor(url, navigationBehaviorOptions) {\n        this.url = url;\n        this.navigationBehaviorOptions = navigationBehaviorOptions;\n    }\n}\nfunction stringifyEvent(routerEvent) {\n    switch (routerEvent.type) {\n        case EventType.ActivationEnd:\n            return `ActivationEnd(path: '${routerEvent.snapshot.routeConfig?.path || ''}')`;\n        case EventType.ActivationStart:\n            return `ActivationStart(path: '${routerEvent.snapshot.routeConfig?.path || ''}')`;\n        case EventType.ChildActivationEnd:\n            return `ChildActivationEnd(path: '${routerEvent.snapshot.routeConfig?.path || ''}')`;\n        case EventType.ChildActivationStart:\n            return `ChildActivationStart(path: '${routerEvent.snapshot.routeConfig?.path || ''}')`;\n        case EventType.GuardsCheckEnd:\n            return `GuardsCheckEnd(id: ${routerEvent.id}, url: '${routerEvent.url}', urlAfterRedirects: '${routerEvent.urlAfterRedirects}', state: ${routerEvent.state}, shouldActivate: ${routerEvent.shouldActivate})`;\n        case EventType.GuardsCheckStart:\n            return `GuardsCheckStart(id: ${routerEvent.id}, url: '${routerEvent.url}', urlAfterRedirects: '${routerEvent.urlAfterRedirects}', state: ${routerEvent.state})`;\n        case EventType.NavigationCancel:\n            return `NavigationCancel(id: ${routerEvent.id}, url: '${routerEvent.url}')`;\n        case EventType.NavigationSkipped:\n            return `NavigationSkipped(id: ${routerEvent.id}, url: '${routerEvent.url}')`;\n        case EventType.NavigationEnd:\n            return `NavigationEnd(id: ${routerEvent.id}, url: '${routerEvent.url}', urlAfterRedirects: '${routerEvent.urlAfterRedirects}')`;\n        case EventType.NavigationError:\n            return `NavigationError(id: ${routerEvent.id}, url: '${routerEvent.url}', error: ${routerEvent.error})`;\n        case EventType.NavigationStart:\n            return `NavigationStart(id: ${routerEvent.id}, url: '${routerEvent.url}')`;\n        case EventType.ResolveEnd:\n            return `ResolveEnd(id: ${routerEvent.id}, url: '${routerEvent.url}', urlAfterRedirects: '${routerEvent.urlAfterRedirects}', state: ${routerEvent.state})`;\n        case EventType.ResolveStart:\n            return `ResolveStart(id: ${routerEvent.id}, url: '${routerEvent.url}', urlAfterRedirects: '${routerEvent.urlAfterRedirects}', state: ${routerEvent.state})`;\n        case EventType.RouteConfigLoadEnd:\n            return `RouteConfigLoadEnd(path: ${routerEvent.route.path})`;\n        case EventType.RouteConfigLoadStart:\n            return `RouteConfigLoadStart(path: ${routerEvent.route.path})`;\n        case EventType.RoutesRecognized:\n            return `RoutesRecognized(id: ${routerEvent.id}, url: '${routerEvent.url}', urlAfterRedirects: '${routerEvent.urlAfterRedirects}', state: ${routerEvent.state})`;\n        case EventType.Scroll:\n            const pos = routerEvent.position\n                ? `${routerEvent.position[0]}, ${routerEvent.position[1]}`\n                : null;\n            return `Scroll(anchor: '${routerEvent.anchor}', position: '${pos}')`;\n    }\n}\n\n/**\n * Creates an `EnvironmentInjector` if the `Route` has providers and one does not already exist\n * and returns the injector. Otherwise, if the `Route` does not have `providers`, returns the\n * `currentInjector`.\n *\n * @param route The route that might have providers\n * @param currentInjector The parent injector of the `Route`\n */\nfunction getOrCreateRouteInjectorIfNeeded(route, currentInjector) {\n    if (route.providers && !route._injector) {\n        route._injector = createEnvironmentInjector(route.providers, currentInjector, `Route: ${route.path}`);\n    }\n    return route._injector ?? currentInjector;\n}\nfunction validateConfig(config, parentPath = '', requireStandaloneComponents = false) {\n    // forEach doesn't iterate undefined values\n    for (let i = 0; i < config.length; i++) {\n        const route = config[i];\n        const fullPath = getFullPath(parentPath, route);\n        validateNode(route, fullPath, requireStandaloneComponents);\n    }\n}\nfunction assertStandalone(fullPath, component) {\n    if (component && _isNgModule(component)) {\n        throw new _RuntimeError(4014 /* RuntimeErrorCode.INVALID_ROUTE_CONFIG */, `Invalid configuration of route '${fullPath}'. You are using 'loadComponent' with a module, ` +\n            `but it must be used with standalone components. Use 'loadChildren' instead.`);\n    }\n    else if (component && !isStandalone(component)) {\n        throw new _RuntimeError(4014 /* RuntimeErrorCode.INVALID_ROUTE_CONFIG */, `Invalid configuration of route '${fullPath}'. The component must be standalone.`);\n    }\n}\nfunction validateNode(route, fullPath, requireStandaloneComponents) {\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n        if (!route) {\n            throw new _RuntimeError(4014 /* RuntimeErrorCode.INVALID_ROUTE_CONFIG */, `\n      Invalid configuration of route '${fullPath}': Encountered undefined route.\n      The reason might be an extra comma.\n\n      Example:\n      const routes: Routes = [\n        { path: '', redirectTo: '/dashboard', pathMatch: 'full' },\n        { path: 'dashboard',  component: DashboardComponent },, << two commas\n        { path: 'detail/:id', component: HeroDetailComponent }\n      ];\n    `);\n        }\n        if (Array.isArray(route)) {\n            throw new _RuntimeError(4014 /* RuntimeErrorCode.INVALID_ROUTE_CONFIG */, `Invalid configuration of route '${fullPath}': Array cannot be specified`);\n        }\n        if (!route.redirectTo &&\n            !route.component &&\n            !route.loadComponent &&\n            !route.children &&\n            !route.loadChildren &&\n            route.outlet &&\n            route.outlet !== PRIMARY_OUTLET) {\n            throw new _RuntimeError(4014 /* RuntimeErrorCode.INVALID_ROUTE_CONFIG */, `Invalid configuration of route '${fullPath}': a componentless route without children or loadChildren cannot have a named outlet set`);\n        }\n        if (route.redirectTo && route.children) {\n            throw new _RuntimeError(4014 /* RuntimeErrorCode.INVALID_ROUTE_CONFIG */, `Invalid configuration of route '${fullPath}': redirectTo and children cannot be used together`);\n        }\n        if (route.redirectTo && route.loadChildren) {\n            throw new _RuntimeError(4014 /* RuntimeErrorCode.INVALID_ROUTE_CONFIG */, `Invalid configuration of route '${fullPath}': redirectTo and loadChildren cannot be used together`);\n        }\n        if (route.children && route.loadChildren) {\n            throw new _RuntimeError(4014 /* RuntimeErrorCode.INVALID_ROUTE_CONFIG */, `Invalid configuration of route '${fullPath}': children and loadChildren cannot be used together`);\n        }\n        if (route.redirectTo && (route.component || route.loadComponent)) {\n            throw new _RuntimeError(4014 /* RuntimeErrorCode.INVALID_ROUTE_CONFIG */, `Invalid configuration of route '${fullPath}': redirectTo and component/loadComponent cannot be used together`);\n        }\n        if (route.component && route.loadComponent) {\n            throw new _RuntimeError(4014 /* RuntimeErrorCode.INVALID_ROUTE_CONFIG */, `Invalid configuration of route '${fullPath}': component and loadComponent cannot be used together`);\n        }\n        if (route.redirectTo && route.canActivate) {\n            throw new _RuntimeError(4014 /* RuntimeErrorCode.INVALID_ROUTE_CONFIG */, `Invalid configuration of route '${fullPath}': redirectTo and canActivate cannot be used together. Redirects happen before activation ` +\n                `so canActivate will never be executed.`);\n        }\n        if (route.path && route.matcher) {\n            throw new _RuntimeError(4014 /* RuntimeErrorCode.INVALID_ROUTE_CONFIG */, `Invalid configuration of route '${fullPath}': path and matcher cannot be used together`);\n        }\n        if (route.redirectTo === void 0 &&\n            !route.component &&\n            !route.loadComponent &&\n            !route.children &&\n            !route.loadChildren) {\n            throw new _RuntimeError(4014 /* RuntimeErrorCode.INVALID_ROUTE_CONFIG */, `Invalid configuration of route '${fullPath}'. One of the following must be provided: component, loadComponent, redirectTo, children or loadChildren`);\n        }\n        if (route.path === void 0 && route.matcher === void 0) {\n            throw new _RuntimeError(4014 /* RuntimeErrorCode.INVALID_ROUTE_CONFIG */, `Invalid configuration of route '${fullPath}': routes must have either a path or a matcher specified`);\n        }\n        if (typeof route.path === 'string' && route.path.charAt(0) === '/') {\n            throw new _RuntimeError(4014 /* RuntimeErrorCode.INVALID_ROUTE_CONFIG */, `Invalid configuration of route '${fullPath}': path cannot start with a slash`);\n        }\n        if (route.path === '' && route.redirectTo !== void 0 && route.pathMatch === void 0) {\n            const exp = `The default value of 'pathMatch' is 'prefix', but often the intent is to use 'full'.`;\n            throw new _RuntimeError(4014 /* RuntimeErrorCode.INVALID_ROUTE_CONFIG */, `Invalid configuration of route '{path: \"${fullPath}\", redirectTo: \"${route.redirectTo}\"}': please provide 'pathMatch'. ${exp}`);\n        }\n        if (requireStandaloneComponents) {\n            assertStandalone(fullPath, route.component);\n        }\n    }\n    if (route.children) {\n        validateConfig(route.children, fullPath, requireStandaloneComponents);\n    }\n}\nfunction getFullPath(parentPath, currentRoute) {\n    if (!currentRoute) {\n        return parentPath;\n    }\n    if (!parentPath && !currentRoute.path) {\n        return '';\n    }\n    else if (parentPath && !currentRoute.path) {\n        return `${parentPath}/`;\n    }\n    else if (!parentPath && currentRoute.path) {\n        return currentRoute.path;\n    }\n    else {\n        return `${parentPath}/${currentRoute.path}`;\n    }\n}\n/** Returns the `route.outlet` or PRIMARY_OUTLET if none exists. */\nfunction getOutlet(route) {\n    return route.outlet || PRIMARY_OUTLET;\n}\n/**\n * Sorts the `routes` such that the ones with an outlet matching `outletName` come first.\n * The order of the configs is otherwise preserved.\n */\nfunction sortByMatchingOutlets(routes, outletName) {\n    const sortedConfig = routes.filter((r) => getOutlet(r) === outletName);\n    sortedConfig.push(...routes.filter((r) => getOutlet(r) !== outletName));\n    return sortedConfig;\n}\n/**\n * Gets the first injector in the snapshot's parent tree.\n *\n * If the `Route` has a static list of providers, the returned injector will be the one created from\n * those. If it does not exist, the returned injector may come from the parents, which may be from a\n * loaded config or their static providers.\n *\n * Returns `null` if there is neither this nor any parents have a stored injector.\n *\n * Generally used for retrieving the injector to use for getting tokens for guards/resolvers and\n * also used for getting the correct injector to use for creating components.\n */\nfunction getClosestRouteInjector(snapshot) {\n    if (!snapshot)\n        return null;\n    // If the current route has its own injector, which is created from the static providers on the\n    // route itself, we should use that. Otherwise, we start at the parent since we do not want to\n    // include the lazy loaded injector from this route.\n    if (snapshot.routeConfig?._injector) {\n        return snapshot.routeConfig._injector;\n    }\n    for (let s = snapshot.parent; s; s = s.parent) {\n        const route = s.routeConfig;\n        // Note that the order here is important. `_loadedInjector` stored on the route with\n        // `loadChildren: () => NgModule` so it applies to child routes with priority. The `_injector`\n        // is created from the static providers on that parent route, so it applies to the children as\n        // well, but only if there is no lazy loaded NgModuleRef injector.\n        if (route?._loadedInjector)\n            return route._loadedInjector;\n        if (route?._injector)\n            return route._injector;\n    }\n    return null;\n}\n\n/**\n * Store contextual information about a `RouterOutlet`\n *\n * @publicApi\n */\nclass OutletContext {\n    rootInjector;\n    outlet = null;\n    route = null;\n    children;\n    attachRef = null;\n    get injector() {\n        return getClosestRouteInjector(this.route?.snapshot) ?? this.rootInjector;\n    }\n    constructor(rootInjector) {\n        this.rootInjector = rootInjector;\n        this.children = new ChildrenOutletContexts(this.rootInjector);\n    }\n}\n/**\n * Store contextual information about the children (= nested) `RouterOutlet`\n *\n * @publicApi\n */\nclass ChildrenOutletContexts {\n    rootInjector;\n    // contexts for child outlets, by name.\n    contexts = new Map();\n    /** @nodoc */\n    constructor(rootInjector) {\n        this.rootInjector = rootInjector;\n    }\n    /** Called when a `RouterOutlet` directive is instantiated */\n    onChildOutletCreated(childName, outlet) {\n        const context = this.getOrCreateContext(childName);\n        context.outlet = outlet;\n        this.contexts.set(childName, context);\n    }\n    /**\n     * Called when a `RouterOutlet` directive is destroyed.\n     * We need to keep the context as the outlet could be destroyed inside a NgIf and might be\n     * re-created later.\n     */\n    onChildOutletDestroyed(childName) {\n        const context = this.getContext(childName);\n        if (context) {\n            context.outlet = null;\n            context.attachRef = null;\n        }\n    }\n    /**\n     * Called when the corresponding route is deactivated during navigation.\n     * Because the component get destroyed, all children outlet are destroyed.\n     */\n    onOutletDeactivated() {\n        const contexts = this.contexts;\n        this.contexts = new Map();\n        return contexts;\n    }\n    onOutletReAttached(contexts) {\n        this.contexts = contexts;\n    }\n    getOrCreateContext(childName) {\n        let context = this.getContext(childName);\n        if (!context) {\n            context = new OutletContext(this.rootInjector);\n            this.contexts.set(childName, context);\n        }\n        return context;\n    }\n    getContext(childName) {\n        return this.contexts.get(childName) || null;\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: ChildrenOutletContexts, deps: [{ token: i0.EnvironmentInjector }], target: i0.ɵɵFactoryTarget.Injectable });\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: ChildrenOutletContexts, providedIn: 'root' });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: ChildrenOutletContexts, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: () => [{ type: i0.EnvironmentInjector }] });\n\nclass Tree {\n    /** @internal */\n    _root;\n    constructor(root) {\n        this._root = root;\n    }\n    get root() {\n        return this._root.value;\n    }\n    /**\n     * @internal\n     */\n    parent(t) {\n        const p = this.pathFromRoot(t);\n        return p.length > 1 ? p[p.length - 2] : null;\n    }\n    /**\n     * @internal\n     */\n    children(t) {\n        const n = findNode(t, this._root);\n        return n ? n.children.map((t) => t.value) : [];\n    }\n    /**\n     * @internal\n     */\n    firstChild(t) {\n        const n = findNode(t, this._root);\n        return n && n.children.length > 0 ? n.children[0].value : null;\n    }\n    /**\n     * @internal\n     */\n    siblings(t) {\n        const p = findPath(t, this._root);\n        if (p.length < 2)\n            return [];\n        const c = p[p.length - 2].children.map((c) => c.value);\n        return c.filter((cc) => cc !== t);\n    }\n    /**\n     * @internal\n     */\n    pathFromRoot(t) {\n        return findPath(t, this._root).map((s) => s.value);\n    }\n}\n// DFS for the node matching the value\nfunction findNode(value, node) {\n    if (value === node.value)\n        return node;\n    for (const child of node.children) {\n        const node = findNode(value, child);\n        if (node)\n            return node;\n    }\n    return null;\n}\n// Return the path to the node with the given value using DFS\nfunction findPath(value, node) {\n    if (value === node.value)\n        return [node];\n    for (const child of node.children) {\n        const path = findPath(value, child);\n        if (path.length) {\n            path.unshift(node);\n            return path;\n        }\n    }\n    return [];\n}\nclass TreeNode {\n    value;\n    children;\n    constructor(value, children) {\n        this.value = value;\n        this.children = children;\n    }\n    toString() {\n        return `TreeNode(${this.value})`;\n    }\n}\n// Return the list of T indexed by outlet name\nfunction nodeChildrenAsMap(node) {\n    const map = {};\n    if (node) {\n        node.children.forEach((child) => (map[child.value.outlet] = child));\n    }\n    return map;\n}\n\n/**\n * Represents the state of the router as a tree of activated routes.\n *\n * @usageNotes\n *\n * Every node in the route tree is an `ActivatedRoute` instance\n * that knows about the \"consumed\" URL segments, the extracted parameters,\n * and the resolved data.\n * Use the `ActivatedRoute` properties to traverse the tree from any node.\n *\n * The following fragment shows how a component gets the root node\n * of the current state to establish its own route tree:\n *\n * ```ts\n * @Component({templateUrl:'template.html'})\n * class MyComponent {\n *   constructor(router: Router) {\n *     const state: RouterState = router.routerState;\n *     const root: ActivatedRoute = state.root;\n *     const child = root.firstChild;\n *     const id: Observable<string> = child.params.map(p => p.id);\n *     //...\n *   }\n * }\n * ```\n *\n * @see {@link ActivatedRoute}\n * @see [Getting route information](guide/routing/common-router-tasks#getting-route-information)\n *\n * @publicApi\n */\nclass RouterState extends Tree {\n    snapshot;\n    /** @internal */\n    constructor(root, \n    /** The current snapshot of the router state */\n    snapshot) {\n        super(root);\n        this.snapshot = snapshot;\n        setRouterState(this, root);\n    }\n    toString() {\n        return this.snapshot.toString();\n    }\n}\nfunction createEmptyState(rootComponent) {\n    const snapshot = createEmptyStateSnapshot(rootComponent);\n    const emptyUrl = new BehaviorSubject([new UrlSegment('', {})]);\n    const emptyParams = new BehaviorSubject({});\n    const emptyData = new BehaviorSubject({});\n    const emptyQueryParams = new BehaviorSubject({});\n    const fragment = new BehaviorSubject('');\n    const activated = new ActivatedRoute(emptyUrl, emptyParams, emptyQueryParams, fragment, emptyData, PRIMARY_OUTLET, rootComponent, snapshot.root);\n    activated.snapshot = snapshot.root;\n    return new RouterState(new TreeNode(activated, []), snapshot);\n}\nfunction createEmptyStateSnapshot(rootComponent) {\n    const emptyParams = {};\n    const emptyData = {};\n    const emptyQueryParams = {};\n    const fragment = '';\n    const activated = new ActivatedRouteSnapshot([], emptyParams, emptyQueryParams, fragment, emptyData, PRIMARY_OUTLET, rootComponent, null, {});\n    return new RouterStateSnapshot('', new TreeNode(activated, []));\n}\n/**\n * Provides access to information about a route associated with a component\n * that is loaded in an outlet.\n * Use to traverse the `RouterState` tree and extract information from nodes.\n *\n * The following example shows how to construct a component using information from a\n * currently activated route.\n *\n * Note: the observables in this class only emit when the current and previous values differ based\n * on shallow equality. For example, changing deeply nested properties in resolved `data` will not\n * cause the `ActivatedRoute.data` `Observable` to emit a new value.\n *\n * {@example router/activated-route/module.ts region=\"activated-route\"\n *     header=\"activated-route.component.ts\"}\n *\n * @see [Getting route information](guide/routing/common-router-tasks#getting-route-information)\n *\n * @publicApi\n */\nclass ActivatedRoute {\n    urlSubject;\n    paramsSubject;\n    queryParamsSubject;\n    fragmentSubject;\n    dataSubject;\n    outlet;\n    component;\n    /** The current snapshot of this route */\n    snapshot;\n    /** @internal */\n    _futureSnapshot;\n    /** @internal */\n    _routerState;\n    /** @internal */\n    _paramMap;\n    /** @internal */\n    _queryParamMap;\n    /** An Observable of the resolved route title */\n    title;\n    /** An observable of the URL segments matched by this route. */\n    url;\n    /** An observable of the matrix parameters scoped to this route. */\n    params;\n    /** An observable of the query parameters shared by all the routes. */\n    queryParams;\n    /** An observable of the URL fragment shared by all the routes. */\n    fragment;\n    /** An observable of the static and resolved data of this route. */\n    data;\n    /** @internal */\n    constructor(\n    /** @internal */\n    urlSubject, \n    /** @internal */\n    paramsSubject, \n    /** @internal */\n    queryParamsSubject, \n    /** @internal */\n    fragmentSubject, \n    /** @internal */\n    dataSubject, \n    /** The outlet name of the route, a constant. */\n    outlet, \n    /** The component of the route, a constant. */\n    component, futureSnapshot) {\n        this.urlSubject = urlSubject;\n        this.paramsSubject = paramsSubject;\n        this.queryParamsSubject = queryParamsSubject;\n        this.fragmentSubject = fragmentSubject;\n        this.dataSubject = dataSubject;\n        this.outlet = outlet;\n        this.component = component;\n        this._futureSnapshot = futureSnapshot;\n        this.title = this.dataSubject?.pipe(map((d) => d[RouteTitleKey])) ?? of(undefined);\n        // TODO(atscott): Verify that these can be changed to `.asObservable()` with TGP.\n        this.url = urlSubject;\n        this.params = paramsSubject;\n        this.queryParams = queryParamsSubject;\n        this.fragment = fragmentSubject;\n        this.data = dataSubject;\n    }\n    /** The configuration used to match this route. */\n    get routeConfig() {\n        return this._futureSnapshot.routeConfig;\n    }\n    /** The root of the router state. */\n    get root() {\n        return this._routerState.root;\n    }\n    /** The parent of this route in the router state tree. */\n    get parent() {\n        return this._routerState.parent(this);\n    }\n    /** The first child of this route in the router state tree. */\n    get firstChild() {\n        return this._routerState.firstChild(this);\n    }\n    /** The children of this route in the router state tree. */\n    get children() {\n        return this._routerState.children(this);\n    }\n    /** The path from the root of the router state tree to this route. */\n    get pathFromRoot() {\n        return this._routerState.pathFromRoot(this);\n    }\n    /**\n     * An Observable that contains a map of the required and optional parameters\n     * specific to the route.\n     * The map supports retrieving single and multiple values from the same parameter.\n     */\n    get paramMap() {\n        this._paramMap ??= this.params.pipe(map((p) => convertToParamMap(p)));\n        return this._paramMap;\n    }\n    /**\n     * An Observable that contains a map of the query parameters available to all routes.\n     * The map supports retrieving single and multiple values from the query parameter.\n     */\n    get queryParamMap() {\n        this._queryParamMap ??= this.queryParams.pipe(map((p) => convertToParamMap(p)));\n        return this._queryParamMap;\n    }\n    toString() {\n        return this.snapshot ? this.snapshot.toString() : `Future(${this._futureSnapshot})`;\n    }\n}\n/**\n * Returns the inherited params, data, and resolve for a given route.\n *\n * By default, we do not inherit parent data unless the current route is path-less or the parent\n * route is component-less.\n */\nfunction getInherited(route, parent, paramsInheritanceStrategy = 'emptyOnly') {\n    let inherited;\n    const { routeConfig } = route;\n    if (parent !== null &&\n        (paramsInheritanceStrategy === 'always' ||\n            // inherit parent data if route is empty path\n            routeConfig?.path === '' ||\n            // inherit parent data if parent was componentless\n            (!parent.component && !parent.routeConfig?.loadComponent))) {\n        inherited = {\n            params: { ...parent.params, ...route.params },\n            data: { ...parent.data, ...route.data },\n            resolve: {\n                // Snapshots are created with data inherited from parent and guards (i.e. canActivate) can\n                // change data because it's not frozen...\n                // This first line could be deleted chose to break/disallow mutating the `data` object in\n                // guards.\n                // Note that data from parents still override this mutated data so anyone relying on this\n                // might be surprised that it doesn't work if parent data is inherited but otherwise does.\n                ...route.data,\n                // Ensure inherited resolved data overrides inherited static data\n                ...parent.data,\n                // static data from the current route overrides any inherited data\n                ...routeConfig?.data,\n                // resolved data from current route overrides everything\n                ...route._resolvedData,\n            },\n        };\n    }\n    else {\n        inherited = {\n            params: { ...route.params },\n            data: { ...route.data },\n            resolve: { ...route.data, ...(route._resolvedData ?? {}) },\n        };\n    }\n    if (routeConfig && hasStaticTitle(routeConfig)) {\n        inherited.resolve[RouteTitleKey] = routeConfig.title;\n    }\n    return inherited;\n}\n/**\n * @description\n *\n * Contains the information about a route associated with a component loaded in an\n * outlet at a particular moment in time. ActivatedRouteSnapshot can also be used to\n * traverse the router state tree.\n *\n * The following example initializes a component with route information extracted\n * from the snapshot of the root node at the time of creation.\n *\n * ```ts\n * @Component({templateUrl:'./my-component.html'})\n * class MyComponent {\n *   constructor(route: ActivatedRoute) {\n *     const id: string = route.snapshot.params.id;\n *     const url: string = route.snapshot.url.join('');\n *     const user = route.snapshot.data.user;\n *   }\n * }\n * ```\n *\n * @publicApi\n */\nclass ActivatedRouteSnapshot {\n    url;\n    params;\n    queryParams;\n    fragment;\n    data;\n    outlet;\n    component;\n    /** The configuration used to match this route **/\n    routeConfig;\n    /** @internal */\n    _resolve;\n    /** @internal */\n    _resolvedData;\n    /** @internal */\n    _routerState;\n    /** @internal */\n    _paramMap;\n    /** @internal */\n    _queryParamMap;\n    /** The resolved route title */\n    get title() {\n        // Note: This _must_ be a getter because the data is mutated in the resolvers. Title will not be\n        // available at the time of class instantiation.\n        return this.data?.[RouteTitleKey];\n    }\n    /** @internal */\n    constructor(\n    /** The URL segments matched by this route */\n    url, \n    /**\n     *  The matrix parameters scoped to this route.\n     *\n     *  You can compute all params (or data) in the router state or to get params outside\n     *  of an activated component by traversing the `RouterState` tree as in the following\n     *  example:\n     *  ```ts\n     *  collectRouteParams(router: Router) {\n     *    let params = {};\n     *    let stack: ActivatedRouteSnapshot[] = [router.routerState.snapshot.root];\n     *    while (stack.length > 0) {\n     *      const route = stack.pop()!;\n     *      params = {...params, ...route.params};\n     *      stack.push(...route.children);\n     *    }\n     *    return params;\n     *  }\n     *  ```\n     */\n    params, \n    /** The query parameters shared by all the routes */\n    queryParams, \n    /** The URL fragment shared by all the routes */\n    fragment, \n    /** The static and resolved data of this route */\n    data, \n    /** The outlet name of the route */\n    outlet, \n    /** The component of the route */\n    component, routeConfig, resolve) {\n        this.url = url;\n        this.params = params;\n        this.queryParams = queryParams;\n        this.fragment = fragment;\n        this.data = data;\n        this.outlet = outlet;\n        this.component = component;\n        this.routeConfig = routeConfig;\n        this._resolve = resolve;\n    }\n    /** The root of the router state */\n    get root() {\n        return this._routerState.root;\n    }\n    /** The parent of this route in the router state tree */\n    get parent() {\n        return this._routerState.parent(this);\n    }\n    /** The first child of this route in the router state tree */\n    get firstChild() {\n        return this._routerState.firstChild(this);\n    }\n    /** The children of this route in the router state tree */\n    get children() {\n        return this._routerState.children(this);\n    }\n    /** The path from the root of the router state tree to this route */\n    get pathFromRoot() {\n        return this._routerState.pathFromRoot(this);\n    }\n    get paramMap() {\n        this._paramMap ??= convertToParamMap(this.params);\n        return this._paramMap;\n    }\n    get queryParamMap() {\n        this._queryParamMap ??= convertToParamMap(this.queryParams);\n        return this._queryParamMap;\n    }\n    toString() {\n        const url = this.url.map((segment) => segment.toString()).join('/');\n        const matched = this.routeConfig ? this.routeConfig.path : '';\n        return `Route(url:'${url}', path:'${matched}')`;\n    }\n}\n/**\n * @description\n *\n * Represents the state of the router at a moment in time.\n *\n * This is a tree of activated route snapshots. Every node in this tree knows about\n * the \"consumed\" URL segments, the extracted parameters, and the resolved data.\n *\n * The following example shows how a component is initialized with information\n * from the snapshot of the root node's state at the time of creation.\n *\n * ```ts\n * @Component({templateUrl:'template.html'})\n * class MyComponent {\n *   constructor(router: Router) {\n *     const state: RouterState = router.routerState;\n *     const snapshot: RouterStateSnapshot = state.snapshot;\n *     const root: ActivatedRouteSnapshot = snapshot.root;\n *     const child = root.firstChild;\n *     const id: Observable<string> = child.params.map(p => p.id);\n *     //...\n *   }\n * }\n * ```\n *\n * @publicApi\n */\nclass RouterStateSnapshot extends Tree {\n    url;\n    /** @internal */\n    constructor(\n    /** The url from which this snapshot was created */\n    url, root) {\n        super(root);\n        this.url = url;\n        setRouterState(this, root);\n    }\n    toString() {\n        return serializeNode(this._root);\n    }\n}\nfunction setRouterState(state, node) {\n    node.value._routerState = state;\n    node.children.forEach((c) => setRouterState(state, c));\n}\nfunction serializeNode(node) {\n    const c = node.children.length > 0 ? ` { ${node.children.map(serializeNode).join(', ')} } ` : '';\n    return `${node.value}${c}`;\n}\n/**\n * The expectation is that the activate route is created with the right set of parameters.\n * So we push new values into the observables only when they are not the initial values.\n * And we detect that by checking if the snapshot field is set.\n */\nfunction advanceActivatedRoute(route) {\n    if (route.snapshot) {\n        const currentSnapshot = route.snapshot;\n        const nextSnapshot = route._futureSnapshot;\n        route.snapshot = nextSnapshot;\n        if (!shallowEqual(currentSnapshot.queryParams, nextSnapshot.queryParams)) {\n            route.queryParamsSubject.next(nextSnapshot.queryParams);\n        }\n        if (currentSnapshot.fragment !== nextSnapshot.fragment) {\n            route.fragmentSubject.next(nextSnapshot.fragment);\n        }\n        if (!shallowEqual(currentSnapshot.params, nextSnapshot.params)) {\n            route.paramsSubject.next(nextSnapshot.params);\n        }\n        if (!shallowEqualArrays(currentSnapshot.url, nextSnapshot.url)) {\n            route.urlSubject.next(nextSnapshot.url);\n        }\n        if (!shallowEqual(currentSnapshot.data, nextSnapshot.data)) {\n            route.dataSubject.next(nextSnapshot.data);\n        }\n    }\n    else {\n        route.snapshot = route._futureSnapshot;\n        // this is for resolved data\n        route.dataSubject.next(route._futureSnapshot.data);\n    }\n}\nfunction equalParamsAndUrlSegments(a, b) {\n    const equalUrlParams = shallowEqual(a.params, b.params) && equalSegments(a.url, b.url);\n    const parentsMismatch = !a.parent !== !b.parent;\n    return (equalUrlParams &&\n        !parentsMismatch &&\n        (!a.parent || equalParamsAndUrlSegments(a.parent, b.parent)));\n}\nfunction hasStaticTitle(config) {\n    return typeof config.title === 'string' || config.title === null;\n}\n\n/**\n * An `InjectionToken` provided by the `RouterOutlet` and can be set using the `routerOutletData`\n * input.\n *\n * When unset, this value is `null` by default.\n *\n * @usageNotes\n *\n * To set the data from the template of the component with `router-outlet`:\n * ```html\n * <router-outlet [routerOutletData]=\"{name: 'Angular'}\" />\n * ```\n *\n * To read the data in the routed component:\n * ```ts\n * data = inject(ROUTER_OUTLET_DATA) as Signal<{name: string}>;\n * ```\n *\n * @publicApi\n */\nconst ROUTER_OUTLET_DATA = new InjectionToken(ngDevMode ? 'RouterOutlet data' : '');\n/**\n * @description\n *\n * Acts as a placeholder that Angular dynamically fills based on the current router state.\n *\n * Each outlet can have a unique name, determined by the optional `name` attribute.\n * The name cannot be set or changed dynamically. If not set, default value is \"primary\".\n *\n * ```html\n * <router-outlet></router-outlet>\n * <router-outlet name='left'></router-outlet>\n * <router-outlet name='right'></router-outlet>\n * ```\n *\n * Named outlets can be the targets of secondary routes.\n * The `Route` object for a secondary route has an `outlet` property to identify the target outlet:\n *\n * `{path: <base-path>, component: <component>, outlet: <target_outlet_name>}`\n *\n * Using named outlets and secondary routes, you can target multiple outlets in\n * the same `RouterLink` directive.\n *\n * The router keeps track of separate branches in a navigation tree for each named outlet and\n * generates a representation of that tree in the URL.\n * The URL for a secondary route uses the following syntax to specify both the primary and secondary\n * routes at the same time:\n *\n * `http://base-path/primary-route-path(outlet-name:route-path)`\n *\n * A router outlet emits an activate event when a new component is instantiated,\n * deactivate event when a component is destroyed.\n * An attached event emits when the `RouteReuseStrategy` instructs the outlet to reattach the\n * subtree, and the detached event emits when the `RouteReuseStrategy` instructs the outlet to\n * detach the subtree.\n *\n * ```html\n * <router-outlet\n *   (activate)='onActivate($event)'\n *   (deactivate)='onDeactivate($event)'\n *   (attach)='onAttach($event)'\n *   (detach)='onDetach($event)'></router-outlet>\n * ```\n *\n * @see {@link RouterLink}\n * @see {@link Route}\n * @ngModule RouterModule\n *\n * @publicApi\n */\nclass RouterOutlet {\n    activated = null;\n    /** @internal */\n    get activatedComponentRef() {\n        return this.activated;\n    }\n    _activatedRoute = null;\n    /**\n     * The name of the outlet\n     *\n     */\n    name = PRIMARY_OUTLET;\n    activateEvents = new EventEmitter();\n    deactivateEvents = new EventEmitter();\n    /**\n     * Emits an attached component instance when the `RouteReuseStrategy` instructs to re-attach a\n     * previously detached subtree.\n     **/\n    attachEvents = new EventEmitter();\n    /**\n     * Emits a detached component instance when the `RouteReuseStrategy` instructs to detach the\n     * subtree.\n     */\n    detachEvents = new EventEmitter();\n    /**\n     * Data that will be provided to the child injector through the `ROUTER_OUTLET_DATA` token.\n     *\n     * When unset, the value of the token is `undefined` by default.\n     */\n    routerOutletData = input(undefined);\n    parentContexts = inject(ChildrenOutletContexts);\n    location = inject(ViewContainerRef);\n    changeDetector = inject(ChangeDetectorRef);\n    inputBinder = inject(INPUT_BINDER, { optional: true });\n    /** @nodoc */\n    supportsBindingToComponentInputs = true;\n    /** @nodoc */\n    ngOnChanges(changes) {\n        if (changes['name']) {\n            const { firstChange, previousValue } = changes['name'];\n            if (firstChange) {\n                // The first change is handled by ngOnInit. Because ngOnChanges doesn't get called when no\n                // input is set at all, we need to centrally handle the first change there.\n                return;\n            }\n            // unregister with the old name\n            if (this.isTrackedInParentContexts(previousValue)) {\n                this.deactivate();\n                this.parentContexts.onChildOutletDestroyed(previousValue);\n            }\n            // register the new name\n            this.initializeOutletWithName();\n        }\n    }\n    /** @nodoc */\n    ngOnDestroy() {\n        // Ensure that the registered outlet is this one before removing it on the context.\n        if (this.isTrackedInParentContexts(this.name)) {\n            this.parentContexts.onChildOutletDestroyed(this.name);\n        }\n        this.inputBinder?.unsubscribeFromRouteData(this);\n    }\n    isTrackedInParentContexts(outletName) {\n        return this.parentContexts.getContext(outletName)?.outlet === this;\n    }\n    /** @nodoc */\n    ngOnInit() {\n        this.initializeOutletWithName();\n    }\n    initializeOutletWithName() {\n        this.parentContexts.onChildOutletCreated(this.name, this);\n        if (this.activated) {\n            return;\n        }\n        // If the outlet was not instantiated at the time the route got activated we need to populate\n        // the outlet when it is initialized (ie inside a NgIf)\n        const context = this.parentContexts.getContext(this.name);\n        if (context?.route) {\n            if (context.attachRef) {\n                // `attachRef` is populated when there is an existing component to mount\n                this.attach(context.attachRef, context.route);\n            }\n            else {\n                // otherwise the component defined in the configuration is created\n                this.activateWith(context.route, context.injector);\n            }\n        }\n    }\n    get isActivated() {\n        return !!this.activated;\n    }\n    /**\n     * @returns The currently activated component instance.\n     * @throws An error if the outlet is not activated.\n     */\n    get component() {\n        if (!this.activated)\n            throw new _RuntimeError(4012 /* RuntimeErrorCode.OUTLET_NOT_ACTIVATED */, (typeof ngDevMode === 'undefined' || ngDevMode) && 'Outlet is not activated');\n        return this.activated.instance;\n    }\n    get activatedRoute() {\n        if (!this.activated)\n            throw new _RuntimeError(4012 /* RuntimeErrorCode.OUTLET_NOT_ACTIVATED */, (typeof ngDevMode === 'undefined' || ngDevMode) && 'Outlet is not activated');\n        return this._activatedRoute;\n    }\n    get activatedRouteData() {\n        if (this._activatedRoute) {\n            return this._activatedRoute.snapshot.data;\n        }\n        return {};\n    }\n    /**\n     * Called when the `RouteReuseStrategy` instructs to detach the subtree\n     */\n    detach() {\n        if (!this.activated)\n            throw new _RuntimeError(4012 /* RuntimeErrorCode.OUTLET_NOT_ACTIVATED */, (typeof ngDevMode === 'undefined' || ngDevMode) && 'Outlet is not activated');\n        this.location.detach();\n        const cmp = this.activated;\n        this.activated = null;\n        this._activatedRoute = null;\n        this.detachEvents.emit(cmp.instance);\n        return cmp;\n    }\n    /**\n     * Called when the `RouteReuseStrategy` instructs to re-attach a previously detached subtree\n     */\n    attach(ref, activatedRoute) {\n        this.activated = ref;\n        this._activatedRoute = activatedRoute;\n        this.location.insert(ref.hostView);\n        this.inputBinder?.bindActivatedRouteToOutletComponent(this);\n        this.attachEvents.emit(ref.instance);\n    }\n    deactivate() {\n        if (this.activated) {\n            const c = this.component;\n            this.activated.destroy();\n            this.activated = null;\n            this._activatedRoute = null;\n            this.deactivateEvents.emit(c);\n        }\n    }\n    activateWith(activatedRoute, environmentInjector) {\n        if (this.isActivated) {\n            throw new _RuntimeError(4013 /* RuntimeErrorCode.OUTLET_ALREADY_ACTIVATED */, (typeof ngDevMode === 'undefined' || ngDevMode) &&\n                'Cannot activate an already activated outlet');\n        }\n        this._activatedRoute = activatedRoute;\n        const location = this.location;\n        const snapshot = activatedRoute.snapshot;\n        const component = snapshot.component;\n        const childContexts = this.parentContexts.getOrCreateContext(this.name).children;\n        const injector = new OutletInjector(activatedRoute, childContexts, location.injector, this.routerOutletData);\n        this.activated = location.createComponent(component, {\n            index: location.length,\n            injector,\n            environmentInjector: environmentInjector,\n        });\n        // Calling `markForCheck` to make sure we will run the change detection when the\n        // `RouterOutlet` is inside a `ChangeDetectionStrategy.OnPush` component.\n        this.changeDetector.markForCheck();\n        this.inputBinder?.bindActivatedRouteToOutletComponent(this);\n        this.activateEvents.emit(this.activated.instance);\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: RouterOutlet, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"17.1.0\", version: \"19.2.6\", type: RouterOutlet, isStandalone: true, selector: \"router-outlet\", inputs: { name: { classPropertyName: \"name\", publicName: \"name\", isSignal: false, isRequired: false, transformFunction: null }, routerOutletData: { classPropertyName: \"routerOutletData\", publicName: \"routerOutletData\", isSignal: true, isRequired: false, transformFunction: null } }, outputs: { activateEvents: \"activate\", deactivateEvents: \"deactivate\", attachEvents: \"attach\", detachEvents: \"detach\" }, exportAs: [\"outlet\"], usesOnChanges: true, ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: RouterOutlet, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'router-outlet',\n                    exportAs: 'outlet',\n                }]\n        }], propDecorators: { name: [{\n                type: Input\n            }], activateEvents: [{\n                type: Output,\n                args: ['activate']\n            }], deactivateEvents: [{\n                type: Output,\n                args: ['deactivate']\n            }], attachEvents: [{\n                type: Output,\n                args: ['attach']\n            }], detachEvents: [{\n                type: Output,\n                args: ['detach']\n            }] } });\nclass OutletInjector {\n    route;\n    childContexts;\n    parent;\n    outletData;\n    constructor(route, childContexts, parent, outletData) {\n        this.route = route;\n        this.childContexts = childContexts;\n        this.parent = parent;\n        this.outletData = outletData;\n    }\n    get(token, notFoundValue) {\n        if (token === ActivatedRoute) {\n            return this.route;\n        }\n        if (token === ChildrenOutletContexts) {\n            return this.childContexts;\n        }\n        if (token === ROUTER_OUTLET_DATA) {\n            return this.outletData;\n        }\n        return this.parent.get(token, notFoundValue);\n    }\n}\nconst INPUT_BINDER = new InjectionToken('');\n/**\n * Injectable used as a tree-shakable provider for opting in to binding router data to component\n * inputs.\n *\n * The RouterOutlet registers itself with this service when an `ActivatedRoute` is attached or\n * activated. When this happens, the service subscribes to the `ActivatedRoute` observables (params,\n * queryParams, data) and sets the inputs of the component using `ComponentRef.setInput`.\n * Importantly, when an input does not have an item in the route data with a matching key, this\n * input is set to `undefined`. If it were not done this way, the previous information would be\n * retained if the data got removed from the route (i.e. if a query parameter is removed).\n *\n * The `RouterOutlet` should unregister itself when destroyed via `unsubscribeFromRouteData` so that\n * the subscriptions are cleaned up.\n */\nclass RoutedComponentInputBinder {\n    outletDataSubscriptions = new Map();\n    bindActivatedRouteToOutletComponent(outlet) {\n        this.unsubscribeFromRouteData(outlet);\n        this.subscribeToRouteData(outlet);\n    }\n    unsubscribeFromRouteData(outlet) {\n        this.outletDataSubscriptions.get(outlet)?.unsubscribe();\n        this.outletDataSubscriptions.delete(outlet);\n    }\n    subscribeToRouteData(outlet) {\n        const { activatedRoute } = outlet;\n        const dataSubscription = combineLatest([\n            activatedRoute.queryParams,\n            activatedRoute.params,\n            activatedRoute.data,\n        ])\n            .pipe(switchMap(([queryParams, params, data], index) => {\n            data = { ...queryParams, ...params, ...data };\n            // Get the first result from the data subscription synchronously so it's available to\n            // the component as soon as possible (and doesn't require a second change detection).\n            if (index === 0) {\n                return of(data);\n            }\n            // Promise.resolve is used to avoid synchronously writing the wrong data when\n            // two of the Observables in the `combineLatest` stream emit one after\n            // another.\n            return Promise.resolve(data);\n        }))\n            .subscribe((data) => {\n            // Outlet may have been deactivated or changed names to be associated with a different\n            // route\n            if (!outlet.isActivated ||\n                !outlet.activatedComponentRef ||\n                outlet.activatedRoute !== activatedRoute ||\n                activatedRoute.component === null) {\n                this.unsubscribeFromRouteData(outlet);\n                return;\n            }\n            const mirror = reflectComponentType(activatedRoute.component);\n            if (!mirror) {\n                this.unsubscribeFromRouteData(outlet);\n                return;\n            }\n            for (const { templateName } of mirror.inputs) {\n                outlet.activatedComponentRef.setInput(templateName, data[templateName]);\n            }\n        });\n        this.outletDataSubscriptions.set(outlet, dataSubscription);\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: RoutedComponentInputBinder, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: RoutedComponentInputBinder });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: RoutedComponentInputBinder, decorators: [{\n            type: Injectable\n        }] });\n\nfunction createRouterState(routeReuseStrategy, curr, prevState) {\n    const root = createNode(routeReuseStrategy, curr._root, prevState ? prevState._root : undefined);\n    return new RouterState(root, curr);\n}\nfunction createNode(routeReuseStrategy, curr, prevState) {\n    // reuse an activated route that is currently displayed on the screen\n    if (prevState && routeReuseStrategy.shouldReuseRoute(curr.value, prevState.value.snapshot)) {\n        const value = prevState.value;\n        value._futureSnapshot = curr.value;\n        const children = createOrReuseChildren(routeReuseStrategy, curr, prevState);\n        return new TreeNode(value, children);\n    }\n    else {\n        if (routeReuseStrategy.shouldAttach(curr.value)) {\n            // retrieve an activated route that is used to be displayed, but is not currently displayed\n            const detachedRouteHandle = routeReuseStrategy.retrieve(curr.value);\n            if (detachedRouteHandle !== null) {\n                const tree = detachedRouteHandle.route;\n                tree.value._futureSnapshot = curr.value;\n                tree.children = curr.children.map((c) => createNode(routeReuseStrategy, c));\n                return tree;\n            }\n        }\n        const value = createActivatedRoute(curr.value);\n        const children = curr.children.map((c) => createNode(routeReuseStrategy, c));\n        return new TreeNode(value, children);\n    }\n}\nfunction createOrReuseChildren(routeReuseStrategy, curr, prevState) {\n    return curr.children.map((child) => {\n        for (const p of prevState.children) {\n            if (routeReuseStrategy.shouldReuseRoute(child.value, p.value.snapshot)) {\n                return createNode(routeReuseStrategy, child, p);\n            }\n        }\n        return createNode(routeReuseStrategy, child);\n    });\n}\nfunction createActivatedRoute(c) {\n    return new ActivatedRoute(new BehaviorSubject(c.url), new BehaviorSubject(c.params), new BehaviorSubject(c.queryParams), new BehaviorSubject(c.fragment), new BehaviorSubject(c.data), c.outlet, c.component, c);\n}\n\n/**\n * Can be returned by a `Router` guard to instruct the `Router` to redirect rather than continue\n * processing the path of the in-flight navigation. The `redirectTo` indicates _where_ the new\n * navigation should go to and the optional `navigationBehaviorOptions` can provide more information\n * about _how_ to perform the navigation.\n *\n * ```ts\n * const route: Route = {\n *   path: \"user/:userId\",\n *   component: User,\n *   canActivate: [\n *     () => {\n *       const router = inject(Router);\n *       const authService = inject(AuthenticationService);\n *\n *       if (!authService.isLoggedIn()) {\n *         const loginPath = router.parseUrl(\"/login\");\n *         return new RedirectCommand(loginPath, {\n *           skipLocationChange: \"true\",\n *         });\n *       }\n *\n *       return true;\n *     },\n *   ],\n * };\n * ```\n * @see [Routing guide](guide/routing/common-router-tasks#preventing-unauthorized-access)\n *\n * @publicApi\n */\nclass RedirectCommand {\n    redirectTo;\n    navigationBehaviorOptions;\n    constructor(redirectTo, navigationBehaviorOptions) {\n        this.redirectTo = redirectTo;\n        this.navigationBehaviorOptions = navigationBehaviorOptions;\n    }\n}\n\nconst NAVIGATION_CANCELING_ERROR = 'ngNavigationCancelingError';\nfunction redirectingNavigationError(urlSerializer, redirect) {\n    const { redirectTo, navigationBehaviorOptions } = isUrlTree(redirect)\n        ? { redirectTo: redirect, navigationBehaviorOptions: undefined }\n        : redirect;\n    const error = navigationCancelingError(ngDevMode && `Redirecting to \"${urlSerializer.serialize(redirectTo)}\"`, NavigationCancellationCode.Redirect);\n    error.url = redirectTo;\n    error.navigationBehaviorOptions = navigationBehaviorOptions;\n    return error;\n}\nfunction navigationCancelingError(message, code) {\n    const error = new Error(`NavigationCancelingError: ${message || ''}`);\n    error[NAVIGATION_CANCELING_ERROR] = true;\n    error.cancellationCode = code;\n    return error;\n}\nfunction isRedirectingNavigationCancelingError(error) {\n    return (isNavigationCancelingError(error) &&\n        isUrlTree(error.url));\n}\nfunction isNavigationCancelingError(error) {\n    return !!error && error[NAVIGATION_CANCELING_ERROR];\n}\n\nlet warnedAboutUnsupportedInputBinding = false;\nconst activateRoutes = (rootContexts, routeReuseStrategy, forwardEvent, inputBindingEnabled) => map((t) => {\n    new ActivateRoutes(routeReuseStrategy, t.targetRouterState, t.currentRouterState, forwardEvent, inputBindingEnabled).activate(rootContexts);\n    return t;\n});\nclass ActivateRoutes {\n    routeReuseStrategy;\n    futureState;\n    currState;\n    forwardEvent;\n    inputBindingEnabled;\n    constructor(routeReuseStrategy, futureState, currState, forwardEvent, inputBindingEnabled) {\n        this.routeReuseStrategy = routeReuseStrategy;\n        this.futureState = futureState;\n        this.currState = currState;\n        this.forwardEvent = forwardEvent;\n        this.inputBindingEnabled = inputBindingEnabled;\n    }\n    activate(parentContexts) {\n        const futureRoot = this.futureState._root;\n        const currRoot = this.currState ? this.currState._root : null;\n        this.deactivateChildRoutes(futureRoot, currRoot, parentContexts);\n        advanceActivatedRoute(this.futureState.root);\n        this.activateChildRoutes(futureRoot, currRoot, parentContexts);\n    }\n    // De-activate the child route that are not re-used for the future state\n    deactivateChildRoutes(futureNode, currNode, contexts) {\n        const children = nodeChildrenAsMap(currNode);\n        // Recurse on the routes active in the future state to de-activate deeper children\n        futureNode.children.forEach((futureChild) => {\n            const childOutletName = futureChild.value.outlet;\n            this.deactivateRoutes(futureChild, children[childOutletName], contexts);\n            delete children[childOutletName];\n        });\n        // De-activate the routes that will not be re-used\n        Object.values(children).forEach((v) => {\n            this.deactivateRouteAndItsChildren(v, contexts);\n        });\n    }\n    deactivateRoutes(futureNode, currNode, parentContext) {\n        const future = futureNode.value;\n        const curr = currNode ? currNode.value : null;\n        if (future === curr) {\n            // Reusing the node, check to see if the children need to be de-activated\n            if (future.component) {\n                // If we have a normal route, we need to go through an outlet.\n                const context = parentContext.getContext(future.outlet);\n                if (context) {\n                    this.deactivateChildRoutes(futureNode, currNode, context.children);\n                }\n            }\n            else {\n                // if we have a componentless route, we recurse but keep the same outlet map.\n                this.deactivateChildRoutes(futureNode, currNode, parentContext);\n            }\n        }\n        else {\n            if (curr) {\n                // Deactivate the current route which will not be re-used\n                this.deactivateRouteAndItsChildren(currNode, parentContext);\n            }\n        }\n    }\n    deactivateRouteAndItsChildren(route, parentContexts) {\n        // If there is no component, the Route is never attached to an outlet (because there is no\n        // component to attach).\n        if (route.value.component && this.routeReuseStrategy.shouldDetach(route.value.snapshot)) {\n            this.detachAndStoreRouteSubtree(route, parentContexts);\n        }\n        else {\n            this.deactivateRouteAndOutlet(route, parentContexts);\n        }\n    }\n    detachAndStoreRouteSubtree(route, parentContexts) {\n        const context = parentContexts.getContext(route.value.outlet);\n        const contexts = context && route.value.component ? context.children : parentContexts;\n        const children = nodeChildrenAsMap(route);\n        for (const treeNode of Object.values(children)) {\n            this.deactivateRouteAndItsChildren(treeNode, contexts);\n        }\n        if (context && context.outlet) {\n            const componentRef = context.outlet.detach();\n            const contexts = context.children.onOutletDeactivated();\n            this.routeReuseStrategy.store(route.value.snapshot, { componentRef, route, contexts });\n        }\n    }\n    deactivateRouteAndOutlet(route, parentContexts) {\n        const context = parentContexts.getContext(route.value.outlet);\n        // The context could be `null` if we are on a componentless route but there may still be\n        // children that need deactivating.\n        const contexts = context && route.value.component ? context.children : parentContexts;\n        const children = nodeChildrenAsMap(route);\n        for (const treeNode of Object.values(children)) {\n            this.deactivateRouteAndItsChildren(treeNode, contexts);\n        }\n        if (context) {\n            if (context.outlet) {\n                // Destroy the component\n                context.outlet.deactivate();\n                // Destroy the contexts for all the outlets that were in the component\n                context.children.onOutletDeactivated();\n            }\n            // Clear the information about the attached component on the context but keep the reference to\n            // the outlet. Clear even if outlet was not yet activated to avoid activating later with old\n            // info\n            context.attachRef = null;\n            context.route = null;\n        }\n    }\n    activateChildRoutes(futureNode, currNode, contexts) {\n        const children = nodeChildrenAsMap(currNode);\n        futureNode.children.forEach((c) => {\n            this.activateRoutes(c, children[c.value.outlet], contexts);\n            this.forwardEvent(new ActivationEnd(c.value.snapshot));\n        });\n        if (futureNode.children.length) {\n            this.forwardEvent(new ChildActivationEnd(futureNode.value.snapshot));\n        }\n    }\n    activateRoutes(futureNode, currNode, parentContexts) {\n        const future = futureNode.value;\n        const curr = currNode ? currNode.value : null;\n        advanceActivatedRoute(future);\n        // reusing the node\n        if (future === curr) {\n            if (future.component) {\n                // If we have a normal route, we need to go through an outlet.\n                const context = parentContexts.getOrCreateContext(future.outlet);\n                this.activateChildRoutes(futureNode, currNode, context.children);\n            }\n            else {\n                // if we have a componentless route, we recurse but keep the same outlet map.\n                this.activateChildRoutes(futureNode, currNode, parentContexts);\n            }\n        }\n        else {\n            if (future.component) {\n                // if we have a normal route, we need to place the component into the outlet and recurse.\n                const context = parentContexts.getOrCreateContext(future.outlet);\n                if (this.routeReuseStrategy.shouldAttach(future.snapshot)) {\n                    const stored = (this.routeReuseStrategy.retrieve(future.snapshot));\n                    this.routeReuseStrategy.store(future.snapshot, null);\n                    context.children.onOutletReAttached(stored.contexts);\n                    context.attachRef = stored.componentRef;\n                    context.route = stored.route.value;\n                    if (context.outlet) {\n                        // Attach right away when the outlet has already been instantiated\n                        // Otherwise attach from `RouterOutlet.ngOnInit` when it is instantiated\n                        context.outlet.attach(stored.componentRef, stored.route.value);\n                    }\n                    advanceActivatedRoute(stored.route.value);\n                    this.activateChildRoutes(futureNode, null, context.children);\n                }\n                else {\n                    context.attachRef = null;\n                    context.route = future;\n                    if (context.outlet) {\n                        // Activate the outlet when it has already been instantiated\n                        // Otherwise it will get activated from its `ngOnInit` when instantiated\n                        context.outlet.activateWith(future, context.injector);\n                    }\n                    this.activateChildRoutes(futureNode, null, context.children);\n                }\n            }\n            else {\n                // if we have a componentless route, we recurse but keep the same outlet map.\n                this.activateChildRoutes(futureNode, null, parentContexts);\n            }\n        }\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            const context = parentContexts.getOrCreateContext(future.outlet);\n            const outlet = context.outlet;\n            if (outlet &&\n                this.inputBindingEnabled &&\n                !outlet.supportsBindingToComponentInputs &&\n                !warnedAboutUnsupportedInputBinding) {\n                console.warn(`'withComponentInputBinding' feature is enabled but ` +\n                    `this application is using an outlet that may not support binding to component inputs.`);\n                warnedAboutUnsupportedInputBinding = true;\n            }\n        }\n    }\n}\n\nclass CanActivate {\n    path;\n    route;\n    constructor(path) {\n        this.path = path;\n        this.route = this.path[this.path.length - 1];\n    }\n}\nclass CanDeactivate {\n    component;\n    route;\n    constructor(component, route) {\n        this.component = component;\n        this.route = route;\n    }\n}\nfunction getAllRouteGuards(future, curr, parentContexts) {\n    const futureRoot = future._root;\n    const currRoot = curr ? curr._root : null;\n    return getChildRouteGuards(futureRoot, currRoot, parentContexts, [futureRoot.value]);\n}\nfunction getCanActivateChild(p) {\n    const canActivateChild = p.routeConfig ? p.routeConfig.canActivateChild : null;\n    if (!canActivateChild || canActivateChild.length === 0)\n        return null;\n    return { node: p, guards: canActivateChild };\n}\nfunction getTokenOrFunctionIdentity(tokenOrFunction, injector) {\n    const NOT_FOUND = Symbol();\n    const result = injector.get(tokenOrFunction, NOT_FOUND);\n    if (result === NOT_FOUND) {\n        if (typeof tokenOrFunction === 'function' && !_isInjectable(tokenOrFunction)) {\n            // We think the token is just a function so return it as-is\n            return tokenOrFunction;\n        }\n        else {\n            // This will throw the not found error\n            return injector.get(tokenOrFunction);\n        }\n    }\n    return result;\n}\nfunction getChildRouteGuards(futureNode, currNode, contexts, futurePath, checks = {\n    canDeactivateChecks: [],\n    canActivateChecks: [],\n}) {\n    const prevChildren = nodeChildrenAsMap(currNode);\n    // Process the children of the future route\n    futureNode.children.forEach((c) => {\n        getRouteGuards(c, prevChildren[c.value.outlet], contexts, futurePath.concat([c.value]), checks);\n        delete prevChildren[c.value.outlet];\n    });\n    // Process any children left from the current route (not active for the future route)\n    Object.entries(prevChildren).forEach(([k, v]) => deactivateRouteAndItsChildren(v, contexts.getContext(k), checks));\n    return checks;\n}\nfunction getRouteGuards(futureNode, currNode, parentContexts, futurePath, checks = {\n    canDeactivateChecks: [],\n    canActivateChecks: [],\n}) {\n    const future = futureNode.value;\n    const curr = currNode ? currNode.value : null;\n    const context = parentContexts ? parentContexts.getContext(futureNode.value.outlet) : null;\n    // reusing the node\n    if (curr && future.routeConfig === curr.routeConfig) {\n        const shouldRun = shouldRunGuardsAndResolvers(curr, future, future.routeConfig.runGuardsAndResolvers);\n        if (shouldRun) {\n            checks.canActivateChecks.push(new CanActivate(futurePath));\n        }\n        else {\n            // we need to set the data\n            future.data = curr.data;\n            future._resolvedData = curr._resolvedData;\n        }\n        // If we have a component, we need to go through an outlet.\n        if (future.component) {\n            getChildRouteGuards(futureNode, currNode, context ? context.children : null, futurePath, checks);\n            // if we have a componentless route, we recurse but keep the same outlet map.\n        }\n        else {\n            getChildRouteGuards(futureNode, currNode, parentContexts, futurePath, checks);\n        }\n        if (shouldRun && context && context.outlet && context.outlet.isActivated) {\n            checks.canDeactivateChecks.push(new CanDeactivate(context.outlet.component, curr));\n        }\n    }\n    else {\n        if (curr) {\n            deactivateRouteAndItsChildren(currNode, context, checks);\n        }\n        checks.canActivateChecks.push(new CanActivate(futurePath));\n        // If we have a component, we need to go through an outlet.\n        if (future.component) {\n            getChildRouteGuards(futureNode, null, context ? context.children : null, futurePath, checks);\n            // if we have a componentless route, we recurse but keep the same outlet map.\n        }\n        else {\n            getChildRouteGuards(futureNode, null, parentContexts, futurePath, checks);\n        }\n    }\n    return checks;\n}\nfunction shouldRunGuardsAndResolvers(curr, future, mode) {\n    if (typeof mode === 'function') {\n        return mode(curr, future);\n    }\n    switch (mode) {\n        case 'pathParamsChange':\n            return !equalPath(curr.url, future.url);\n        case 'pathParamsOrQueryParamsChange':\n            return (!equalPath(curr.url, future.url) || !shallowEqual(curr.queryParams, future.queryParams));\n        case 'always':\n            return true;\n        case 'paramsOrQueryParamsChange':\n            return (!equalParamsAndUrlSegments(curr, future) ||\n                !shallowEqual(curr.queryParams, future.queryParams));\n        case 'paramsChange':\n        default:\n            return !equalParamsAndUrlSegments(curr, future);\n    }\n}\nfunction deactivateRouteAndItsChildren(route, context, checks) {\n    const children = nodeChildrenAsMap(route);\n    const r = route.value;\n    Object.entries(children).forEach(([childName, node]) => {\n        if (!r.component) {\n            deactivateRouteAndItsChildren(node, context, checks);\n        }\n        else if (context) {\n            deactivateRouteAndItsChildren(node, context.children.getContext(childName), checks);\n        }\n        else {\n            deactivateRouteAndItsChildren(node, null, checks);\n        }\n    });\n    if (!r.component) {\n        checks.canDeactivateChecks.push(new CanDeactivate(null, r));\n    }\n    else if (context && context.outlet && context.outlet.isActivated) {\n        checks.canDeactivateChecks.push(new CanDeactivate(context.outlet.component, r));\n    }\n    else {\n        checks.canDeactivateChecks.push(new CanDeactivate(null, r));\n    }\n}\n\n/**\n * Simple function check, but generic so type inference will flow. Example:\n *\n * function product(a: number, b: number) {\n *   return a * b;\n * }\n *\n * if (isFunction<product>(fn)) {\n *   return fn(1, 2);\n * } else {\n *   throw \"Must provide the `product` function\";\n * }\n */\nfunction isFunction(v) {\n    return typeof v === 'function';\n}\nfunction isBoolean(v) {\n    return typeof v === 'boolean';\n}\nfunction isCanLoad(guard) {\n    return guard && isFunction(guard.canLoad);\n}\nfunction isCanActivate(guard) {\n    return guard && isFunction(guard.canActivate);\n}\nfunction isCanActivateChild(guard) {\n    return guard && isFunction(guard.canActivateChild);\n}\nfunction isCanDeactivate(guard) {\n    return guard && isFunction(guard.canDeactivate);\n}\nfunction isCanMatch(guard) {\n    return guard && isFunction(guard.canMatch);\n}\nfunction isEmptyError(e) {\n    return e instanceof EmptyError || e?.name === 'EmptyError';\n}\n\nconst INITIAL_VALUE = /* @__PURE__ */ Symbol('INITIAL_VALUE');\nfunction prioritizedGuardValue() {\n    return switchMap((obs) => {\n        return combineLatest(obs.map((o) => o.pipe(take(1), startWith(INITIAL_VALUE)))).pipe(map((results) => {\n            for (const result of results) {\n                if (result === true) {\n                    // If result is true, check the next one\n                    continue;\n                }\n                else if (result === INITIAL_VALUE) {\n                    // If guard has not finished, we need to stop processing.\n                    return INITIAL_VALUE;\n                }\n                else if (result === false || isRedirect(result)) {\n                    // Result finished and was not true. Return the result.\n                    // Note that we only allow false/UrlTree/RedirectCommand. Other values are considered invalid and\n                    // ignored.\n                    return result;\n                }\n            }\n            // Everything resolved to true. Return true.\n            return true;\n        }), filter((item) => item !== INITIAL_VALUE), take(1));\n    });\n}\nfunction isRedirect(val) {\n    return isUrlTree(val) || val instanceof RedirectCommand;\n}\n\nfunction checkGuards(injector, forwardEvent) {\n    return mergeMap((t) => {\n        const { targetSnapshot, currentSnapshot, guards: { canActivateChecks, canDeactivateChecks }, } = t;\n        if (canDeactivateChecks.length === 0 && canActivateChecks.length === 0) {\n            return of({ ...t, guardsResult: true });\n        }\n        return runCanDeactivateChecks(canDeactivateChecks, targetSnapshot, currentSnapshot, injector).pipe(mergeMap((canDeactivate) => {\n            return canDeactivate && isBoolean(canDeactivate)\n                ? runCanActivateChecks(targetSnapshot, canActivateChecks, injector, forwardEvent)\n                : of(canDeactivate);\n        }), map((guardsResult) => ({ ...t, guardsResult })));\n    });\n}\nfunction runCanDeactivateChecks(checks, futureRSS, currRSS, injector) {\n    return from(checks).pipe(mergeMap((check) => runCanDeactivate(check.component, check.route, currRSS, futureRSS, injector)), first((result) => {\n        return result !== true;\n    }, true));\n}\nfunction runCanActivateChecks(futureSnapshot, checks, injector, forwardEvent) {\n    return from(checks).pipe(concatMap((check) => {\n        return concat(fireChildActivationStart(check.route.parent, forwardEvent), fireActivationStart(check.route, forwardEvent), runCanActivateChild(futureSnapshot, check.path, injector), runCanActivate(futureSnapshot, check.route, injector));\n    }), first((result) => {\n        return result !== true;\n    }, true));\n}\n/**\n * This should fire off `ActivationStart` events for each route being activated at this\n * level.\n * In other words, if you're activating `a` and `b` below, `path` will contain the\n * `ActivatedRouteSnapshot`s for both and we will fire `ActivationStart` for both. Always\n * return\n * `true` so checks continue to run.\n */\nfunction fireActivationStart(snapshot, forwardEvent) {\n    if (snapshot !== null && forwardEvent) {\n        forwardEvent(new ActivationStart(snapshot));\n    }\n    return of(true);\n}\n/**\n * This should fire off `ChildActivationStart` events for each route being activated at this\n * level.\n * In other words, if you're activating `a` and `b` below, `path` will contain the\n * `ActivatedRouteSnapshot`s for both and we will fire `ChildActivationStart` for both. Always\n * return\n * `true` so checks continue to run.\n */\nfunction fireChildActivationStart(snapshot, forwardEvent) {\n    if (snapshot !== null && forwardEvent) {\n        forwardEvent(new ChildActivationStart(snapshot));\n    }\n    return of(true);\n}\nfunction runCanActivate(futureRSS, futureARS, injector) {\n    const canActivate = futureARS.routeConfig ? futureARS.routeConfig.canActivate : null;\n    if (!canActivate || canActivate.length === 0)\n        return of(true);\n    const canActivateObservables = canActivate.map((canActivate) => {\n        return defer(() => {\n            const closestInjector = getClosestRouteInjector(futureARS) ?? injector;\n            const guard = getTokenOrFunctionIdentity(canActivate, closestInjector);\n            const guardVal = isCanActivate(guard)\n                ? guard.canActivate(futureARS, futureRSS)\n                : runInInjectionContext(closestInjector, () => guard(futureARS, futureRSS));\n            return wrapIntoObservable(guardVal).pipe(first());\n        });\n    });\n    return of(canActivateObservables).pipe(prioritizedGuardValue());\n}\nfunction runCanActivateChild(futureRSS, path, injector) {\n    const futureARS = path[path.length - 1];\n    const canActivateChildGuards = path\n        .slice(0, path.length - 1)\n        .reverse()\n        .map((p) => getCanActivateChild(p))\n        .filter((_) => _ !== null);\n    const canActivateChildGuardsMapped = canActivateChildGuards.map((d) => {\n        return defer(() => {\n            const guardsMapped = d.guards.map((canActivateChild) => {\n                const closestInjector = getClosestRouteInjector(d.node) ?? injector;\n                const guard = getTokenOrFunctionIdentity(canActivateChild, closestInjector);\n                const guardVal = isCanActivateChild(guard)\n                    ? guard.canActivateChild(futureARS, futureRSS)\n                    : runInInjectionContext(closestInjector, () => guard(futureARS, futureRSS));\n                return wrapIntoObservable(guardVal).pipe(first());\n            });\n            return of(guardsMapped).pipe(prioritizedGuardValue());\n        });\n    });\n    return of(canActivateChildGuardsMapped).pipe(prioritizedGuardValue());\n}\nfunction runCanDeactivate(component, currARS, currRSS, futureRSS, injector) {\n    const canDeactivate = currARS && currARS.routeConfig ? currARS.routeConfig.canDeactivate : null;\n    if (!canDeactivate || canDeactivate.length === 0)\n        return of(true);\n    const canDeactivateObservables = canDeactivate.map((c) => {\n        const closestInjector = getClosestRouteInjector(currARS) ?? injector;\n        const guard = getTokenOrFunctionIdentity(c, closestInjector);\n        const guardVal = isCanDeactivate(guard)\n            ? guard.canDeactivate(component, currARS, currRSS, futureRSS)\n            : runInInjectionContext(closestInjector, () => guard(component, currARS, currRSS, futureRSS));\n        return wrapIntoObservable(guardVal).pipe(first());\n    });\n    return of(canDeactivateObservables).pipe(prioritizedGuardValue());\n}\nfunction runCanLoadGuards(injector, route, segments, urlSerializer) {\n    const canLoad = route.canLoad;\n    if (canLoad === undefined || canLoad.length === 0) {\n        return of(true);\n    }\n    const canLoadObservables = canLoad.map((injectionToken) => {\n        const guard = getTokenOrFunctionIdentity(injectionToken, injector);\n        const guardVal = isCanLoad(guard)\n            ? guard.canLoad(route, segments)\n            : runInInjectionContext(injector, () => guard(route, segments));\n        return wrapIntoObservable(guardVal);\n    });\n    return of(canLoadObservables).pipe(prioritizedGuardValue(), redirectIfUrlTree(urlSerializer));\n}\nfunction redirectIfUrlTree(urlSerializer) {\n    return pipe(tap((result) => {\n        if (typeof result === 'boolean')\n            return;\n        throw redirectingNavigationError(urlSerializer, result);\n    }), map((result) => result === true));\n}\nfunction runCanMatchGuards(injector, route, segments, urlSerializer) {\n    const canMatch = route.canMatch;\n    if (!canMatch || canMatch.length === 0)\n        return of(true);\n    const canMatchObservables = canMatch.map((injectionToken) => {\n        const guard = getTokenOrFunctionIdentity(injectionToken, injector);\n        const guardVal = isCanMatch(guard)\n            ? guard.canMatch(route, segments)\n            : runInInjectionContext(injector, () => guard(route, segments));\n        return wrapIntoObservable(guardVal);\n    });\n    return of(canMatchObservables).pipe(prioritizedGuardValue(), redirectIfUrlTree(urlSerializer));\n}\n\nclass NoMatch {\n    segmentGroup;\n    constructor(segmentGroup) {\n        this.segmentGroup = segmentGroup || null;\n    }\n}\nclass AbsoluteRedirect extends Error {\n    urlTree;\n    constructor(urlTree) {\n        super();\n        this.urlTree = urlTree;\n    }\n}\nfunction noMatch$1(segmentGroup) {\n    return throwError(new NoMatch(segmentGroup));\n}\nfunction namedOutletsRedirect(redirectTo) {\n    return throwError(new _RuntimeError(4000 /* RuntimeErrorCode.NAMED_OUTLET_REDIRECT */, (typeof ngDevMode === 'undefined' || ngDevMode) &&\n        `Only absolute redirects can have named outlets. redirectTo: '${redirectTo}'`));\n}\nfunction canLoadFails(route) {\n    return throwError(navigationCancelingError((typeof ngDevMode === 'undefined' || ngDevMode) &&\n        `Cannot load children because the guard of the route \"path: '${route.path}'\" returned false`, NavigationCancellationCode.GuardRejected));\n}\nclass ApplyRedirects {\n    urlSerializer;\n    urlTree;\n    constructor(urlSerializer, urlTree) {\n        this.urlSerializer = urlSerializer;\n        this.urlTree = urlTree;\n    }\n    lineralizeSegments(route, urlTree) {\n        let res = [];\n        let c = urlTree.root;\n        while (true) {\n            res = res.concat(c.segments);\n            if (c.numberOfChildren === 0) {\n                return of(res);\n            }\n            if (c.numberOfChildren > 1 || !c.children[PRIMARY_OUTLET]) {\n                return namedOutletsRedirect(`${route.redirectTo}`);\n            }\n            c = c.children[PRIMARY_OUTLET];\n        }\n    }\n    applyRedirectCommands(segments, redirectTo, posParams, currentSnapshot, injector) {\n        if (typeof redirectTo !== 'string') {\n            const redirectToFn = redirectTo;\n            const { queryParams, fragment, routeConfig, url, outlet, params, data, title } = currentSnapshot;\n            const newRedirect = runInInjectionContext(injector, () => redirectToFn({ params, data, queryParams, fragment, routeConfig, url, outlet, title }));\n            if (newRedirect instanceof UrlTree) {\n                throw new AbsoluteRedirect(newRedirect);\n            }\n            redirectTo = newRedirect;\n        }\n        const newTree = this.applyRedirectCreateUrlTree(redirectTo, this.urlSerializer.parse(redirectTo), segments, posParams);\n        if (redirectTo[0] === '/') {\n            throw new AbsoluteRedirect(newTree);\n        }\n        return newTree;\n    }\n    applyRedirectCreateUrlTree(redirectTo, urlTree, segments, posParams) {\n        const newRoot = this.createSegmentGroup(redirectTo, urlTree.root, segments, posParams);\n        return new UrlTree(newRoot, this.createQueryParams(urlTree.queryParams, this.urlTree.queryParams), urlTree.fragment);\n    }\n    createQueryParams(redirectToParams, actualParams) {\n        const res = {};\n        Object.entries(redirectToParams).forEach(([k, v]) => {\n            const copySourceValue = typeof v === 'string' && v[0] === ':';\n            if (copySourceValue) {\n                const sourceName = v.substring(1);\n                res[k] = actualParams[sourceName];\n            }\n            else {\n                res[k] = v;\n            }\n        });\n        return res;\n    }\n    createSegmentGroup(redirectTo, group, segments, posParams) {\n        const updatedSegments = this.createSegments(redirectTo, group.segments, segments, posParams);\n        let children = {};\n        Object.entries(group.children).forEach(([name, child]) => {\n            children[name] = this.createSegmentGroup(redirectTo, child, segments, posParams);\n        });\n        return new UrlSegmentGroup(updatedSegments, children);\n    }\n    createSegments(redirectTo, redirectToSegments, actualSegments, posParams) {\n        return redirectToSegments.map((s) => s.path[0] === ':'\n            ? this.findPosParam(redirectTo, s, posParams)\n            : this.findOrReturn(s, actualSegments));\n    }\n    findPosParam(redirectTo, redirectToUrlSegment, posParams) {\n        const pos = posParams[redirectToUrlSegment.path.substring(1)];\n        if (!pos)\n            throw new _RuntimeError(4001 /* RuntimeErrorCode.MISSING_REDIRECT */, (typeof ngDevMode === 'undefined' || ngDevMode) &&\n                `Cannot redirect to '${redirectTo}'. Cannot find '${redirectToUrlSegment.path}'.`);\n        return pos;\n    }\n    findOrReturn(redirectToUrlSegment, actualSegments) {\n        let idx = 0;\n        for (const s of actualSegments) {\n            if (s.path === redirectToUrlSegment.path) {\n                actualSegments.splice(idx);\n                return s;\n            }\n            idx++;\n        }\n        return redirectToUrlSegment;\n    }\n}\n\nconst noMatch = {\n    matched: false,\n    consumedSegments: [],\n    remainingSegments: [],\n    parameters: {},\n    positionalParamSegments: {},\n};\nfunction matchWithChecks(segmentGroup, route, segments, injector, urlSerializer) {\n    const result = match(segmentGroup, route, segments);\n    if (!result.matched) {\n        return of(result);\n    }\n    // Only create the Route's `EnvironmentInjector` if it matches the attempted\n    // navigation\n    injector = getOrCreateRouteInjectorIfNeeded(route, injector);\n    return runCanMatchGuards(injector, route, segments, urlSerializer).pipe(map((v) => (v === true ? result : { ...noMatch })));\n}\nfunction match(segmentGroup, route, segments) {\n    if (route.path === '**') {\n        return createWildcardMatchResult(segments);\n    }\n    if (route.path === '') {\n        if (route.pathMatch === 'full' && (segmentGroup.hasChildren() || segments.length > 0)) {\n            return { ...noMatch };\n        }\n        return {\n            matched: true,\n            consumedSegments: [],\n            remainingSegments: segments,\n            parameters: {},\n            positionalParamSegments: {},\n        };\n    }\n    const matcher = route.matcher || defaultUrlMatcher;\n    const res = matcher(segments, segmentGroup, route);\n    if (!res)\n        return { ...noMatch };\n    const posParams = {};\n    Object.entries(res.posParams ?? {}).forEach(([k, v]) => {\n        posParams[k] = v.path;\n    });\n    const parameters = res.consumed.length > 0\n        ? { ...posParams, ...res.consumed[res.consumed.length - 1].parameters }\n        : posParams;\n    return {\n        matched: true,\n        consumedSegments: res.consumed,\n        remainingSegments: segments.slice(res.consumed.length),\n        // TODO(atscott): investigate combining parameters and positionalParamSegments\n        parameters,\n        positionalParamSegments: res.posParams ?? {},\n    };\n}\nfunction createWildcardMatchResult(segments) {\n    return {\n        matched: true,\n        parameters: segments.length > 0 ? last(segments).parameters : {},\n        consumedSegments: segments,\n        remainingSegments: [],\n        positionalParamSegments: {},\n    };\n}\nfunction split(segmentGroup, consumedSegments, slicedSegments, config) {\n    if (slicedSegments.length > 0 &&\n        containsEmptyPathMatchesWithNamedOutlets(segmentGroup, slicedSegments, config)) {\n        const s = new UrlSegmentGroup(consumedSegments, createChildrenForEmptyPaths(config, new UrlSegmentGroup(slicedSegments, segmentGroup.children)));\n        return { segmentGroup: s, slicedSegments: [] };\n    }\n    if (slicedSegments.length === 0 &&\n        containsEmptyPathMatches(segmentGroup, slicedSegments, config)) {\n        const s = new UrlSegmentGroup(segmentGroup.segments, addEmptyPathsToChildrenIfNeeded(segmentGroup, slicedSegments, config, segmentGroup.children));\n        return { segmentGroup: s, slicedSegments };\n    }\n    const s = new UrlSegmentGroup(segmentGroup.segments, segmentGroup.children);\n    return { segmentGroup: s, slicedSegments };\n}\nfunction addEmptyPathsToChildrenIfNeeded(segmentGroup, slicedSegments, routes, children) {\n    const res = {};\n    for (const r of routes) {\n        if (emptyPathMatch(segmentGroup, slicedSegments, r) && !children[getOutlet(r)]) {\n            const s = new UrlSegmentGroup([], {});\n            res[getOutlet(r)] = s;\n        }\n    }\n    return { ...children, ...res };\n}\nfunction createChildrenForEmptyPaths(routes, primarySegment) {\n    const res = {};\n    res[PRIMARY_OUTLET] = primarySegment;\n    for (const r of routes) {\n        if (r.path === '' && getOutlet(r) !== PRIMARY_OUTLET) {\n            const s = new UrlSegmentGroup([], {});\n            res[getOutlet(r)] = s;\n        }\n    }\n    return res;\n}\nfunction containsEmptyPathMatchesWithNamedOutlets(segmentGroup, slicedSegments, routes) {\n    return routes.some((r) => emptyPathMatch(segmentGroup, slicedSegments, r) && getOutlet(r) !== PRIMARY_OUTLET);\n}\nfunction containsEmptyPathMatches(segmentGroup, slicedSegments, routes) {\n    return routes.some((r) => emptyPathMatch(segmentGroup, slicedSegments, r));\n}\nfunction emptyPathMatch(segmentGroup, slicedSegments, r) {\n    if ((segmentGroup.hasChildren() || slicedSegments.length > 0) && r.pathMatch === 'full') {\n        return false;\n    }\n    return r.path === '';\n}\nfunction noLeftoversInUrl(segmentGroup, segments, outlet) {\n    return segments.length === 0 && !segmentGroup.children[outlet];\n}\n\n/**\n * Class used to indicate there were no additional route config matches but that all segments of\n * the URL were consumed during matching so the route was URL matched. When this happens, we still\n * try to match child configs in case there are empty path children.\n */\nclass NoLeftoversInUrl {\n}\nfunction recognize$1(injector, configLoader, rootComponentType, config, urlTree, urlSerializer, paramsInheritanceStrategy = 'emptyOnly') {\n    return new Recognizer(injector, configLoader, rootComponentType, config, urlTree, paramsInheritanceStrategy, urlSerializer).recognize();\n}\nconst MAX_ALLOWED_REDIRECTS = 31;\nclass Recognizer {\n    injector;\n    configLoader;\n    rootComponentType;\n    config;\n    urlTree;\n    paramsInheritanceStrategy;\n    urlSerializer;\n    applyRedirects;\n    absoluteRedirectCount = 0;\n    allowRedirects = true;\n    constructor(injector, configLoader, rootComponentType, config, urlTree, paramsInheritanceStrategy, urlSerializer) {\n        this.injector = injector;\n        this.configLoader = configLoader;\n        this.rootComponentType = rootComponentType;\n        this.config = config;\n        this.urlTree = urlTree;\n        this.paramsInheritanceStrategy = paramsInheritanceStrategy;\n        this.urlSerializer = urlSerializer;\n        this.applyRedirects = new ApplyRedirects(this.urlSerializer, this.urlTree);\n    }\n    noMatchError(e) {\n        return new _RuntimeError(4002 /* RuntimeErrorCode.NO_MATCH */, typeof ngDevMode === 'undefined' || ngDevMode\n            ? `Cannot match any routes. URL Segment: '${e.segmentGroup}'`\n            : `'${e.segmentGroup}'`);\n    }\n    recognize() {\n        const rootSegmentGroup = split(this.urlTree.root, [], [], this.config).segmentGroup;\n        return this.match(rootSegmentGroup).pipe(map(({ children, rootSnapshot }) => {\n            const rootNode = new TreeNode(rootSnapshot, children);\n            const routeState = new RouterStateSnapshot('', rootNode);\n            const tree = createUrlTreeFromSnapshot(rootSnapshot, [], this.urlTree.queryParams, this.urlTree.fragment);\n            // https://github.com/angular/angular/issues/47307\n            // Creating the tree stringifies the query params\n            // We don't want to do this here so reassign them to the original.\n            tree.queryParams = this.urlTree.queryParams;\n            routeState.url = this.urlSerializer.serialize(tree);\n            return { state: routeState, tree };\n        }));\n    }\n    match(rootSegmentGroup) {\n        // Use Object.freeze to prevent readers of the Router state from modifying it outside\n        // of a navigation, resulting in the router being out of sync with the browser.\n        const rootSnapshot = new ActivatedRouteSnapshot([], Object.freeze({}), Object.freeze({ ...this.urlTree.queryParams }), this.urlTree.fragment, Object.freeze({}), PRIMARY_OUTLET, this.rootComponentType, null, {});\n        return this.processSegmentGroup(this.injector, this.config, rootSegmentGroup, PRIMARY_OUTLET, rootSnapshot).pipe(map((children) => {\n            return { children, rootSnapshot };\n        }), catchError((e) => {\n            if (e instanceof AbsoluteRedirect) {\n                this.urlTree = e.urlTree;\n                return this.match(e.urlTree.root);\n            }\n            if (e instanceof NoMatch) {\n                throw this.noMatchError(e);\n            }\n            throw e;\n        }));\n    }\n    processSegmentGroup(injector, config, segmentGroup, outlet, parentRoute) {\n        if (segmentGroup.segments.length === 0 && segmentGroup.hasChildren()) {\n            return this.processChildren(injector, config, segmentGroup, parentRoute);\n        }\n        return this.processSegment(injector, config, segmentGroup, segmentGroup.segments, outlet, true, parentRoute).pipe(map((child) => (child instanceof TreeNode ? [child] : [])));\n    }\n    /**\n     * Matches every child outlet in the `segmentGroup` to a `Route` in the config. Returns `null` if\n     * we cannot find a match for _any_ of the children.\n     *\n     * @param config - The `Routes` to match against\n     * @param segmentGroup - The `UrlSegmentGroup` whose children need to be matched against the\n     *     config.\n     */\n    processChildren(injector, config, segmentGroup, parentRoute) {\n        // Expand outlets one at a time, starting with the primary outlet. We need to do it this way\n        // because an absolute redirect from the primary outlet takes precedence.\n        const childOutlets = [];\n        for (const child of Object.keys(segmentGroup.children)) {\n            if (child === 'primary') {\n                childOutlets.unshift(child);\n            }\n            else {\n                childOutlets.push(child);\n            }\n        }\n        return from(childOutlets).pipe(concatMap((childOutlet) => {\n            const child = segmentGroup.children[childOutlet];\n            // Sort the config so that routes with outlets that match the one being activated\n            // appear first, followed by routes for other outlets, which might match if they have\n            // an empty path.\n            const sortedConfig = sortByMatchingOutlets(config, childOutlet);\n            return this.processSegmentGroup(injector, sortedConfig, child, childOutlet, parentRoute);\n        }), scan((children, outletChildren) => {\n            children.push(...outletChildren);\n            return children;\n        }), defaultIfEmpty(null), last$1(), mergeMap((children) => {\n            if (children === null)\n                return noMatch$1(segmentGroup);\n            // Because we may have matched two outlets to the same empty path segment, we can have\n            // multiple activated results for the same outlet. We should merge the children of\n            // these results so the final return value is only one `TreeNode` per outlet.\n            const mergedChildren = mergeEmptyPathMatches(children);\n            if (typeof ngDevMode === 'undefined' || ngDevMode) {\n                // This should really never happen - we are only taking the first match for each\n                // outlet and merge the empty path matches.\n                checkOutletNameUniqueness(mergedChildren);\n            }\n            sortActivatedRouteSnapshots(mergedChildren);\n            return of(mergedChildren);\n        }));\n    }\n    processSegment(injector, routes, segmentGroup, segments, outlet, allowRedirects, parentRoute) {\n        return from(routes).pipe(concatMap((r) => {\n            return this.processSegmentAgainstRoute(r._injector ?? injector, routes, r, segmentGroup, segments, outlet, allowRedirects, parentRoute).pipe(catchError((e) => {\n                if (e instanceof NoMatch) {\n                    return of(null);\n                }\n                throw e;\n            }));\n        }), first((x) => !!x), catchError((e) => {\n            if (isEmptyError(e)) {\n                if (noLeftoversInUrl(segmentGroup, segments, outlet)) {\n                    return of(new NoLeftoversInUrl());\n                }\n                return noMatch$1(segmentGroup);\n            }\n            throw e;\n        }));\n    }\n    processSegmentAgainstRoute(injector, routes, route, rawSegment, segments, outlet, allowRedirects, parentRoute) {\n        // We allow matches to empty paths when the outlets differ so we can match a url like `/(b:b)` to\n        // a config like\n        // * `{path: '', children: [{path: 'b', outlet: 'b'}]}`\n        // or even\n        // * `{path: '', outlet: 'a', children: [{path: 'b', outlet: 'b'}]`\n        //\n        // The exception here is when the segment outlet is for the primary outlet. This would\n        // result in a match inside the named outlet because all children there are written as primary\n        // outlets. So we need to prevent child named outlet matches in a url like `/b` in a config like\n        // * `{path: '', outlet: 'x' children: [{path: 'b'}]}`\n        // This should only match if the url is `/(x:b)`.\n        if (getOutlet(route) !== outlet &&\n            (outlet === PRIMARY_OUTLET || !emptyPathMatch(rawSegment, segments, route))) {\n            return noMatch$1(rawSegment);\n        }\n        if (route.redirectTo === undefined) {\n            return this.matchSegmentAgainstRoute(injector, rawSegment, route, segments, outlet, parentRoute);\n        }\n        if (this.allowRedirects && allowRedirects) {\n            return this.expandSegmentAgainstRouteUsingRedirect(injector, rawSegment, routes, route, segments, outlet, parentRoute);\n        }\n        return noMatch$1(rawSegment);\n    }\n    expandSegmentAgainstRouteUsingRedirect(injector, segmentGroup, routes, route, segments, outlet, parentRoute) {\n        const { matched, parameters, consumedSegments, positionalParamSegments, remainingSegments } = match(segmentGroup, route, segments);\n        if (!matched)\n            return noMatch$1(segmentGroup);\n        // TODO(atscott): Move all of this under an if(ngDevMode) as a breaking change and allow stack\n        // size exceeded in production\n        if (typeof route.redirectTo === 'string' && route.redirectTo[0] === '/') {\n            this.absoluteRedirectCount++;\n            if (this.absoluteRedirectCount > MAX_ALLOWED_REDIRECTS) {\n                if (ngDevMode) {\n                    throw new _RuntimeError(4016 /* RuntimeErrorCode.INFINITE_REDIRECT */, `Detected possible infinite redirect when redirecting from '${this.urlTree}' to '${route.redirectTo}'.\\n` +\n                        `This is currently a dev mode only error but will become a` +\n                        ` call stack size exceeded error in production in a future major version.`);\n                }\n                this.allowRedirects = false;\n            }\n        }\n        const currentSnapshot = new ActivatedRouteSnapshot(segments, parameters, Object.freeze({ ...this.urlTree.queryParams }), this.urlTree.fragment, getData(route), getOutlet(route), route.component ?? route._loadedComponent ?? null, route, getResolve(route));\n        const inherited = getInherited(currentSnapshot, parentRoute, this.paramsInheritanceStrategy);\n        currentSnapshot.params = Object.freeze(inherited.params);\n        currentSnapshot.data = Object.freeze(inherited.data);\n        const newTree = this.applyRedirects.applyRedirectCommands(consumedSegments, route.redirectTo, positionalParamSegments, currentSnapshot, injector);\n        return this.applyRedirects.lineralizeSegments(route, newTree).pipe(mergeMap((newSegments) => {\n            return this.processSegment(injector, routes, segmentGroup, newSegments.concat(remainingSegments), outlet, false, parentRoute);\n        }));\n    }\n    matchSegmentAgainstRoute(injector, rawSegment, route, segments, outlet, parentRoute) {\n        const matchResult = matchWithChecks(rawSegment, route, segments, injector, this.urlSerializer);\n        if (route.path === '**') {\n            // Prior versions of the route matching algorithm would stop matching at the wildcard route.\n            // We should investigate a better strategy for any existing children. Otherwise, these\n            // child segments are silently dropped from the navigation.\n            // https://github.com/angular/angular/issues/40089\n            rawSegment.children = {};\n        }\n        return matchResult.pipe(switchMap((result) => {\n            if (!result.matched) {\n                return noMatch$1(rawSegment);\n            }\n            // If the route has an injector created from providers, we should start using that.\n            injector = route._injector ?? injector;\n            return this.getChildConfig(injector, route, segments).pipe(switchMap(({ routes: childConfig }) => {\n                const childInjector = route._loadedInjector ?? injector;\n                const { parameters, consumedSegments, remainingSegments } = result;\n                const snapshot = new ActivatedRouteSnapshot(consumedSegments, parameters, Object.freeze({ ...this.urlTree.queryParams }), this.urlTree.fragment, getData(route), getOutlet(route), route.component ?? route._loadedComponent ?? null, route, getResolve(route));\n                const inherited = getInherited(snapshot, parentRoute, this.paramsInheritanceStrategy);\n                snapshot.params = Object.freeze(inherited.params);\n                snapshot.data = Object.freeze(inherited.data);\n                const { segmentGroup, slicedSegments } = split(rawSegment, consumedSegments, remainingSegments, childConfig);\n                if (slicedSegments.length === 0 && segmentGroup.hasChildren()) {\n                    return this.processChildren(childInjector, childConfig, segmentGroup, snapshot).pipe(map((children) => {\n                        return new TreeNode(snapshot, children);\n                    }));\n                }\n                if (childConfig.length === 0 && slicedSegments.length === 0) {\n                    return of(new TreeNode(snapshot, []));\n                }\n                const matchedOnOutlet = getOutlet(route) === outlet;\n                // If we matched a config due to empty path match on a different outlet, we need to\n                // continue passing the current outlet for the segment rather than switch to PRIMARY.\n                // Note that we switch to primary when we have a match because outlet configs look like\n                // this: {path: 'a', outlet: 'a', children: [\n                //  {path: 'b', component: B},\n                //  {path: 'c', component: C},\n                // ]}\n                // Notice that the children of the named outlet are configured with the primary outlet\n                return this.processSegment(childInjector, childConfig, segmentGroup, slicedSegments, matchedOnOutlet ? PRIMARY_OUTLET : outlet, true, snapshot).pipe(map((child) => {\n                    return new TreeNode(snapshot, child instanceof TreeNode ? [child] : []);\n                }));\n            }));\n        }));\n    }\n    getChildConfig(injector, route, segments) {\n        if (route.children) {\n            // The children belong to the same module\n            return of({ routes: route.children, injector });\n        }\n        if (route.loadChildren) {\n            // lazy children belong to the loaded module\n            if (route._loadedRoutes !== undefined) {\n                return of({ routes: route._loadedRoutes, injector: route._loadedInjector });\n            }\n            return runCanLoadGuards(injector, route, segments, this.urlSerializer).pipe(mergeMap((shouldLoadResult) => {\n                if (shouldLoadResult) {\n                    return this.configLoader.loadChildren(injector, route).pipe(tap((cfg) => {\n                        route._loadedRoutes = cfg.routes;\n                        route._loadedInjector = cfg.injector;\n                    }));\n                }\n                return canLoadFails(route);\n            }));\n        }\n        return of({ routes: [], injector });\n    }\n}\nfunction sortActivatedRouteSnapshots(nodes) {\n    nodes.sort((a, b) => {\n        if (a.value.outlet === PRIMARY_OUTLET)\n            return -1;\n        if (b.value.outlet === PRIMARY_OUTLET)\n            return 1;\n        return a.value.outlet.localeCompare(b.value.outlet);\n    });\n}\nfunction hasEmptyPathConfig(node) {\n    const config = node.value.routeConfig;\n    return config && config.path === '';\n}\n/**\n * Finds `TreeNode`s with matching empty path route configs and merges them into `TreeNode` with\n * the children from each duplicate. This is necessary because different outlets can match a\n * single empty path route config and the results need to then be merged.\n */\nfunction mergeEmptyPathMatches(nodes) {\n    const result = [];\n    // The set of nodes which contain children that were merged from two duplicate empty path nodes.\n    const mergedNodes = new Set();\n    for (const node of nodes) {\n        if (!hasEmptyPathConfig(node)) {\n            result.push(node);\n            continue;\n        }\n        const duplicateEmptyPathNode = result.find((resultNode) => node.value.routeConfig === resultNode.value.routeConfig);\n        if (duplicateEmptyPathNode !== undefined) {\n            duplicateEmptyPathNode.children.push(...node.children);\n            mergedNodes.add(duplicateEmptyPathNode);\n        }\n        else {\n            result.push(node);\n        }\n    }\n    // For each node which has children from multiple sources, we need to recompute a new `TreeNode`\n    // by also merging those children. This is necessary when there are multiple empty path configs\n    // in a row. Put another way: whenever we combine children of two nodes, we need to also check\n    // if any of those children can be combined into a single node as well.\n    for (const mergedNode of mergedNodes) {\n        const mergedChildren = mergeEmptyPathMatches(mergedNode.children);\n        result.push(new TreeNode(mergedNode.value, mergedChildren));\n    }\n    return result.filter((n) => !mergedNodes.has(n));\n}\nfunction checkOutletNameUniqueness(nodes) {\n    const names = {};\n    nodes.forEach((n) => {\n        const routeWithSameOutletName = names[n.value.outlet];\n        if (routeWithSameOutletName) {\n            const p = routeWithSameOutletName.url.map((s) => s.toString()).join('/');\n            const c = n.value.url.map((s) => s.toString()).join('/');\n            throw new _RuntimeError(4006 /* RuntimeErrorCode.TWO_SEGMENTS_WITH_SAME_OUTLET */, (typeof ngDevMode === 'undefined' || ngDevMode) &&\n                `Two segments cannot have the same outlet name: '${p}' and '${c}'.`);\n        }\n        names[n.value.outlet] = n.value;\n    });\n}\nfunction getData(route) {\n    return route.data || {};\n}\nfunction getResolve(route) {\n    return route.resolve || {};\n}\n\nfunction recognize(injector, configLoader, rootComponentType, config, serializer, paramsInheritanceStrategy) {\n    return mergeMap((t) => recognize$1(injector, configLoader, rootComponentType, config, t.extractedUrl, serializer, paramsInheritanceStrategy).pipe(map(({ state: targetSnapshot, tree: urlAfterRedirects }) => {\n        return { ...t, targetSnapshot, urlAfterRedirects };\n    })));\n}\n\nfunction resolveData(paramsInheritanceStrategy, injector) {\n    return mergeMap((t) => {\n        const { targetSnapshot, guards: { canActivateChecks }, } = t;\n        if (!canActivateChecks.length) {\n            return of(t);\n        }\n        // Iterating a Set in javascript  happens in insertion order so it is safe to use a `Set` to\n        // preserve the correct order that the resolvers should run in.\n        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set#description\n        const routesWithResolversToRun = new Set(canActivateChecks.map((check) => check.route));\n        const routesNeedingDataUpdates = new Set();\n        for (const route of routesWithResolversToRun) {\n            if (routesNeedingDataUpdates.has(route)) {\n                continue;\n            }\n            // All children under the route with a resolver to run need to recompute inherited data.\n            for (const newRoute of flattenRouteTree(route)) {\n                routesNeedingDataUpdates.add(newRoute);\n            }\n        }\n        let routesProcessed = 0;\n        return from(routesNeedingDataUpdates).pipe(concatMap((route) => {\n            if (routesWithResolversToRun.has(route)) {\n                return runResolve(route, targetSnapshot, paramsInheritanceStrategy, injector);\n            }\n            else {\n                route.data = getInherited(route, route.parent, paramsInheritanceStrategy).resolve;\n                return of(void 0);\n            }\n        }), tap(() => routesProcessed++), takeLast(1), mergeMap((_) => (routesProcessed === routesNeedingDataUpdates.size ? of(t) : EMPTY)));\n    });\n}\n/**\n *  Returns the `ActivatedRouteSnapshot` tree as an array, using DFS to traverse the route tree.\n */\nfunction flattenRouteTree(route) {\n    const descendants = route.children.map((child) => flattenRouteTree(child)).flat();\n    return [route, ...descendants];\n}\nfunction runResolve(futureARS, futureRSS, paramsInheritanceStrategy, injector) {\n    const config = futureARS.routeConfig;\n    const resolve = futureARS._resolve;\n    if (config?.title !== undefined && !hasStaticTitle(config)) {\n        resolve[RouteTitleKey] = config.title;\n    }\n    return resolveNode(resolve, futureARS, futureRSS, injector).pipe(map((resolvedData) => {\n        futureARS._resolvedData = resolvedData;\n        futureARS.data = getInherited(futureARS, futureARS.parent, paramsInheritanceStrategy).resolve;\n        return null;\n    }));\n}\nfunction resolveNode(resolve, futureARS, futureRSS, injector) {\n    const keys = getDataKeys(resolve);\n    if (keys.length === 0) {\n        return of({});\n    }\n    const data = {};\n    return from(keys).pipe(mergeMap((key) => getResolver(resolve[key], futureARS, futureRSS, injector).pipe(first(), tap((value) => {\n        if (value instanceof RedirectCommand) {\n            throw redirectingNavigationError(new DefaultUrlSerializer(), value);\n        }\n        data[key] = value;\n    }))), takeLast(1), map(() => data), catchError((e) => (isEmptyError(e) ? EMPTY : throwError(e))));\n}\nfunction getResolver(injectionToken, futureARS, futureRSS, injector) {\n    const closestInjector = getClosestRouteInjector(futureARS) ?? injector;\n    const resolver = getTokenOrFunctionIdentity(injectionToken, closestInjector);\n    const resolverValue = resolver.resolve\n        ? resolver.resolve(futureARS, futureRSS)\n        : runInInjectionContext(closestInjector, () => resolver(futureARS, futureRSS));\n    return wrapIntoObservable(resolverValue);\n}\n\n/**\n * Perform a side effect through a switchMap for every emission on the source Observable,\n * but return an Observable that is identical to the source. It's essentially the same as\n * the `tap` operator, but if the side effectful `next` function returns an ObservableInput,\n * it will wait before continuing with the original value.\n */\nfunction switchTap(next) {\n    return switchMap((v) => {\n        const nextResult = next(v);\n        if (nextResult) {\n            return from(nextResult).pipe(map(() => v));\n        }\n        return of(v);\n    });\n}\n\n/**\n * Provides a strategy for setting the page title after a router navigation.\n *\n * The built-in implementation traverses the router state snapshot and finds the deepest primary\n * outlet with `title` property. Given the `Routes` below, navigating to\n * `/base/child(popup:aux)` would result in the document title being set to \"child\".\n * ```ts\n * [\n *   {path: 'base', title: 'base', children: [\n *     {path: 'child', title: 'child'},\n *   ],\n *   {path: 'aux', outlet: 'popup', title: 'popupTitle'}\n * ]\n * ```\n *\n * This class can be used as a base class for custom title strategies. That is, you can create your\n * own class that extends the `TitleStrategy`. Note that in the above example, the `title`\n * from the named outlet is never used. However, a custom strategy might be implemented to\n * incorporate titles in named outlets.\n *\n * @publicApi\n * @see [Page title guide](guide/routing/common-router-tasks#setting-the-page-title)\n */\nclass TitleStrategy {\n    /**\n     * @returns The `title` of the deepest primary route.\n     */\n    buildTitle(snapshot) {\n        let pageTitle;\n        let route = snapshot.root;\n        while (route !== undefined) {\n            pageTitle = this.getResolvedTitleForRoute(route) ?? pageTitle;\n            route = route.children.find((child) => child.outlet === PRIMARY_OUTLET);\n        }\n        return pageTitle;\n    }\n    /**\n     * Given an `ActivatedRouteSnapshot`, returns the final value of the\n     * `Route.title` property, which can either be a static string or a resolved value.\n     */\n    getResolvedTitleForRoute(snapshot) {\n        return snapshot.data[RouteTitleKey];\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: TitleStrategy, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: TitleStrategy, providedIn: 'root', useFactory: () => inject(DefaultTitleStrategy) });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: TitleStrategy, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root', useFactory: () => inject(DefaultTitleStrategy) }]\n        }] });\n/**\n * The default `TitleStrategy` used by the router that updates the title using the `Title` service.\n */\nclass DefaultTitleStrategy extends TitleStrategy {\n    title;\n    constructor(title) {\n        super();\n        this.title = title;\n    }\n    /**\n     * Sets the title of the browser to the given value.\n     *\n     * @param title The `pageTitle` from the deepest primary route.\n     */\n    updateTitle(snapshot) {\n        const title = this.buildTitle(snapshot);\n        if (title !== undefined) {\n            this.title.setTitle(title);\n        }\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: DefaultTitleStrategy, deps: [{ token: i1.Title }], target: i0.ɵɵFactoryTarget.Injectable });\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: DefaultTitleStrategy, providedIn: 'root' });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: DefaultTitleStrategy, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: () => [{ type: i1.Title }] });\n\n/**\n * A DI token for the router service.\n *\n * @publicApi\n */\nconst ROUTER_CONFIGURATION = new InjectionToken(typeof ngDevMode === 'undefined' || ngDevMode ? 'router config' : '', {\n    providedIn: 'root',\n    factory: () => ({}),\n});\n\n/**\n * This component is used internally within the router to be a placeholder when an empty\n * router-outlet is needed. For example, with a config such as:\n *\n * `{path: 'parent', outlet: 'nav', children: [...]}`\n *\n * In order to render, there needs to be a component on this config, which will default\n * to this `EmptyOutletComponent`.\n */\nclass ɵEmptyOutletComponent {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: ɵEmptyOutletComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"19.2.6\", type: ɵEmptyOutletComponent, isStandalone: true, selector: \"ng-component\", exportAs: [\"emptyRouterOutlet\"], ngImport: i0, template: `<router-outlet/>`, isInline: true, dependencies: [{ kind: \"directive\", type: RouterOutlet, selector: \"router-outlet\", inputs: [\"name\", \"routerOutletData\"], outputs: [\"activate\", \"deactivate\", \"attach\", \"detach\"], exportAs: [\"outlet\"] }] });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: ɵEmptyOutletComponent, decorators: [{\n            type: Component,\n            args: [{\n                    template: `<router-outlet/>`,\n                    imports: [RouterOutlet],\n                    // Used to avoid component ID collisions with user code.\n                    exportAs: 'emptyRouterOutlet',\n                }]\n        }] });\n/**\n * Makes a copy of the config and adds any default required properties.\n */\nfunction standardizeConfig(r) {\n    const children = r.children && r.children.map(standardizeConfig);\n    const c = children ? { ...r, children } : { ...r };\n    if (!c.component &&\n        !c.loadComponent &&\n        (children || c.loadChildren) &&\n        c.outlet &&\n        c.outlet !== PRIMARY_OUTLET) {\n        c.component = ɵEmptyOutletComponent;\n    }\n    return c;\n}\n\n/**\n * The DI token for a router configuration.\n *\n * `ROUTES` is a low level API for router configuration via dependency injection.\n *\n * We recommend that in almost all cases to use higher level APIs such as `RouterModule.forRoot()`,\n * `provideRouter`, or `Router.resetConfig()`.\n *\n * @publicApi\n */\nconst ROUTES = new InjectionToken(ngDevMode ? 'ROUTES' : '');\nclass RouterConfigLoader {\n    componentLoaders = new WeakMap();\n    childrenLoaders = new WeakMap();\n    onLoadStartListener;\n    onLoadEndListener;\n    compiler = inject(Compiler);\n    loadComponent(route) {\n        if (this.componentLoaders.get(route)) {\n            return this.componentLoaders.get(route);\n        }\n        else if (route._loadedComponent) {\n            return of(route._loadedComponent);\n        }\n        if (this.onLoadStartListener) {\n            this.onLoadStartListener(route);\n        }\n        const loadRunner = wrapIntoObservable(route.loadComponent()).pipe(map(maybeUnwrapDefaultExport), tap((component) => {\n            if (this.onLoadEndListener) {\n                this.onLoadEndListener(route);\n            }\n            (typeof ngDevMode === 'undefined' || ngDevMode) &&\n                assertStandalone(route.path ?? '', component);\n            route._loadedComponent = component;\n        }), finalize(() => {\n            this.componentLoaders.delete(route);\n        }));\n        // Use custom ConnectableObservable as share in runners pipe increasing the bundle size too much\n        const loader = new ConnectableObservable(loadRunner, () => new Subject()).pipe(refCount());\n        this.componentLoaders.set(route, loader);\n        return loader;\n    }\n    loadChildren(parentInjector, route) {\n        if (this.childrenLoaders.get(route)) {\n            return this.childrenLoaders.get(route);\n        }\n        else if (route._loadedRoutes) {\n            return of({ routes: route._loadedRoutes, injector: route._loadedInjector });\n        }\n        if (this.onLoadStartListener) {\n            this.onLoadStartListener(route);\n        }\n        const moduleFactoryOrRoutes$ = loadChildren(route, this.compiler, parentInjector, this.onLoadEndListener);\n        const loadRunner = moduleFactoryOrRoutes$.pipe(finalize(() => {\n            this.childrenLoaders.delete(route);\n        }));\n        // Use custom ConnectableObservable as share in runners pipe increasing the bundle size too much\n        const loader = new ConnectableObservable(loadRunner, () => new Subject()).pipe(refCount());\n        this.childrenLoaders.set(route, loader);\n        return loader;\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: RouterConfigLoader, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: RouterConfigLoader, providedIn: 'root' });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: RouterConfigLoader, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }] });\n/**\n * Executes a `route.loadChildren` callback and converts the result to an array of child routes and\n * an injector if that callback returned a module.\n *\n * This function is used for the route discovery during prerendering\n * in @angular-devkit/build-angular. If there are any updates to the contract here, it will require\n * an update to the extractor.\n */\nfunction loadChildren(route, compiler, parentInjector, onLoadEndListener) {\n    return wrapIntoObservable(route.loadChildren()).pipe(map(maybeUnwrapDefaultExport), mergeMap((t) => {\n        if (t instanceof NgModuleFactory || Array.isArray(t)) {\n            return of(t);\n        }\n        else {\n            return from(compiler.compileModuleAsync(t));\n        }\n    }), map((factoryOrRoutes) => {\n        if (onLoadEndListener) {\n            onLoadEndListener(route);\n        }\n        // This injector comes from the `NgModuleRef` when lazy loading an `NgModule`. There is\n        // no injector associated with lazy loading a `Route` array.\n        let injector;\n        let rawRoutes;\n        let requireStandaloneComponents = false;\n        if (Array.isArray(factoryOrRoutes)) {\n            rawRoutes = factoryOrRoutes;\n            requireStandaloneComponents = true;\n        }\n        else {\n            injector = factoryOrRoutes.create(parentInjector).injector;\n            // When loading a module that doesn't provide `RouterModule.forChild()` preloader\n            // will get stuck in an infinite loop. The child module's Injector will look to\n            // its parent `Injector` when it doesn't find any ROUTES so it will return routes\n            // for it's parent module instead.\n            rawRoutes = injector.get(ROUTES, [], { optional: true, self: true }).flat();\n        }\n        const routes = rawRoutes.map(standardizeConfig);\n        (typeof ngDevMode === 'undefined' || ngDevMode) &&\n            validateConfig(routes, route.path, requireStandaloneComponents);\n        return { routes, injector };\n    }));\n}\nfunction isWrappedDefaultExport(value) {\n    // We use `in` here with a string key `'default'`, because we expect `DefaultExport` objects to be\n    // dynamically imported ES modules with a spec-mandated `default` key. Thus we don't expect that\n    // `default` will be a renamed property.\n    return value && typeof value === 'object' && 'default' in value;\n}\nfunction maybeUnwrapDefaultExport(input) {\n    // As per `isWrappedDefaultExport`, the `default` key here is generated by the browser and not\n    // subject to property renaming, so we reference it with bracket access.\n    return isWrappedDefaultExport(input) ? input['default'] : input;\n}\n\n/**\n * @description\n *\n * Provides a way to migrate AngularJS applications to Angular.\n *\n * @publicApi\n */\nclass UrlHandlingStrategy {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: UrlHandlingStrategy, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: UrlHandlingStrategy, providedIn: 'root', useFactory: () => inject(DefaultUrlHandlingStrategy) });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: UrlHandlingStrategy, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root', useFactory: () => inject(DefaultUrlHandlingStrategy) }]\n        }] });\n/**\n * @publicApi\n */\nclass DefaultUrlHandlingStrategy {\n    shouldProcessUrl(url) {\n        return true;\n    }\n    extract(url) {\n        return url;\n    }\n    merge(newUrlPart, wholeUrl) {\n        return newUrlPart;\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: DefaultUrlHandlingStrategy, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: DefaultUrlHandlingStrategy, providedIn: 'root' });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: DefaultUrlHandlingStrategy, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }] });\n\n/// <reference types=\"dom-view-transitions\" />\nconst CREATE_VIEW_TRANSITION = new InjectionToken(ngDevMode ? 'view transition helper' : '');\nconst VIEW_TRANSITION_OPTIONS = new InjectionToken(ngDevMode ? 'view transition options' : '');\n/**\n * A helper function for using browser view transitions. This function skips the call to\n * `startViewTransition` if the browser does not support it.\n *\n * @returns A Promise that resolves when the view transition callback begins.\n */\nfunction createViewTransition(injector, from, to) {\n    const transitionOptions = injector.get(VIEW_TRANSITION_OPTIONS);\n    const document = injector.get(DOCUMENT);\n    // Create promises outside the Angular zone to avoid causing extra change detections\n    return injector.get(NgZone).runOutsideAngular(() => {\n        if (!document.startViewTransition || transitionOptions.skipNextTransition) {\n            transitionOptions.skipNextTransition = false;\n            // The timing of `startViewTransition` is closer to a macrotask. It won't be called\n            // until the current event loop exits so we use a promise resolved in a timeout instead\n            // of Promise.resolve().\n            return new Promise((resolve) => setTimeout(resolve));\n        }\n        let resolveViewTransitionStarted;\n        const viewTransitionStarted = new Promise((resolve) => {\n            resolveViewTransitionStarted = resolve;\n        });\n        const transition = document.startViewTransition(() => {\n            resolveViewTransitionStarted();\n            // We don't actually update dom within the transition callback. The resolving of the above\n            // promise unblocks the Router navigation, which synchronously activates and deactivates\n            // routes (the DOM update). This view transition waits for the next change detection to\n            // complete (below), which includes the update phase of the routed components.\n            return createRenderPromise(injector);\n            // TODO(atscott): Types in DefinitelyTyped are not up-to-date\n        });\n        const { onViewTransitionCreated } = transitionOptions;\n        if (onViewTransitionCreated) {\n            runInInjectionContext(injector, () => onViewTransitionCreated({ transition, from, to }));\n        }\n        return viewTransitionStarted;\n    });\n}\n/**\n * Creates a promise that resolves after next render.\n */\nfunction createRenderPromise(injector) {\n    return new Promise((resolve) => {\n        // Wait for the microtask queue to empty after the next render happens (by waiting a macrotask).\n        // This ensures any follow-up renders in the microtask queue are completed before the\n        // view transition starts animating.\n        afterNextRender({ read: () => setTimeout(resolve) }, { injector });\n    });\n}\n\nconst NAVIGATION_ERROR_HANDLER = new InjectionToken(typeof ngDevMode === 'undefined' || ngDevMode ? 'navigation error handler' : '');\nclass NavigationTransitions {\n    currentNavigation = null;\n    currentTransition = null;\n    lastSuccessfulNavigation = null;\n    /**\n     * These events are used to communicate back to the Router about the state of the transition. The\n     * Router wants to respond to these events in various ways. Because the `NavigationTransition`\n     * class is not public, this event subject is not publicly exposed.\n     */\n    events = new Subject();\n    /**\n     * Used to abort the current transition with an error.\n     */\n    transitionAbortSubject = new Subject();\n    configLoader = inject(RouterConfigLoader);\n    environmentInjector = inject(EnvironmentInjector);\n    destroyRef = inject(DestroyRef);\n    urlSerializer = inject(UrlSerializer);\n    rootContexts = inject(ChildrenOutletContexts);\n    location = inject(Location);\n    inputBindingEnabled = inject(INPUT_BINDER, { optional: true }) !== null;\n    titleStrategy = inject(TitleStrategy);\n    options = inject(ROUTER_CONFIGURATION, { optional: true }) || {};\n    paramsInheritanceStrategy = this.options.paramsInheritanceStrategy || 'emptyOnly';\n    urlHandlingStrategy = inject(UrlHandlingStrategy);\n    createViewTransition = inject(CREATE_VIEW_TRANSITION, { optional: true });\n    navigationErrorHandler = inject(NAVIGATION_ERROR_HANDLER, { optional: true });\n    navigationId = 0;\n    get hasRequestedNavigation() {\n        return this.navigationId !== 0;\n    }\n    transitions;\n    /**\n     * Hook that enables you to pause navigation after the preactivation phase.\n     * Used by `RouterModule`.\n     *\n     * @internal\n     */\n    afterPreactivation = () => of(void 0);\n    /** @internal */\n    rootComponentType = null;\n    destroyed = false;\n    constructor() {\n        const onLoadStart = (r) => this.events.next(new RouteConfigLoadStart(r));\n        const onLoadEnd = (r) => this.events.next(new RouteConfigLoadEnd(r));\n        this.configLoader.onLoadEndListener = onLoadEnd;\n        this.configLoader.onLoadStartListener = onLoadStart;\n        this.destroyRef.onDestroy(() => {\n            this.destroyed = true;\n        });\n    }\n    complete() {\n        this.transitions?.complete();\n    }\n    handleNavigationRequest(request) {\n        const id = ++this.navigationId;\n        this.transitions?.next({\n            ...request,\n            extractedUrl: this.urlHandlingStrategy.extract(request.rawUrl),\n            targetSnapshot: null,\n            targetRouterState: null,\n            guards: { canActivateChecks: [], canDeactivateChecks: [] },\n            guardsResult: null,\n            id,\n        });\n    }\n    setupNavigations(router) {\n        this.transitions = new BehaviorSubject(null);\n        return this.transitions.pipe(filter((t) => t !== null), \n        // Using switchMap so we cancel executing navigations when a new one comes in\n        switchMap((overallTransitionState) => {\n            let completed = false;\n            let errored = false;\n            return of(overallTransitionState).pipe(switchMap((t) => {\n                // It is possible that `switchMap` fails to cancel previous navigations if a new one happens synchronously while the operator\n                // is processing the `next` notification of that previous navigation. This can happen when a new navigation (say 2) cancels a\n                // previous one (1) and yet another navigation (3) happens synchronously in response to the `NavigationCancel` event for (1).\n                // https://github.com/ReactiveX/rxjs/issues/7455\n                if (this.navigationId > overallTransitionState.id) {\n                    const cancellationReason = typeof ngDevMode === 'undefined' || ngDevMode\n                        ? `Navigation ID ${overallTransitionState.id} is not equal to the current navigation id ${this.navigationId}`\n                        : '';\n                    this.cancelNavigationTransition(overallTransitionState, cancellationReason, NavigationCancellationCode.SupersededByNewNavigation);\n                    return EMPTY;\n                }\n                this.currentTransition = overallTransitionState;\n                // Store the Navigation object\n                this.currentNavigation = {\n                    id: t.id,\n                    initialUrl: t.rawUrl,\n                    extractedUrl: t.extractedUrl,\n                    targetBrowserUrl: typeof t.extras.browserUrl === 'string'\n                        ? this.urlSerializer.parse(t.extras.browserUrl)\n                        : t.extras.browserUrl,\n                    trigger: t.source,\n                    extras: t.extras,\n                    previousNavigation: !this.lastSuccessfulNavigation\n                        ? null\n                        : {\n                            ...this.lastSuccessfulNavigation,\n                            previousNavigation: null,\n                        },\n                };\n                const urlTransition = !router.navigated || this.isUpdatingInternalState() || this.isUpdatedBrowserUrl();\n                const onSameUrlNavigation = t.extras.onSameUrlNavigation ?? router.onSameUrlNavigation;\n                if (!urlTransition && onSameUrlNavigation !== 'reload') {\n                    const reason = typeof ngDevMode === 'undefined' || ngDevMode\n                        ? `Navigation to ${t.rawUrl} was ignored because it is the same as the current Router URL.`\n                        : '';\n                    this.events.next(new NavigationSkipped(t.id, this.urlSerializer.serialize(t.rawUrl), reason, NavigationSkippedCode.IgnoredSameUrlNavigation));\n                    t.resolve(false);\n                    return EMPTY;\n                }\n                if (this.urlHandlingStrategy.shouldProcessUrl(t.rawUrl)) {\n                    return of(t).pipe(\n                    // Fire NavigationStart event\n                    switchMap((t) => {\n                        this.events.next(new NavigationStart(t.id, this.urlSerializer.serialize(t.extractedUrl), t.source, t.restoredState));\n                        if (t.id !== this.navigationId) {\n                            return EMPTY;\n                        }\n                        // This delay is required to match old behavior that forced\n                        // navigation to always be async\n                        return Promise.resolve(t);\n                    }), \n                    // Recognize\n                    recognize(this.environmentInjector, this.configLoader, this.rootComponentType, router.config, this.urlSerializer, this.paramsInheritanceStrategy), \n                    // Update URL if in `eager` update mode\n                    tap((t) => {\n                        overallTransitionState.targetSnapshot = t.targetSnapshot;\n                        overallTransitionState.urlAfterRedirects = t.urlAfterRedirects;\n                        this.currentNavigation = {\n                            ...this.currentNavigation,\n                            finalUrl: t.urlAfterRedirects,\n                        };\n                        // Fire RoutesRecognized\n                        const routesRecognized = new RoutesRecognized(t.id, this.urlSerializer.serialize(t.extractedUrl), this.urlSerializer.serialize(t.urlAfterRedirects), t.targetSnapshot);\n                        this.events.next(routesRecognized);\n                    }));\n                }\n                else if (urlTransition &&\n                    this.urlHandlingStrategy.shouldProcessUrl(t.currentRawUrl)) {\n                    /* When the current URL shouldn't be processed, but the previous one\n                     * was, we handle this \"error condition\" by navigating to the\n                     * previously successful URL, but leaving the URL intact.*/\n                    const { id, extractedUrl, source, restoredState, extras } = t;\n                    const navStart = new NavigationStart(id, this.urlSerializer.serialize(extractedUrl), source, restoredState);\n                    this.events.next(navStart);\n                    const targetSnapshot = createEmptyState(this.rootComponentType).snapshot;\n                    this.currentTransition = overallTransitionState = {\n                        ...t,\n                        targetSnapshot,\n                        urlAfterRedirects: extractedUrl,\n                        extras: { ...extras, skipLocationChange: false, replaceUrl: false },\n                    };\n                    this.currentNavigation.finalUrl = extractedUrl;\n                    return of(overallTransitionState);\n                }\n                else {\n                    /* When neither the current or previous URL can be processed, do\n                     * nothing other than update router's internal reference to the\n                     * current \"settled\" URL. This way the next navigation will be coming\n                     * from the current URL in the browser.\n                     */\n                    const reason = typeof ngDevMode === 'undefined' || ngDevMode\n                        ? `Navigation was ignored because the UrlHandlingStrategy` +\n                            ` indicated neither the current URL ${t.currentRawUrl} nor target URL ${t.rawUrl} should be processed.`\n                        : '';\n                    this.events.next(new NavigationSkipped(t.id, this.urlSerializer.serialize(t.extractedUrl), reason, NavigationSkippedCode.IgnoredByUrlHandlingStrategy));\n                    t.resolve(false);\n                    return EMPTY;\n                }\n            }), \n            // --- GUARDS ---\n            tap((t) => {\n                const guardsStart = new GuardsCheckStart(t.id, this.urlSerializer.serialize(t.extractedUrl), this.urlSerializer.serialize(t.urlAfterRedirects), t.targetSnapshot);\n                this.events.next(guardsStart);\n            }), map((t) => {\n                this.currentTransition = overallTransitionState = {\n                    ...t,\n                    guards: getAllRouteGuards(t.targetSnapshot, t.currentSnapshot, this.rootContexts),\n                };\n                return overallTransitionState;\n            }), checkGuards(this.environmentInjector, (evt) => this.events.next(evt)), tap((t) => {\n                overallTransitionState.guardsResult = t.guardsResult;\n                if (t.guardsResult && typeof t.guardsResult !== 'boolean') {\n                    throw redirectingNavigationError(this.urlSerializer, t.guardsResult);\n                }\n                const guardsEnd = new GuardsCheckEnd(t.id, this.urlSerializer.serialize(t.extractedUrl), this.urlSerializer.serialize(t.urlAfterRedirects), t.targetSnapshot, !!t.guardsResult);\n                this.events.next(guardsEnd);\n            }), filter((t) => {\n                if (!t.guardsResult) {\n                    this.cancelNavigationTransition(t, '', NavigationCancellationCode.GuardRejected);\n                    return false;\n                }\n                return true;\n            }), \n            // --- RESOLVE ---\n            switchTap((t) => {\n                if (t.guards.canActivateChecks.length === 0) {\n                    return undefined;\n                }\n                return of(t).pipe(tap((t) => {\n                    const resolveStart = new ResolveStart(t.id, this.urlSerializer.serialize(t.extractedUrl), this.urlSerializer.serialize(t.urlAfterRedirects), t.targetSnapshot);\n                    this.events.next(resolveStart);\n                }), switchMap((t) => {\n                    let dataResolved = false;\n                    return of(t).pipe(resolveData(this.paramsInheritanceStrategy, this.environmentInjector), tap({\n                        next: () => (dataResolved = true),\n                        complete: () => {\n                            if (!dataResolved) {\n                                this.cancelNavigationTransition(t, typeof ngDevMode === 'undefined' || ngDevMode\n                                    ? `At least one route resolver didn't emit any value.`\n                                    : '', NavigationCancellationCode.NoDataFromResolver);\n                            }\n                        },\n                    }));\n                }), tap((t) => {\n                    const resolveEnd = new ResolveEnd(t.id, this.urlSerializer.serialize(t.extractedUrl), this.urlSerializer.serialize(t.urlAfterRedirects), t.targetSnapshot);\n                    this.events.next(resolveEnd);\n                }));\n            }), \n            // --- LOAD COMPONENTS ---\n            switchTap((t) => {\n                const loadComponents = (route) => {\n                    const loaders = [];\n                    if (route.routeConfig?.loadComponent && !route.routeConfig._loadedComponent) {\n                        loaders.push(this.configLoader.loadComponent(route.routeConfig).pipe(tap((loadedComponent) => {\n                            route.component = loadedComponent;\n                        }), map(() => void 0)));\n                    }\n                    for (const child of route.children) {\n                        loaders.push(...loadComponents(child));\n                    }\n                    return loaders;\n                };\n                return combineLatest(loadComponents(t.targetSnapshot.root)).pipe(defaultIfEmpty(null), take(1));\n            }), switchTap(() => this.afterPreactivation()), switchMap(() => {\n                const { currentSnapshot, targetSnapshot } = overallTransitionState;\n                const viewTransitionStarted = this.createViewTransition?.(this.environmentInjector, currentSnapshot.root, targetSnapshot.root);\n                // If view transitions are enabled, block the navigation until the view\n                // transition callback starts. Otherwise, continue immediately.\n                return viewTransitionStarted\n                    ? from(viewTransitionStarted).pipe(map(() => overallTransitionState))\n                    : of(overallTransitionState);\n            }), map((t) => {\n                const targetRouterState = createRouterState(router.routeReuseStrategy, t.targetSnapshot, t.currentRouterState);\n                this.currentTransition = overallTransitionState = { ...t, targetRouterState };\n                this.currentNavigation.targetRouterState = targetRouterState;\n                return overallTransitionState;\n            }), tap(() => {\n                this.events.next(new BeforeActivateRoutes());\n            }), activateRoutes(this.rootContexts, router.routeReuseStrategy, (evt) => this.events.next(evt), this.inputBindingEnabled), \n            // Ensure that if some observable used to drive the transition doesn't\n            // complete, the navigation still finalizes This should never happen, but\n            // this is done as a safety measure to avoid surfacing this error (#49567).\n            take(1), tap({\n                next: (t) => {\n                    completed = true;\n                    this.lastSuccessfulNavigation = this.currentNavigation;\n                    this.events.next(new NavigationEnd(t.id, this.urlSerializer.serialize(t.extractedUrl), this.urlSerializer.serialize(t.urlAfterRedirects)));\n                    this.titleStrategy?.updateTitle(t.targetRouterState.snapshot);\n                    t.resolve(true);\n                },\n                complete: () => {\n                    completed = true;\n                },\n            }), \n            // There used to be a lot more logic happening directly within the\n            // transition Observable. Some of this logic has been refactored out to\n            // other places but there may still be errors that happen there. This gives\n            // us a way to cancel the transition from the outside. This may also be\n            // required in the future to support something like the abort signal of the\n            // Navigation API where the navigation gets aborted from outside the\n            // transition.\n            takeUntil(this.transitionAbortSubject.pipe(tap((err) => {\n                throw err;\n            }))), finalize(() => {\n                /* When the navigation stream finishes either through error or success,\n                 * we set the `completed` or `errored` flag. However, there are some\n                 * situations where we could get here without either of those being set.\n                 * For instance, a redirect during NavigationStart. Therefore, this is a\n                 * catch-all to make sure the NavigationCancel event is fired when a\n                 * navigation gets cancelled but not caught by other means. */\n                if (!completed && !errored) {\n                    const cancelationReason = typeof ngDevMode === 'undefined' || ngDevMode\n                        ? `Navigation ID ${overallTransitionState.id} is not equal to the current navigation id ${this.navigationId}`\n                        : '';\n                    this.cancelNavigationTransition(overallTransitionState, cancelationReason, NavigationCancellationCode.SupersededByNewNavigation);\n                }\n                // Only clear current navigation if it is still set to the one that\n                // finalized.\n                if (this.currentTransition?.id === overallTransitionState.id) {\n                    this.currentNavigation = null;\n                    this.currentTransition = null;\n                }\n            }), catchError((e) => {\n                // If the application is already destroyed, the catch block should not\n                // execute anything in practice because other resources have already\n                // been released and destroyed.\n                if (this.destroyed) {\n                    overallTransitionState.resolve(false);\n                    return EMPTY;\n                }\n                errored = true;\n                /* This error type is issued during Redirect, and is handled as a\n                 * cancellation rather than an error. */\n                if (isNavigationCancelingError(e)) {\n                    this.events.next(new NavigationCancel(overallTransitionState.id, this.urlSerializer.serialize(overallTransitionState.extractedUrl), e.message, e.cancellationCode));\n                    // When redirecting, we need to delay resolving the navigation\n                    // promise and push it to the redirect navigation\n                    if (!isRedirectingNavigationCancelingError(e)) {\n                        overallTransitionState.resolve(false);\n                    }\n                    else {\n                        this.events.next(new RedirectRequest(e.url, e.navigationBehaviorOptions));\n                    }\n                    /* All other errors should reset to the router's internal URL reference\n                     * to the pre-error state. */\n                }\n                else {\n                    const navigationError = new NavigationError(overallTransitionState.id, this.urlSerializer.serialize(overallTransitionState.extractedUrl), e, overallTransitionState.targetSnapshot ?? undefined);\n                    try {\n                        const navigationErrorHandlerResult = runInInjectionContext(this.environmentInjector, () => this.navigationErrorHandler?.(navigationError));\n                        if (navigationErrorHandlerResult instanceof RedirectCommand) {\n                            const { message, cancellationCode } = redirectingNavigationError(this.urlSerializer, navigationErrorHandlerResult);\n                            this.events.next(new NavigationCancel(overallTransitionState.id, this.urlSerializer.serialize(overallTransitionState.extractedUrl), message, cancellationCode));\n                            this.events.next(new RedirectRequest(navigationErrorHandlerResult.redirectTo, navigationErrorHandlerResult.navigationBehaviorOptions));\n                        }\n                        else {\n                            this.events.next(navigationError);\n                            throw e;\n                        }\n                    }\n                    catch (ee) {\n                        // TODO(atscott): consider flipping the default behavior of\n                        // resolveNavigationPromiseOnError to be `resolve(false)` when\n                        // undefined. This is the most sane thing to do given that\n                        // applications very rarely handle the promise rejection and, as a\n                        // result, would get \"unhandled promise rejection\" console logs.\n                        // The vast majority of applications would not be affected by this\n                        // change so omitting a migration seems reasonable. Instead,\n                        // applications that rely on rejection can specifically opt-in to the\n                        // old behavior.\n                        if (this.options.resolveNavigationPromiseOnError) {\n                            overallTransitionState.resolve(false);\n                        }\n                        else {\n                            overallTransitionState.reject(ee);\n                        }\n                    }\n                }\n                return EMPTY;\n            }));\n            // casting because `pipe` returns observable({}) when called with 8+ arguments\n        }));\n    }\n    cancelNavigationTransition(t, reason, code) {\n        const navCancel = new NavigationCancel(t.id, this.urlSerializer.serialize(t.extractedUrl), reason, code);\n        this.events.next(navCancel);\n        t.resolve(false);\n    }\n    /**\n     * @returns Whether we're navigating to somewhere that is not what the Router is\n     * currently set to.\n     */\n    isUpdatingInternalState() {\n        // TODO(atscott): The serializer should likely be used instead of\n        // `UrlTree.toString()`. Custom serializers are often written to handle\n        // things better than the default one (objects, for example will be\n        // [Object object] with the custom serializer and be \"the same\" when they\n        // aren't).\n        // (Same for isUpdatedBrowserUrl)\n        return (this.currentTransition?.extractedUrl.toString() !==\n            this.currentTransition?.currentUrlTree.toString());\n    }\n    /**\n     * @returns Whether we're updating the browser URL to something new (navigation is going\n     * to somewhere not displayed in the URL bar and we will update the URL\n     * bar if navigation succeeds).\n     */\n    isUpdatedBrowserUrl() {\n        // The extracted URL is the part of the URL that this application cares about. `extract` may\n        // return only part of the browser URL and that part may have not changed even if some other\n        // portion of the URL did.\n        const currentBrowserUrl = this.urlHandlingStrategy.extract(this.urlSerializer.parse(this.location.path(true)));\n        const targetBrowserUrl = this.currentNavigation?.targetBrowserUrl ?? this.currentNavigation?.extractedUrl;\n        return (currentBrowserUrl.toString() !== targetBrowserUrl?.toString() &&\n            !this.currentNavigation?.extras.skipLocationChange);\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: NavigationTransitions, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: NavigationTransitions, providedIn: 'root' });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: NavigationTransitions, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: () => [] });\nfunction isBrowserTriggeredNavigation(source) {\n    return source !== IMPERATIVE_NAVIGATION;\n}\n\n/**\n * @description\n *\n * Provides a way to customize when activated routes get reused.\n *\n * @publicApi\n */\nclass RouteReuseStrategy {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: RouteReuseStrategy, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: RouteReuseStrategy, providedIn: 'root', useFactory: () => inject(DefaultRouteReuseStrategy) });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: RouteReuseStrategy, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root', useFactory: () => inject(DefaultRouteReuseStrategy) }]\n        }] });\n/**\n * @description\n *\n * This base route reuse strategy only reuses routes when the matched router configs are\n * identical. This prevents components from being destroyed and recreated\n * when just the route parameters, query parameters or fragment change\n * (that is, the existing component is _reused_).\n *\n * This strategy does not store any routes for later reuse.\n *\n * Angular uses this strategy by default.\n *\n *\n * It can be used as a base class for custom route reuse strategies, i.e. you can create your own\n * class that extends the `BaseRouteReuseStrategy` one.\n * @publicApi\n */\nclass BaseRouteReuseStrategy {\n    /**\n     * Whether the given route should detach for later reuse.\n     * Always returns false for `BaseRouteReuseStrategy`.\n     * */\n    shouldDetach(route) {\n        return false;\n    }\n    /**\n     * A no-op; the route is never stored since this strategy never detaches routes for later re-use.\n     */\n    store(route, detachedTree) { }\n    /** Returns `false`, meaning the route (and its subtree) is never reattached */\n    shouldAttach(route) {\n        return false;\n    }\n    /** Returns `null` because this strategy does not store routes for later re-use. */\n    retrieve(route) {\n        return null;\n    }\n    /**\n     * Determines if a route should be reused.\n     * This strategy returns `true` when the future route config and current route config are\n     * identical.\n     */\n    shouldReuseRoute(future, curr) {\n        return future.routeConfig === curr.routeConfig;\n    }\n}\nclass DefaultRouteReuseStrategy extends BaseRouteReuseStrategy {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: DefaultRouteReuseStrategy, deps: null, target: i0.ɵɵFactoryTarget.Injectable });\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: DefaultRouteReuseStrategy, providedIn: 'root' });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: DefaultRouteReuseStrategy, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }] });\n\nclass StateManager {\n    urlSerializer = inject(UrlSerializer);\n    options = inject(ROUTER_CONFIGURATION, { optional: true }) || {};\n    canceledNavigationResolution = this.options.canceledNavigationResolution || 'replace';\n    location = inject(Location);\n    urlHandlingStrategy = inject(UrlHandlingStrategy);\n    urlUpdateStrategy = this.options.urlUpdateStrategy || 'deferred';\n    currentUrlTree = new UrlTree();\n    /**\n     * Returns the currently activated `UrlTree`.\n     *\n     * This `UrlTree` shows only URLs that the `Router` is configured to handle (through\n     * `UrlHandlingStrategy`).\n     *\n     * The value is set after finding the route config tree to activate but before activating the\n     * route.\n     */\n    getCurrentUrlTree() {\n        return this.currentUrlTree;\n    }\n    rawUrlTree = this.currentUrlTree;\n    /**\n     * Returns a `UrlTree` that is represents what the browser is actually showing.\n     *\n     * In the life of a navigation transition:\n     * 1. When a navigation begins, the raw `UrlTree` is updated to the full URL that's being\n     * navigated to.\n     * 2. During a navigation, redirects are applied, which might only apply to _part_ of the URL (due\n     * to `UrlHandlingStrategy`).\n     * 3. Just before activation, the raw `UrlTree` is updated to include the redirects on top of the\n     * original raw URL.\n     *\n     * Note that this is _only_ here to support `UrlHandlingStrategy.extract` and\n     * `UrlHandlingStrategy.shouldProcessUrl`. Without those APIs, the current `UrlTree` would not\n     * deviated from the raw `UrlTree`.\n     *\n     * For `extract`, a raw `UrlTree` is needed because `extract` may only return part\n     * of the navigation URL. Thus, the current `UrlTree` may only represent _part_ of the browser\n     * URL. When a navigation gets cancelled and the router needs to reset the URL or a new navigation\n     * occurs, it needs to know the _whole_ browser URL, not just the part handled by\n     * `UrlHandlingStrategy`.\n     * For `shouldProcessUrl`, when the return is `false`, the router ignores the navigation but\n     * still updates the raw `UrlTree` with the assumption that the navigation was caused by the\n     * location change listener due to a URL update by the AngularJS router. In this case, the router\n     * still need to know what the browser's URL is for future navigations.\n     */\n    getRawUrlTree() {\n        return this.rawUrlTree;\n    }\n    createBrowserPath({ finalUrl, initialUrl, targetBrowserUrl }) {\n        const rawUrl = finalUrl !== undefined ? this.urlHandlingStrategy.merge(finalUrl, initialUrl) : initialUrl;\n        const url = targetBrowserUrl ?? rawUrl;\n        const path = url instanceof UrlTree ? this.urlSerializer.serialize(url) : url;\n        return path;\n    }\n    commitTransition({ targetRouterState, finalUrl, initialUrl }) {\n        // If we are committing the transition after having a final URL and target state, we're updating\n        // all pieces of the state. Otherwise, we likely skipped the transition (due to URL handling strategy)\n        // and only want to update the rawUrlTree, which represents the browser URL (and doesn't necessarily match router state).\n        if (finalUrl && targetRouterState) {\n            this.currentUrlTree = finalUrl;\n            this.rawUrlTree = this.urlHandlingStrategy.merge(finalUrl, initialUrl);\n            this.routerState = targetRouterState;\n        }\n        else {\n            this.rawUrlTree = initialUrl;\n        }\n    }\n    routerState = createEmptyState(null);\n    /** Returns the current RouterState. */\n    getRouterState() {\n        return this.routerState;\n    }\n    stateMemento = this.createStateMemento();\n    updateStateMemento() {\n        this.stateMemento = this.createStateMemento();\n    }\n    createStateMemento() {\n        return {\n            rawUrlTree: this.rawUrlTree,\n            currentUrlTree: this.currentUrlTree,\n            routerState: this.routerState,\n        };\n    }\n    resetInternalState({ finalUrl }) {\n        this.routerState = this.stateMemento.routerState;\n        this.currentUrlTree = this.stateMemento.currentUrlTree;\n        // Note here that we use the urlHandlingStrategy to get the reset `rawUrlTree` because it may be\n        // configured to handle only part of the navigation URL. This means we would only want to reset\n        // the part of the navigation handled by the Angular router rather than the whole URL. In\n        // addition, the URLHandlingStrategy may be configured to specifically preserve parts of the URL\n        // when merging, such as the query params so they are not lost on a refresh.\n        this.rawUrlTree = this.urlHandlingStrategy.merge(this.currentUrlTree, finalUrl ?? this.rawUrlTree);\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: StateManager, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: StateManager, providedIn: 'root', useFactory: () => inject(HistoryStateManager) });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: StateManager, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root', useFactory: () => inject(HistoryStateManager) }]\n        }] });\nclass HistoryStateManager extends StateManager {\n    /**\n     * The id of the currently active page in the router.\n     * Updated to the transition's target id on a successful navigation.\n     *\n     * This is used to track what page the router last activated. When an attempted navigation fails,\n     * the router can then use this to compute how to restore the state back to the previously active\n     * page.\n     */\n    currentPageId = 0;\n    lastSuccessfulId = -1;\n    restoredState() {\n        return this.location.getState();\n    }\n    /**\n     * The ɵrouterPageId of whatever page is currently active in the browser history. This is\n     * important for computing the target page id for new navigations because we need to ensure each\n     * page id in the browser history is 1 more than the previous entry.\n     */\n    get browserPageId() {\n        if (this.canceledNavigationResolution !== 'computed') {\n            return this.currentPageId;\n        }\n        return this.restoredState()?.ɵrouterPageId ?? this.currentPageId;\n    }\n    registerNonRouterCurrentEntryChangeListener(listener) {\n        return this.location.subscribe((event) => {\n            if (event['type'] === 'popstate') {\n                // The `setTimeout` was added in #12160 and is likely to support Angular/AngularJS\n                // hybrid apps.\n                setTimeout(() => {\n                    listener(event['url'], event.state, 'popstate');\n                });\n            }\n        });\n    }\n    handleRouterEvent(e, currentTransition) {\n        if (e instanceof NavigationStart) {\n            this.updateStateMemento();\n        }\n        else if (e instanceof NavigationSkipped) {\n            this.commitTransition(currentTransition);\n        }\n        else if (e instanceof RoutesRecognized) {\n            if (this.urlUpdateStrategy === 'eager') {\n                if (!currentTransition.extras.skipLocationChange) {\n                    this.setBrowserUrl(this.createBrowserPath(currentTransition), currentTransition);\n                }\n            }\n        }\n        else if (e instanceof BeforeActivateRoutes) {\n            this.commitTransition(currentTransition);\n            if (this.urlUpdateStrategy === 'deferred' && !currentTransition.extras.skipLocationChange) {\n                this.setBrowserUrl(this.createBrowserPath(currentTransition), currentTransition);\n            }\n        }\n        else if (e instanceof NavigationCancel &&\n            (e.code === NavigationCancellationCode.GuardRejected ||\n                e.code === NavigationCancellationCode.NoDataFromResolver)) {\n            this.restoreHistory(currentTransition);\n        }\n        else if (e instanceof NavigationError) {\n            this.restoreHistory(currentTransition, true);\n        }\n        else if (e instanceof NavigationEnd) {\n            this.lastSuccessfulId = e.id;\n            this.currentPageId = this.browserPageId;\n        }\n    }\n    setBrowserUrl(path, { extras, id }) {\n        const { replaceUrl, state } = extras;\n        if (this.location.isCurrentPathEqualTo(path) || !!replaceUrl) {\n            // replacements do not update the target page\n            const currentBrowserPageId = this.browserPageId;\n            const newState = {\n                ...state,\n                ...this.generateNgRouterState(id, currentBrowserPageId),\n            };\n            this.location.replaceState(path, '', newState);\n        }\n        else {\n            const newState = {\n                ...state,\n                ...this.generateNgRouterState(id, this.browserPageId + 1),\n            };\n            this.location.go(path, '', newState);\n        }\n    }\n    /**\n     * Performs the necessary rollback action to restore the browser URL to the\n     * state before the transition.\n     */\n    restoreHistory(navigation, restoringFromCaughtError = false) {\n        if (this.canceledNavigationResolution === 'computed') {\n            const currentBrowserPageId = this.browserPageId;\n            const targetPagePosition = this.currentPageId - currentBrowserPageId;\n            if (targetPagePosition !== 0) {\n                this.location.historyGo(targetPagePosition);\n            }\n            else if (this.getCurrentUrlTree() === navigation.finalUrl && targetPagePosition === 0) {\n                // We got to the activation stage (where currentUrlTree is set to the navigation's\n                // finalUrl), but we weren't moving anywhere in history (skipLocationChange or replaceUrl).\n                // We still need to reset the router state back to what it was when the navigation started.\n                this.resetInternalState(navigation);\n                this.resetUrlToCurrentUrlTree();\n            }\n            else ;\n        }\n        else if (this.canceledNavigationResolution === 'replace') {\n            // TODO(atscott): It seems like we should _always_ reset the state here. It would be a no-op\n            // for `deferred` navigations that haven't change the internal state yet because guards\n            // reject. For 'eager' navigations, it seems like we also really should reset the state\n            // because the navigation was cancelled. Investigate if this can be done by running TGP.\n            if (restoringFromCaughtError) {\n                this.resetInternalState(navigation);\n            }\n            this.resetUrlToCurrentUrlTree();\n        }\n    }\n    resetUrlToCurrentUrlTree() {\n        this.location.replaceState(this.urlSerializer.serialize(this.getRawUrlTree()), '', this.generateNgRouterState(this.lastSuccessfulId, this.currentPageId));\n    }\n    generateNgRouterState(navigationId, routerPageId) {\n        if (this.canceledNavigationResolution === 'computed') {\n            return { navigationId, ɵrouterPageId: routerPageId };\n        }\n        return { navigationId };\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: HistoryStateManager, deps: null, target: i0.ɵɵFactoryTarget.Injectable });\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: HistoryStateManager, providedIn: 'root' });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: HistoryStateManager, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }] });\n\n/**\n * Performs the given action once the router finishes its next/current navigation.\n *\n * The navigation is considered complete under the following conditions:\n * - `NavigationCancel` event emits and the code is not `NavigationCancellationCode.Redirect` or\n * `NavigationCancellationCode.SupersededByNewNavigation`. In these cases, the\n * redirecting/superseding navigation must finish.\n * - `NavigationError`, `NavigationEnd`, or `NavigationSkipped` event emits\n */\nfunction afterNextNavigation(router, action) {\n    router.events\n        .pipe(filter((e) => e instanceof NavigationEnd ||\n        e instanceof NavigationCancel ||\n        e instanceof NavigationError ||\n        e instanceof NavigationSkipped), map((e) => {\n        if (e instanceof NavigationEnd || e instanceof NavigationSkipped) {\n            return 0 /* NavigationResult.COMPLETE */;\n        }\n        const redirecting = e instanceof NavigationCancel\n            ? e.code === NavigationCancellationCode.Redirect ||\n                e.code === NavigationCancellationCode.SupersededByNewNavigation\n            : false;\n        return redirecting ? 2 /* NavigationResult.REDIRECTING */ : 1 /* NavigationResult.FAILED */;\n    }), filter((result) => result !== 2 /* NavigationResult.REDIRECTING */), take(1))\n        .subscribe(() => {\n        action();\n    });\n}\n\n/**\n * The equivalent `IsActiveMatchOptions` options for `Router.isActive` is called with `true`\n * (exact = true).\n */\nconst exactMatchOptions = {\n    paths: 'exact',\n    fragment: 'ignored',\n    matrixParams: 'ignored',\n    queryParams: 'exact',\n};\n/**\n * The equivalent `IsActiveMatchOptions` options for `Router.isActive` is called with `false`\n * (exact = false).\n */\nconst subsetMatchOptions = {\n    paths: 'subset',\n    fragment: 'ignored',\n    matrixParams: 'ignored',\n    queryParams: 'subset',\n};\n/**\n * @description\n *\n * A service that facilitates navigation among views and URL manipulation capabilities.\n * This service is provided in the root scope and configured with [provideRouter](api/router/provideRouter).\n *\n * @see {@link Route}\n * @see {@link provideRouter}\n * @see [Routing and Navigation Guide](guide/routing/common-router-tasks).\n *\n * @ngModule RouterModule\n *\n * @publicApi\n */\nclass Router {\n    get currentUrlTree() {\n        return this.stateManager.getCurrentUrlTree();\n    }\n    get rawUrlTree() {\n        return this.stateManager.getRawUrlTree();\n    }\n    disposed = false;\n    nonRouterCurrentEntryChangeSubscription;\n    console = inject(_Console);\n    stateManager = inject(StateManager);\n    options = inject(ROUTER_CONFIGURATION, { optional: true }) || {};\n    pendingTasks = inject(_PendingTasksInternal);\n    urlUpdateStrategy = this.options.urlUpdateStrategy || 'deferred';\n    navigationTransitions = inject(NavigationTransitions);\n    urlSerializer = inject(UrlSerializer);\n    location = inject(Location);\n    urlHandlingStrategy = inject(UrlHandlingStrategy);\n    /**\n     * The private `Subject` type for the public events exposed in the getter. This is used internally\n     * to push events to. The separate field allows us to expose separate types in the public API\n     * (i.e., an Observable rather than the Subject).\n     */\n    _events = new Subject();\n    /**\n     * An event stream for routing events.\n     */\n    get events() {\n        // TODO(atscott): This _should_ be events.asObservable(). However, this change requires internal\n        // cleanup: tests are doing `(route.events as Subject<Event>).next(...)`. This isn't\n        // allowed/supported but we still have to fix these or file bugs against the teams before making\n        // the change.\n        return this._events;\n    }\n    /**\n     * The current state of routing in this NgModule.\n     */\n    get routerState() {\n        return this.stateManager.getRouterState();\n    }\n    /**\n     * True if at least one navigation event has occurred,\n     * false otherwise.\n     */\n    navigated = false;\n    /**\n     * A strategy for re-using routes.\n     *\n     * @deprecated Configure using `providers` instead:\n     *   `{provide: RouteReuseStrategy, useClass: MyStrategy}`.\n     */\n    routeReuseStrategy = inject(RouteReuseStrategy);\n    /**\n     * How to handle a navigation request to the current URL.\n     *\n     *\n     * @deprecated Configure this through `provideRouter` or `RouterModule.forRoot` instead.\n     * @see {@link withRouterConfig}\n     * @see {@link provideRouter}\n     * @see {@link RouterModule}\n     */\n    onSameUrlNavigation = this.options.onSameUrlNavigation || 'ignore';\n    config = inject(ROUTES, { optional: true })?.flat() ?? [];\n    /**\n     * Indicates whether the application has opted in to binding Router data to component inputs.\n     *\n     * This option is enabled by the `withComponentInputBinding` feature of `provideRouter` or\n     * `bindToComponentInputs` in the `ExtraOptions` of `RouterModule.forRoot`.\n     */\n    componentInputBindingEnabled = !!inject(INPUT_BINDER, { optional: true });\n    constructor() {\n        this.resetConfig(this.config);\n        this.navigationTransitions.setupNavigations(this).subscribe({\n            error: (e) => {\n                this.console.warn(ngDevMode ? `Unhandled Navigation Error: ${e}` : e);\n            },\n        });\n        this.subscribeToNavigationEvents();\n    }\n    eventsSubscription = new Subscription();\n    subscribeToNavigationEvents() {\n        const subscription = this.navigationTransitions.events.subscribe((e) => {\n            try {\n                const currentTransition = this.navigationTransitions.currentTransition;\n                const currentNavigation = this.navigationTransitions.currentNavigation;\n                if (currentTransition !== null && currentNavigation !== null) {\n                    this.stateManager.handleRouterEvent(e, currentNavigation);\n                    if (e instanceof NavigationCancel &&\n                        e.code !== NavigationCancellationCode.Redirect &&\n                        e.code !== NavigationCancellationCode.SupersededByNewNavigation) {\n                        // It seems weird that `navigated` is set to `true` when the navigation is rejected,\n                        // however it's how things were written initially. Investigation would need to be done\n                        // to determine if this can be removed.\n                        this.navigated = true;\n                    }\n                    else if (e instanceof NavigationEnd) {\n                        this.navigated = true;\n                    }\n                    else if (e instanceof RedirectRequest) {\n                        const opts = e.navigationBehaviorOptions;\n                        const mergedTree = this.urlHandlingStrategy.merge(e.url, currentTransition.currentRawUrl);\n                        const extras = {\n                            browserUrl: currentTransition.extras.browserUrl,\n                            info: currentTransition.extras.info,\n                            skipLocationChange: currentTransition.extras.skipLocationChange,\n                            // The URL is already updated at this point if we have 'eager' URL\n                            // updates or if the navigation was triggered by the browser (back\n                            // button, URL bar, etc). We want to replace that item in history\n                            // if the navigation is rejected.\n                            replaceUrl: currentTransition.extras.replaceUrl ||\n                                this.urlUpdateStrategy === 'eager' ||\n                                isBrowserTriggeredNavigation(currentTransition.source),\n                            // allow developer to override default options with RedirectCommand\n                            ...opts,\n                        };\n                        this.scheduleNavigation(mergedTree, IMPERATIVE_NAVIGATION, null, extras, {\n                            resolve: currentTransition.resolve,\n                            reject: currentTransition.reject,\n                            promise: currentTransition.promise,\n                        });\n                    }\n                }\n                // Note that it's important to have the Router process the events _before_ the event is\n                // pushed through the public observable. This ensures the correct router state is in place\n                // before applications observe the events.\n                if (isPublicRouterEvent(e)) {\n                    this._events.next(e);\n                }\n            }\n            catch (e) {\n                this.navigationTransitions.transitionAbortSubject.next(e);\n            }\n        });\n        this.eventsSubscription.add(subscription);\n    }\n    /** @internal */\n    resetRootComponentType(rootComponentType) {\n        // TODO: vsavkin router 4.0 should make the root component set to null\n        // this will simplify the lifecycle of the router.\n        this.routerState.root.component = rootComponentType;\n        this.navigationTransitions.rootComponentType = rootComponentType;\n    }\n    /**\n     * Sets up the location change listener and performs the initial navigation.\n     */\n    initialNavigation() {\n        this.setUpLocationChangeListener();\n        if (!this.navigationTransitions.hasRequestedNavigation) {\n            this.navigateToSyncWithBrowser(this.location.path(true), IMPERATIVE_NAVIGATION, this.stateManager.restoredState());\n        }\n    }\n    /**\n     * Sets up the location change listener. This listener detects navigations triggered from outside\n     * the Router (the browser back/forward buttons, for example) and schedules a corresponding Router\n     * navigation so that the correct events, guards, etc. are triggered.\n     */\n    setUpLocationChangeListener() {\n        // Don't need to use Zone.wrap any more, because zone.js\n        // already patch onPopState, so location change callback will\n        // run into ngZone\n        this.nonRouterCurrentEntryChangeSubscription ??=\n            this.stateManager.registerNonRouterCurrentEntryChangeListener((url, state, source) => {\n                this.navigateToSyncWithBrowser(url, source, state);\n            });\n    }\n    /**\n     * Schedules a router navigation to synchronize Router state with the browser state.\n     *\n     * This is done as a response to a popstate event and the initial navigation. These\n     * two scenarios represent times when the browser URL/state has been updated and\n     * the Router needs to respond to ensure its internal state matches.\n     */\n    navigateToSyncWithBrowser(url, source, state) {\n        const extras = { replaceUrl: true };\n        // TODO: restoredState should always include the entire state, regardless\n        // of navigationId. This requires a breaking change to update the type on\n        // NavigationStart’s restoredState, which currently requires navigationId\n        // to always be present. The Router used to only restore history state if\n        // a navigationId was present.\n        // The stored navigationId is used by the RouterScroller to retrieve the scroll\n        // position for the page.\n        const restoredState = state?.navigationId ? state : null;\n        // Separate to NavigationStart.restoredState, we must also restore the state to\n        // history.state and generate a new navigationId, since it will be overwritten\n        if (state) {\n            const stateCopy = { ...state };\n            delete stateCopy.navigationId;\n            delete stateCopy.ɵrouterPageId;\n            if (Object.keys(stateCopy).length !== 0) {\n                extras.state = stateCopy;\n            }\n        }\n        const urlTree = this.parseUrl(url);\n        this.scheduleNavigation(urlTree, source, restoredState, extras);\n    }\n    /** The current URL. */\n    get url() {\n        return this.serializeUrl(this.currentUrlTree);\n    }\n    /**\n     * Returns the current `Navigation` object when the router is navigating,\n     * and `null` when idle.\n     */\n    getCurrentNavigation() {\n        return this.navigationTransitions.currentNavigation;\n    }\n    /**\n     * The `Navigation` object of the most recent navigation to succeed and `null` if there\n     *     has not been a successful navigation yet.\n     */\n    get lastSuccessfulNavigation() {\n        return this.navigationTransitions.lastSuccessfulNavigation;\n    }\n    /**\n     * Resets the route configuration used for navigation and generating links.\n     *\n     * @param config The route array for the new configuration.\n     *\n     * @usageNotes\n     *\n     * ```ts\n     * router.resetConfig([\n     *  { path: 'team/:id', component: TeamCmp, children: [\n     *    { path: 'simple', component: SimpleCmp },\n     *    { path: 'user/:name', component: UserCmp }\n     *  ]}\n     * ]);\n     * ```\n     */\n    resetConfig(config) {\n        (typeof ngDevMode === 'undefined' || ngDevMode) && validateConfig(config);\n        this.config = config.map(standardizeConfig);\n        this.navigated = false;\n    }\n    /** @nodoc */\n    ngOnDestroy() {\n        this.dispose();\n    }\n    /** Disposes of the router. */\n    dispose() {\n        // We call `unsubscribe()` to release observers, as users may forget to\n        // unsubscribe manually when subscribing to `router.events`. We do not call\n        // `complete()` because it is unsafe; if someone subscribes using the `first`\n        // operator and the observable completes before emitting a value,\n        // RxJS will throw an error.\n        this._events.unsubscribe();\n        this.navigationTransitions.complete();\n        if (this.nonRouterCurrentEntryChangeSubscription) {\n            this.nonRouterCurrentEntryChangeSubscription.unsubscribe();\n            this.nonRouterCurrentEntryChangeSubscription = undefined;\n        }\n        this.disposed = true;\n        this.eventsSubscription.unsubscribe();\n    }\n    /**\n     * Appends URL segments to the current URL tree to create a new URL tree.\n     *\n     * @param commands An array of URL fragments with which to construct the new URL tree.\n     * If the path is static, can be the literal URL string. For a dynamic path, pass an array of path\n     * segments, followed by the parameters for each segment.\n     * The fragments are applied to the current URL tree or the one provided  in the `relativeTo`\n     * property of the options object, if supplied.\n     * @param navigationExtras Options that control the navigation strategy.\n     * @returns The new URL tree.\n     *\n     * @usageNotes\n     *\n     * ```\n     * // create /team/33/user/11\n     * router.createUrlTree(['/team', 33, 'user', 11]);\n     *\n     * // create /team/33;expand=true/user/11\n     * router.createUrlTree(['/team', 33, {expand: true}, 'user', 11]);\n     *\n     * // you can collapse static segments like this (this works only with the first passed-in value):\n     * router.createUrlTree(['/team/33/user', userId]);\n     *\n     * // If the first segment can contain slashes, and you do not want the router to split it,\n     * // you can do the following:\n     * router.createUrlTree([{segmentPath: '/one/two'}]);\n     *\n     * // create /team/33/(user/11//right:chat)\n     * router.createUrlTree(['/team', 33, {outlets: {primary: 'user/11', right: 'chat'}}]);\n     *\n     * // remove the right secondary node\n     * router.createUrlTree(['/team', 33, {outlets: {primary: 'user/11', right: null}}]);\n     *\n     * // assuming the current url is `/team/33/user/11` and the route points to `user/11`\n     *\n     * // navigate to /team/33/user/11/details\n     * router.createUrlTree(['details'], {relativeTo: route});\n     *\n     * // navigate to /team/33/user/22\n     * router.createUrlTree(['../22'], {relativeTo: route});\n     *\n     * // navigate to /team/44/user/22\n     * router.createUrlTree(['../../team/44/user/22'], {relativeTo: route});\n     *\n     * Note that a value of `null` or `undefined` for `relativeTo` indicates that the\n     * tree should be created relative to the root.\n     * ```\n     */\n    createUrlTree(commands, navigationExtras = {}) {\n        const { relativeTo, queryParams, fragment, queryParamsHandling, preserveFragment } = navigationExtras;\n        const f = preserveFragment ? this.currentUrlTree.fragment : fragment;\n        let q = null;\n        switch (queryParamsHandling ?? this.options.defaultQueryParamsHandling) {\n            case 'merge':\n                q = { ...this.currentUrlTree.queryParams, ...queryParams };\n                break;\n            case 'preserve':\n                q = this.currentUrlTree.queryParams;\n                break;\n            default:\n                q = queryParams || null;\n        }\n        if (q !== null) {\n            q = this.removeEmptyProps(q);\n        }\n        let relativeToUrlSegmentGroup;\n        try {\n            const relativeToSnapshot = relativeTo ? relativeTo.snapshot : this.routerState.snapshot.root;\n            relativeToUrlSegmentGroup = createSegmentGroupFromRoute(relativeToSnapshot);\n        }\n        catch (e) {\n            // This is strictly for backwards compatibility with tests that create\n            // invalid `ActivatedRoute` mocks.\n            // Note: the difference between having this fallback for invalid `ActivatedRoute` setups and\n            // just throwing is ~500 test failures. Fixing all of those tests by hand is not feasible at\n            // the moment.\n            if (typeof commands[0] !== 'string' || commands[0][0] !== '/') {\n                // Navigations that were absolute in the old way of creating UrlTrees\n                // would still work because they wouldn't attempt to match the\n                // segments in the `ActivatedRoute` to the `currentUrlTree` but\n                // instead just replace the root segment with the navigation result.\n                // Non-absolute navigations would fail to apply the commands because\n                // the logic could not find the segment to replace (so they'd act like there were no\n                // commands).\n                commands = [];\n            }\n            relativeToUrlSegmentGroup = this.currentUrlTree.root;\n        }\n        return createUrlTreeFromSegmentGroup(relativeToUrlSegmentGroup, commands, q, f ?? null);\n    }\n    /**\n     * Navigates to a view using an absolute route path.\n     *\n     * @param url An absolute path for a defined route. The function does not apply any delta to the\n     *     current URL.\n     * @param extras An object containing properties that modify the navigation strategy.\n     *\n     * @returns A Promise that resolves to 'true' when navigation succeeds,\n     * to 'false' when navigation fails, or is rejected on error.\n     *\n     * @usageNotes\n     *\n     * The following calls request navigation to an absolute path.\n     *\n     * ```ts\n     * router.navigateByUrl(\"/team/33/user/11\");\n     *\n     * // Navigate without updating the URL\n     * router.navigateByUrl(\"/team/33/user/11\", { skipLocationChange: true });\n     * ```\n     *\n     * @see [Routing and Navigation guide](guide/routing/common-router-tasks)\n     *\n     */\n    navigateByUrl(url, extras = {\n        skipLocationChange: false,\n    }) {\n        const urlTree = isUrlTree(url) ? url : this.parseUrl(url);\n        const mergedTree = this.urlHandlingStrategy.merge(urlTree, this.rawUrlTree);\n        return this.scheduleNavigation(mergedTree, IMPERATIVE_NAVIGATION, null, extras);\n    }\n    /**\n     * Navigate based on the provided array of commands and a starting point.\n     * If no starting route is provided, the navigation is absolute.\n     *\n     * @param commands An array of URL fragments with which to construct the target URL.\n     * If the path is static, can be the literal URL string. For a dynamic path, pass an array of path\n     * segments, followed by the parameters for each segment.\n     * The fragments are applied to the current URL or the one provided  in the `relativeTo` property\n     * of the options object, if supplied.\n     * @param extras An options object that determines how the URL should be constructed or\n     *     interpreted.\n     *\n     * @returns A Promise that resolves to `true` when navigation succeeds, or `false` when navigation\n     *     fails. The Promise is rejected when an error occurs if `resolveNavigationPromiseOnError` is\n     * not `true`.\n     *\n     * @usageNotes\n     *\n     * The following calls request navigation to a dynamic route path relative to the current URL.\n     *\n     * ```ts\n     * router.navigate(['team', 33, 'user', 11], {relativeTo: route});\n     *\n     * // Navigate without updating the URL, overriding the default behavior\n     * router.navigate(['team', 33, 'user', 11], {relativeTo: route, skipLocationChange: true});\n     * ```\n     *\n     * @see [Routing and Navigation guide](guide/routing/common-router-tasks)\n     *\n     */\n    navigate(commands, extras = { skipLocationChange: false }) {\n        validateCommands(commands);\n        return this.navigateByUrl(this.createUrlTree(commands, extras), extras);\n    }\n    /** Serializes a `UrlTree` into a string */\n    serializeUrl(url) {\n        return this.urlSerializer.serialize(url);\n    }\n    /** Parses a string into a `UrlTree` */\n    parseUrl(url) {\n        try {\n            return this.urlSerializer.parse(url);\n        }\n        catch {\n            return this.urlSerializer.parse('/');\n        }\n    }\n    isActive(url, matchOptions) {\n        let options;\n        if (matchOptions === true) {\n            options = { ...exactMatchOptions };\n        }\n        else if (matchOptions === false) {\n            options = { ...subsetMatchOptions };\n        }\n        else {\n            options = matchOptions;\n        }\n        if (isUrlTree(url)) {\n            return containsTree(this.currentUrlTree, url, options);\n        }\n        const urlTree = this.parseUrl(url);\n        return containsTree(this.currentUrlTree, urlTree, options);\n    }\n    removeEmptyProps(params) {\n        return Object.entries(params).reduce((result, [key, value]) => {\n            if (value !== null && value !== undefined) {\n                result[key] = value;\n            }\n            return result;\n        }, {});\n    }\n    scheduleNavigation(rawUrl, source, restoredState, extras, priorPromise) {\n        if (this.disposed) {\n            return Promise.resolve(false);\n        }\n        let resolve;\n        let reject;\n        let promise;\n        if (priorPromise) {\n            resolve = priorPromise.resolve;\n            reject = priorPromise.reject;\n            promise = priorPromise.promise;\n        }\n        else {\n            promise = new Promise((res, rej) => {\n                resolve = res;\n                reject = rej;\n            });\n        }\n        // Indicate that the navigation is happening.\n        const taskId = this.pendingTasks.add();\n        afterNextNavigation(this, () => {\n            // Remove pending task in a microtask to allow for cancelled\n            // initial navigations and redirects within the same task.\n            queueMicrotask(() => this.pendingTasks.remove(taskId));\n        });\n        this.navigationTransitions.handleNavigationRequest({\n            source,\n            restoredState,\n            currentUrlTree: this.currentUrlTree,\n            currentRawUrl: this.currentUrlTree,\n            rawUrl,\n            extras,\n            resolve: resolve,\n            reject: reject,\n            promise,\n            currentSnapshot: this.routerState.snapshot,\n            currentRouterState: this.routerState,\n        });\n        // Make sure that the error is propagated even though `processNavigations` catch\n        // handler does not rethrow\n        return promise.catch((e) => {\n            return Promise.reject(e);\n        });\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: Router, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: Router, providedIn: 'root' });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: Router, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: () => [] });\nfunction validateCommands(commands) {\n    for (let i = 0; i < commands.length; i++) {\n        const cmd = commands[i];\n        if (cmd == null) {\n            throw new _RuntimeError(4008 /* RuntimeErrorCode.NULLISH_COMMAND */, (typeof ngDevMode === 'undefined' || ngDevMode) &&\n                `The requested path contains ${cmd} segment at index ${i}`);\n        }\n    }\n}\nfunction isPublicRouterEvent(e) {\n    return !(e instanceof BeforeActivateRoutes) && !(e instanceof RedirectRequest);\n}\n\nexport { ActivatedRoute, ActivatedRouteSnapshot, ActivationEnd, ActivationStart, BaseRouteReuseStrategy, CREATE_VIEW_TRANSITION, ChildActivationEnd, ChildActivationStart, ChildrenOutletContexts, DefaultTitleStrategy, DefaultUrlSerializer, EventType, GuardsCheckEnd, GuardsCheckStart, INPUT_BINDER, NAVIGATION_ERROR_HANDLER, NavigationCancel, NavigationCancellationCode, NavigationEnd, NavigationError, NavigationSkipped, NavigationSkippedCode, NavigationStart, NavigationTransitions, OutletContext, PRIMARY_OUTLET, ROUTER_CONFIGURATION, ROUTER_OUTLET_DATA, ROUTES, RedirectCommand, ResolveEnd, ResolveStart, RouteConfigLoadEnd, RouteConfigLoadStart, RouteReuseStrategy, RoutedComponentInputBinder, Router, RouterConfigLoader, RouterEvent, RouterOutlet, RouterState, RouterStateSnapshot, RoutesRecognized, Scroll, TitleStrategy, UrlHandlingStrategy, UrlSegment, UrlSegmentGroup, UrlSerializer, UrlTree, VIEW_TRANSITION_OPTIONS, afterNextNavigation, convertToParamMap, createUrlTreeFromSnapshot, createViewTransition, defaultUrlMatcher, isUrlTree, loadChildren, stringifyEvent, ɵEmptyOutletComponent };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}